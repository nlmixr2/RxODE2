[{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-cmt.html","id":"how-rxode2-assigns-compartment-numbers","dir":"Articles","previous_headings":"","what":"How rxode2 assigns compartment numbers","title":"Changing rxode2 compartment numbers","text":"rxode2 automatically assigns compartment numbers parsing. example, Mavoglurant PBPK model following model may used: look summary, can see rxode2 assigned compartment number(s) case, Venous_Blood assigned compartment 15. Figuring can inconvenient also lead re-numbering compartment simulation estimation datasets. easy probably clearer specify compartment name, tools support compartment numbers. Therefore, way number compartment easily can lead less data modification multiple tools.","code":"library(rxode2) #> rxode2 2.0.6 using 1 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` pbpk <- rxode2({     KbBR = exp(lKbBR)     KbMU = exp(lKbMU)     KbAD = exp(lKbAD)     CLint= exp(lCLint + eta.LClint)     KbBO = exp(lKbBO)     KbRB = exp(lKbRB)      ## Regional blood flows     # Cardiac output (L/h) from White et al (1968)     CO  = (187.00*WT^0.81)*60/1000;      QHT = 4.0 *CO/100;     QBR = 12.0*CO/100;     QMU = 17.0*CO/100;     QAD = 5.0 *CO/100;     QSK = 5.0 *CO/100;     QSP = 3.0 *CO/100;     QPA = 1.0 *CO/100;     QLI = 25.5*CO/100;     QST = 1.0 *CO/100;     QGU = 14.0*CO/100;     # Hepatic artery blood flow     QHA = QLI - (QSP + QPA + QST + QGU);      QBO = 5.0 *CO/100;     QKI = 19.0*CO/100;     QRB = CO - (QHT + QBR + QMU + QAD + QSK + QLI + QBO + QKI);     QLU = QHT + QBR + QMU + QAD + QSK + QLI + QBO + QKI + QRB;      ## Organs' volumes = organs' weights / organs' density     VLU = (0.76 *WT/100)/1.051;     VHT = (0.47 *WT/100)/1.030;     VBR = (2.00 *WT/100)/1.036;     VMU = (40.00*WT/100)/1.041;     VAD = (21.42*WT/100)/0.916;     VSK = (3.71 *WT/100)/1.116;     VSP = (0.26 *WT/100)/1.054;     VPA = (0.14 *WT/100)/1.045;     VLI = (2.57 *WT/100)/1.040;     VST = (0.21 *WT/100)/1.050;     VGU = (1.44 *WT/100)/1.043;     VBO = (14.29*WT/100)/1.990;     VKI = (0.44 *WT/100)/1.050;     VAB = (2.81 *WT/100)/1.040;     VVB = (5.62 *WT/100)/1.040;     VRB = (3.86 *WT/100)/1.040;      ## Fixed parameters     BP = 0.61;      # Blood:plasma partition coefficient     fup = 0.028;    # Fraction unbound in plasma     fub = fup/BP;   # Fraction unbound in blood      KbLU = exp(0.8334);     KbHT = exp(1.1205);     KbSK = exp(-.5238);     KbSP = exp(0.3224);     KbPA = exp(0.3224);     KbLI = exp(1.7604);     KbST = exp(0.3224);     KbGU = exp(1.2026);     KbKI = exp(1.3171);      ##-----------------------------------------     S15 = VVB*BP/1000;     C15 = Venous_Blood/S15      ##-----------------------------------------     d/dt(Lungs) = QLU*(Venous_Blood/VVB - Lungs/KbLU/VLU);     d/dt(Heart) = QHT*(Arterial_Blood/VAB - Heart/KbHT/VHT);     d/dt(Brain) = QBR*(Arterial_Blood/VAB - Brain/KbBR/VBR);     d/dt(Muscles) = QMU*(Arterial_Blood/VAB - Muscles/KbMU/VMU);     d/dt(Adipose) = QAD*(Arterial_Blood/VAB - Adipose/KbAD/VAD);     d/dt(Skin) = QSK*(Arterial_Blood/VAB - Skin/KbSK/VSK);     d/dt(Spleen) = QSP*(Arterial_Blood/VAB - Spleen/KbSP/VSP);     d/dt(Pancreas) = QPA*(Arterial_Blood/VAB - Pancreas/KbPA/VPA);     d/dt(Liver) = QHA*Arterial_Blood/VAB + QSP*Spleen/KbSP/VSP +       QPA*Pancreas/KbPA/VPA + QST*Stomach/KbST/VST +       QGU*Gut/KbGU/VGU - CLint*fub*Liver/KbLI/VLI - QLI*Liver/KbLI/VLI;     d/dt(Stomach) = QST*(Arterial_Blood/VAB - Stomach/KbST/VST);     d/dt(Gut) = QGU*(Arterial_Blood/VAB - Gut/KbGU/VGU);     d/dt(Bones) = QBO*(Arterial_Blood/VAB - Bones/KbBO/VBO);     d/dt(Kidneys) = QKI*(Arterial_Blood/VAB - Kidneys/KbKI/VKI);     d/dt(Arterial_Blood) = QLU*(Lungs/KbLU/VLU - Arterial_Blood/VAB);     d/dt(Venous_Blood) = QHT*Heart/KbHT/VHT + QBR*Brain/KbBR/VBR +       QMU*Muscles/KbMU/VMU + QAD*Adipose/KbAD/VAD + QSK*Skin/KbSK/VSK +       QLI*Liver/KbLI/VLI + QBO*Bones/KbBO/VBO + QKI*Kidneys/KbKI/VKI +       QRB*Rest_of_Body/KbRB/VRB - QLU*Venous_Blood/VVB;     d/dt(Rest_of_Body) = QRB*(Arterial_Blood/VAB - Rest_of_Body/KbRB/VRB); }) summary(pbpk) #> rxode2 2.0.6 model named rx_a85dec71e52ff070ef40a42e94383f3b model (ready).  #> DLL: /tmp/RtmpJxPcm1/rxode2/rx_a85dec71e52ff070ef40a42e94383f3b__.rxd/rx_a85dec71e52ff070ef40a42e94383f3b_.so #> NULL #>  #> Calculated Variables: #>  [1] \"KbBR\"  \"KbMU\"  \"KbAD\"  \"CLint\" \"KbBO\"  \"KbRB\"  \"CO\"    \"QHT\"   \"QBR\"   #> [10] \"QMU\"   \"QAD\"   \"QSK\"   \"QSP\"   \"QPA\"   \"QLI\"   \"QST\"   \"QGU\"   \"QHA\"   #> [19] \"QBO\"   \"QKI\"   \"QRB\"   \"QLU\"   \"VLU\"   \"VHT\"   \"VBR\"   \"VMU\"   \"VAD\"   #> [28] \"VSK\"   \"VSP\"   \"VPA\"   \"VLI\"   \"VST\"   \"VGU\"   \"VBO\"   \"VKI\"   \"VAB\"   #> [37] \"VVB\"   \"VRB\"   \"fub\"   \"KbLU\"  \"KbHT\"  \"KbSK\"  \"KbSP\"  \"KbPA\"  \"KbLI\"  #> [46] \"KbST\"  \"KbGU\"  \"KbKI\"  \"S15\"   \"C15\"   #> -- rxode2 Model Syntax -- #> rxode2({ #>     KbBR = exp(lKbBR) #>     KbMU = exp(lKbMU) #>     KbAD = exp(lKbAD) #>     CLint = exp(lCLint + eta.LClint) #>     KbBO = exp(lKbBO) #>     KbRB = exp(lKbRB) #>     CO = (187 * WT^0.81) * 60/1000 #>     QHT = 4 * CO/100 #>     QBR = 12 * CO/100 #>     QMU = 17 * CO/100 #>     QAD = 5 * CO/100 #>     QSK = 5 * CO/100 #>     QSP = 3 * CO/100 #>     QPA = 1 * CO/100 #>     QLI = 25.5 * CO/100 #>     QST = 1 * CO/100 #>     QGU = 14 * CO/100 #>     QHA = QLI - (QSP + QPA + QST + QGU) #>     QBO = 5 * CO/100 #>     QKI = 19 * CO/100 #>     QRB = CO - (QHT + QBR + QMU + QAD + QSK + QLI + QBO + QKI) #>     QLU = QHT + QBR + QMU + QAD + QSK + QLI + QBO + QKI + QRB #>     VLU = (0.76 * WT/100)/1.051 #>     VHT = (0.47 * WT/100)/1.03 #>     VBR = (2 * WT/100)/1.036 #>     VMU = (40 * WT/100)/1.041 #>     VAD = (21.42 * WT/100)/0.916 #>     VSK = (3.71 * WT/100)/1.116 #>     VSP = (0.26 * WT/100)/1.054 #>     VPA = (0.14 * WT/100)/1.045 #>     VLI = (2.57 * WT/100)/1.04 #>     VST = (0.21 * WT/100)/1.05 #>     VGU = (1.44 * WT/100)/1.043 #>     VBO = (14.29 * WT/100)/1.99 #>     VKI = (0.44 * WT/100)/1.05 #>     VAB = (2.81 * WT/100)/1.04 #>     VVB = (5.62 * WT/100)/1.04 #>     VRB = (3.86 * WT/100)/1.04 #>     BP = 0.61 #>     fup = 0.028 #>     fub = fup/BP #>     KbLU = exp(0.8334) #>     KbHT = exp(1.1205) #>     KbSK = exp(-0.5238) #>     KbSP = exp(0.3224) #>     KbPA = exp(0.3224) #>     KbLI = exp(1.7604) #>     KbST = exp(0.3224) #>     KbGU = exp(1.2026) #>     KbKI = exp(1.3171) #>     S15 = VVB * BP/1000 #>     C15 = Venous_Blood/S15 #>     d/dt(Lungs) = QLU * (Venous_Blood/VVB - Lungs/KbLU/VLU) #>     d/dt(Heart) = QHT * (Arterial_Blood/VAB - Heart/KbHT/VHT) #>     d/dt(Brain) = QBR * (Arterial_Blood/VAB - Brain/KbBR/VBR) #>     d/dt(Muscles) = QMU * (Arterial_Blood/VAB - Muscles/KbMU/VMU) #>     d/dt(Adipose) = QAD * (Arterial_Blood/VAB - Adipose/KbAD/VAD) #>     d/dt(Skin) = QSK * (Arterial_Blood/VAB - Skin/KbSK/VSK) #>     d/dt(Spleen) = QSP * (Arterial_Blood/VAB - Spleen/KbSP/VSP) #>     d/dt(Pancreas) = QPA * (Arterial_Blood/VAB - Pancreas/KbPA/VPA) #>     d/dt(Liver) = QHA * Arterial_Blood/VAB + QSP * Spleen/KbSP/VSP +  #>         QPA * Pancreas/KbPA/VPA + QST * Stomach/KbST/VST + QGU *  #>         Gut/KbGU/VGU - CLint * fub * Liver/KbLI/VLI - QLI * Liver/KbLI/VLI #>     d/dt(Stomach) = QST * (Arterial_Blood/VAB - Stomach/KbST/VST) #>     d/dt(Gut) = QGU * (Arterial_Blood/VAB - Gut/KbGU/VGU) #>     d/dt(Bones) = QBO * (Arterial_Blood/VAB - Bones/KbBO/VBO) #>     d/dt(Kidneys) = QKI * (Arterial_Blood/VAB - Kidneys/KbKI/VKI) #>     d/dt(Arterial_Blood) = QLU * (Lungs/KbLU/VLU - Arterial_Blood/VAB) #>     d/dt(Venous_Blood) = QHT * Heart/KbHT/VHT + QBR * Brain/KbBR/VBR +  #>         QMU * Muscles/KbMU/VMU + QAD * Adipose/KbAD/VAD + QSK *  #>         Skin/KbSK/VSK + QLI * Liver/KbLI/VLI + QBO * Bones/KbBO/VBO +  #>         QKI * Kidneys/KbKI/VKI + QRB * Rest_of_Body/KbRB/VRB -  #>         QLU * Venous_Blood/VVB #>     d/dt(Rest_of_Body) = QRB * (Arterial_Blood/VAB - Rest_of_Body/KbRB/VRB) #> })"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-cmt.html","id":"changing-compartment-numbers-by-pre-declaring-the-compartments","dir":"Articles","previous_headings":"","what":"Changing compartment numbers by pre-declaring the compartments","title":"Changing rxode2 compartment numbers","text":"add compartments rxode2 model order desire simply need pre-declare compartments cmt. example specifying Venous_Blood Skin 1st 2nd compartments, respectively, simple: can see change simple printout first two compartments Venous_Blood followed Skin.","code":"pbpk2 <- rxode2({   ## Now this is the first compartment, ie cmt=1   cmt(Venous_Blood)   ## Skin may be a compartment you wish to dose to as well,   ##  so it is now cmt=2   cmt(Skin)    KbBR = exp(lKbBR)   KbMU = exp(lKbMU)   KbAD = exp(lKbAD)   CLint= exp(lCLint + eta.LClint)   KbBO = exp(lKbBO)   KbRB = exp(lKbRB)    ## Regional blood flows   # Cardiac output (L/h) from White et al (1968)m   CO  = (187.00*WT^0.81)*60/1000;    QHT = 4.0 *CO/100;   QBR = 12.0*CO/100;   QMU = 17.0*CO/100;   QAD = 5.0 *CO/100;   QSK = 5.0 *CO/100;   QSP = 3.0 *CO/100;   QPA = 1.0 *CO/100;   QLI = 25.5*CO/100;   QST = 1.0 *CO/100;   QGU = 14.0*CO/100;   QHA = QLI - (QSP + QPA + QST + QGU); # Hepatic artery blood flow   QBO = 5.0 *CO/100;   QKI = 19.0*CO/100;   QRB = CO - (QHT + QBR + QMU + QAD + QSK + QLI + QBO + QKI);   QLU = QHT + QBR + QMU + QAD + QSK + QLI + QBO + QKI + QRB;    ## Organs' volumes = organs' weights / organs' density   VLU = (0.76 *WT/100)/1.051;   VHT = (0.47 *WT/100)/1.030;   VBR = (2.00 *WT/100)/1.036;   VMU = (40.00*WT/100)/1.041;   VAD = (21.42*WT/100)/0.916;   VSK = (3.71 *WT/100)/1.116;   VSP = (0.26 *WT/100)/1.054;   VPA = (0.14 *WT/100)/1.045;   VLI = (2.57 *WT/100)/1.040;   VST = (0.21 *WT/100)/1.050;   VGU = (1.44 *WT/100)/1.043;   VBO = (14.29*WT/100)/1.990;   VKI = (0.44 *WT/100)/1.050;   VAB = (2.81 *WT/100)/1.040;   VVB = (5.62 *WT/100)/1.040;   VRB = (3.86 *WT/100)/1.040;    ## Fixed parameters   BP = 0.61;      # Blood:plasma partition coefficient   fup = 0.028;    # Fraction unbound in plasma   fub = fup/BP;   # Fraction unbound in blood    KbLU = exp(0.8334);   KbHT = exp(1.1205);   KbSK = exp(-.5238);   KbSP = exp(0.3224);   KbPA = exp(0.3224);   KbLI = exp(1.7604);   KbST = exp(0.3224);   KbGU = exp(1.2026);   KbKI = exp(1.3171);     ##-----------------------------------------   S15 = VVB*BP/1000;   C15 = Venous_Blood/S15    ##-----------------------------------------   d/dt(Lungs) = QLU*(Venous_Blood/VVB - Lungs/KbLU/VLU);   d/dt(Heart) = QHT*(Arterial_Blood/VAB - Heart/KbHT/VHT);   d/dt(Brain) = QBR*(Arterial_Blood/VAB - Brain/KbBR/VBR);   d/dt(Muscles) = QMU*(Arterial_Blood/VAB - Muscles/KbMU/VMU);   d/dt(Adipose) = QAD*(Arterial_Blood/VAB - Adipose/KbAD/VAD);   d/dt(Skin) = QSK*(Arterial_Blood/VAB - Skin/KbSK/VSK);   d/dt(Spleen) = QSP*(Arterial_Blood/VAB - Spleen/KbSP/VSP);   d/dt(Pancreas) = QPA*(Arterial_Blood/VAB - Pancreas/KbPA/VPA);   d/dt(Liver) = QHA*Arterial_Blood/VAB + QSP*Spleen/KbSP/VSP +     QPA*Pancreas/KbPA/VPA + QST*Stomach/KbST/VST + QGU*Gut/KbGU/VGU -     CLint*fub*Liver/KbLI/VLI - QLI*Liver/KbLI/VLI;   d/dt(Stomach) = QST*(Arterial_Blood/VAB - Stomach/KbST/VST);   d/dt(Gut) = QGU*(Arterial_Blood/VAB - Gut/KbGU/VGU);   d/dt(Bones) = QBO*(Arterial_Blood/VAB - Bones/KbBO/VBO);   d/dt(Kidneys) = QKI*(Arterial_Blood/VAB - Kidneys/KbKI/VKI);   d/dt(Arterial_Blood) = QLU*(Lungs/KbLU/VLU - Arterial_Blood/VAB);   d/dt(Venous_Blood) = QHT*Heart/KbHT/VHT + QBR*Brain/KbBR/VBR +     QMU*Muscles/KbMU/VMU + QAD*Adipose/KbAD/VAD + QSK*Skin/KbSK/VSK +     QLI*Liver/KbLI/VLI + QBO*Bones/KbBO/VBO + QKI*Kidneys/KbKI/VKI +     QRB*Rest_of_Body/KbRB/VRB - QLU*Venous_Blood/VVB;   d/dt(Rest_of_Body) = QRB*(Arterial_Blood/VAB - Rest_of_Body/KbRB/VRB); }) pbpk2 #> rxode2 2.0.6 model named rx_f325e82bd06295cab95af1f6ddc0f6c0 model (ready).  #> x$state: Venous_Blood, Skin, Lungs, Heart, Brain, Muscles, Adipose, Spleen, Pancreas, Liver, Stomach, Gut, Bones, Kidneys, Arterial_Blood, Rest_of_Body #> x$params: lKbBR, lKbMU, lKbAD, lCLint, eta.LClint, lKbBO, lKbRB, WT, BP, fup #> x$lhs: KbBR, KbMU, KbAD, CLint, KbBO, KbRB, CO, QHT, QBR, QMU, QAD, QSK, QSP, QPA, QLI, QST, QGU, QHA, QBO, QKI, QRB, QLU, VLU, VHT, VBR, VMU, VAD, VSK, VSP, VPA, VLI, VST, VGU, VBO, VKI, VAB, VVB, VRB, fub, KbLU, KbHT, KbSK, KbSP, KbPA, KbLI, KbST, KbGU, KbKI, S15, C15"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-cmt.html","id":"appending-compartments-to-the-model","dir":"Articles","previous_headings":"","what":"Appending compartments to the model","title":"Changing rxode2 compartment numbers","text":"can also append “compartments” model. ODE solving internals, add fake compartments model differential equations defined. example legal: compartments defined differential equations supported; model : give error:","code":"ode.1c.ka <- rxode2({     C2 = center/V;     d / dt(depot) = -KA * depot     d/dt(center) = KA * depot - CL*C2     cmt(eff); }) print(ode.1c.ka) #> rxode2 2.0.6 model named rx_c1a93bec1077a3a7283befd07fbaf291 model (ready).  #> $state: depot, center #> $stateExtra: eff #> $params: V, KA, CL #> $lhs: C2 ode.1c.ka <- rxode2({     cmt(eff);     C2 = center/V;     d / dt(depot) = -KA * depot     d/dt(center) = KA * depot - CL*C2 }) Error in rxModelVars_(obj) :    Evaluation error: Compartment 'eff' needs differential equations defined."},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-covariates.html","id":"individual-covariates","dir":"Articles","previous_headings":"","what":"Individual Covariates","title":"rxode2 Covariates","text":"individual covariate wish solve may specify iCov dataset:","code":"library(rxode2) ## rxode2 2.0.6 using 1 threads (see ?getRxThreads) ##   no cache: create with `rxCreateCache()` library(units) ## udunits database from /usr/share/xml/udunits/udunits2.xml library(xgxr)  mod3 <- rxode2({     KA=2.94E-01;     ## Clearance with individuals     CL=1.86E+01 * (WT / 70) ^ 0.75;     V2=4.02E+01;     Q=1.05E+01;     V3=2.97E+02;     Kin=1;     Kout=1;     EC50=200;     ## The linCmt() picks up the variables from above     C2   = linCmt();     Tz= 8     amp=0.1     eff(0) = 1  ## This specifies that the effect compartment starts at 1.     d/dt(eff) =  Kin - Kout*(1-C2/(EC50+C2))*eff; })  ev <- et(amount.units=\"mg\", time.units=\"hours\") %>%     et(amt=10000, cmt=1) %>%     et(0,48,length.out=100) %>%     et(id=1:4);  set.seed(10) rxSetSeed(10) ## Now use iCov to simulate a 4-id sample r1 <- solve(mod3, ev,             # Create individual covariate data-frame             iCov=data.frame(id=1:4, WT=rnorm(4, 70, 10))) print(r1) ## ── Solved rxode2 object ── ## ── Parameters ($params): ── ##      KA      V2       Q      V3     Kin    Kout    EC50      Tz     amp  ##   0.294  40.200  10.500 297.000   1.000   1.000 200.000   8.000   0.100  ## ── Initial Conditions ($inits): ── ## eff  ##   1  ## ── First part of data (object): ── ## # A tibble: 400 × 6 ##      id  time    CL    C2   eff    WT ##   <int>   [h] <dbl> <dbl> <dbl> <dbl> ## 1     1 0      18.6   0    1     70.2 ## 2     1 0.485  18.6  27.8  1.03  70.2 ## 3     1 0.970  18.6  43.7  1.08  70.2 ## 4     1 1.45   18.6  51.7  1.13  70.2 ## 5     1 1.94   18.6  54.7  1.18  70.2 ## 6     1 2.42   18.6  54.5  1.21  70.2 ## # … with 394 more rows plot(r1, C2, log=\"y\") ## Warning: Transformation introduced infinite values in continuous y-axis"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-covariates.html","id":"time-varying-covariates","dir":"Articles","previous_headings":"","what":"Time Varying Covariates","title":"rxode2 Covariates","text":"Covariates easy specify rxode2, can specify variable. Time-varying covariates, like clock time circadian rhythm model, can also used. Extending indirect response model already discussed, : Now covariate present event dataset, system can solved combining dataset model: solving ODE equations, solver may sample times outside data. happens, ODE solver can use linear interpolation covariate values. equivalent R’s approxfun method=\"linear\".   Note linear approximation case leads kinks solved system 24-hours covariate linear interpolation near 24 near 0. linear seems reasonable, cases like clock time make interpolation methods attractive. rxode2 default covariate interpolation last observation carried forward (locf), constant approximation. equivalent R’s approxfun method=\"constant\". gives following plots:   case, plots seem smoother. can also use NONMEM’s preferred interpolation style next observation carried backward (NOCB): gives following plots:","code":"library(rxode2) library(units)  mod3 <- rxode2({     KA=2.94E-01;     CL=1.86E+01;     V2=4.02E+01;     Q=1.05E+01;     V3=2.97E+02;     Kin0=1;     Kout=1;     EC50=200;     ## The linCmt() picks up the variables from above     C2   = linCmt();     Tz= 8     amp=0.1     eff(0) = 1  ## This specifies that the effect compartment starts at 1.     ## Kin changes based on time of day (like cortosol)     Kin =   Kin0 +amp *cos(2*pi*(ctime-Tz)/24)     d/dt(eff) =  Kin - Kout*(1-C2/(EC50+C2))*eff; })   ev <- eventTable(amount.units=\"mg\", time.units=\"hours\") %>%     add.dosing(dose=10000, nbr.doses=1, dosing.to=1) %>%     add.sampling(seq(0,48,length.out=100));   ## Create data frame of 8 am dosing for the first dose This is done ## with base R but it can be done with dplyr or data.table ev$ctime <- (ev$time+set_units(8,hr)) %% 24 r1 <- solve(mod3, ev, covsInterpolation=\"linear\") print(r1) #> ── Solved rxode2 object ── #> ── Parameters ($params): ── #>         KA         CL         V2          Q         V3       Kin0       Kout  #>   0.294000  18.600000  40.200000  10.500000 297.000000   1.000000   1.000000  #>       EC50         Tz        amp         pi  #> 200.000000   8.000000   0.100000   3.141593  #> ── Initial Conditions ($inits): ── #> eff  #>   1  #> ── First part of data (object): ── #> # A tibble: 100 × 5 #>    time    C2   Kin   eff ctime #>     [h] <dbl> <dbl> <dbl>   [h] #> 1 0       0    1.1   1     8    #> 2 0.485  27.8  1.10  1.07  8.48 #> 3 0.970  43.7  1.10  1.15  8.97 #> 4 1.45   51.8  1.09  1.22  9.45 #> 5 1.94   54.8  1.09  1.27  9.94 #> 6 2.42   54.6  1.08  1.30 10.4  #> # … with 94 more rows plot(r1,C2, ylab=\"Central Concentration\") plot(r1,eff) + ylab(\"Effect\") + xlab(\"Time\") r1 <- solve(mod3, ev,covsInterpolation=\"locf\") print(r1) #> ── Solved rxode2 object ── #> ── Parameters ($params): ── #>         KA         CL         V2          Q         V3       Kin0       Kout  #>   0.294000  18.600000  40.200000  10.500000 297.000000   1.000000   1.000000  #>       EC50         Tz        amp         pi  #> 200.000000   8.000000   0.100000   3.141593  #> ── Initial Conditions ($inits): ── #> eff  #>   1  #> ── First part of data (object): ── #> # A tibble: 100 × 5 #>    time    C2   Kin   eff ctime #>     [h] <dbl> <dbl> <dbl>   [h] #> 1 0       0    1.1   1     8    #> 2 0.485  27.8  1.10  1.07  8.48 #> 3 0.970  43.7  1.10  1.15  8.97 #> 4 1.45   51.8  1.09  1.22  9.45 #> 5 1.94   54.8  1.09  1.27  9.94 #> 6 2.42   54.6  1.08  1.31 10.4  #> # … with 94 more rows plot(r1,C2, ylab=\"Central Concentration\", xlab=\"Time\") plot(r1,eff, ylab=\"Effect\", xlab=\"Time\") r1 <- solve(mod3, ev,covsInterpolation=\"nocb\") print(r1) #> ── Solved rxode2 object ── #> ── Parameters ($params): ── #>         KA         CL         V2          Q         V3       Kin0       Kout  #>   0.294000  18.600000  40.200000  10.500000 297.000000   1.000000   1.000000  #>       EC50         Tz        amp         pi  #> 200.000000   8.000000   0.100000   3.141593  #> ── Initial Conditions ($inits): ── #> eff  #>   1  #> ── First part of data (object): ── #> # A tibble: 100 × 5 #>    time    C2   Kin   eff ctime #>     [h] <dbl> <dbl> <dbl>   [h] #> 1 0       0    1.1   1     8    #> 2 0.485  27.8  1.10  1.07  8.48 #> 3 0.970  43.7  1.10  1.15  8.97 #> 4 1.45   51.8  1.09  1.21  9.45 #> 5 1.94   54.8  1.09  1.27  9.94 #> 6 2.42   54.6  1.08  1.30 10.4  #> # … with 94 more rows plot(r1,C2, ylab=\"Central Concentration\", xlab=\"Time\") plot(r1,eff, ylab=\"Effect\", xlab=\"Time\")"},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-data-frame.html","id":"creating-an-interactive-data-frame","dir":"Articles","previous_headings":"Using rxode2 data frames","what":"Creating an interactive data frame","title":"rxode2 Data Frames","text":"rxode2 supports returning solved object modified data-frame. done predict(), solve(), rxSolve() methods. mattigr","code":"library(rxode2) library(units)  ## Setup example model mod1 <- rxode2({   C2 = centr/V2;   C3 = peri/V3;   d/dt(depot) =-KA*depot;   d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;   d/dt(peri)  =                    Q*C2 - Q*C3;   d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff; })  ## Seup parameters and initial conditions  theta <-    c(KA=2.94E-01, CL=1.86E+01, V2=4.02E+01, # central      Q=1.05E+01,  V3=2.97E+02,              # peripheral     Kin=1, Kout=1, EC50=200)               # effects  inits <- c(eff=1)  ## Setup dosing event information ev <- eventTable(amount.units=\"mg\", time.units=\"hours\") %>%   add.dosing(dose=10000, nbr.doses=10, dosing.interval=12) %>%   add.dosing(dose=20000, nbr.doses=5, start.time=120,              dosing.interval=24) %>%   add.sampling(0:240);   ## Now solve x <- predict(mod1,theta, ev, inits) print(x) #> -- Solved rxode2 object -- #> -- Parameters ($params): -- #>      V2      V3      KA      CL       Q     Kin    Kout    EC50  #>  40.200 297.000   0.294  18.600  10.500   1.000   1.000 200.000  #> -- Initial Conditions ($inits): -- #> depot centr  peri   eff  #>     0     0     0     1  #> -- First part of data (object): -- #> # A tibble: 241 x 7 #>   time    C2    C3  depot centr  peri   eff #>    [h] <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> #> 1    0   0   0     10000     0     0   1    #> 2    1  44.4 0.920  7453. 1784.  273.  1.08 #> 3    2  54.9 2.67   5554. 2206.  794.  1.18 #> 4    3  51.9 4.46   4140. 2087. 1324.  1.23 #> 5    4  44.5 5.98   3085. 1789. 1776.  1.23 #> 6    5  36.5 7.18   2299. 1467. 2132.  1.21 #> # ... with 235 more rows x <- solve(mod1,theta, ev, inits) print(x) #> -- Solved rxode2 object -- #> -- Parameters ($params): -- #>      V2      V3      KA      CL       Q     Kin    Kout    EC50  #>  40.200 297.000   0.294  18.600  10.500   1.000   1.000 200.000  #> -- Initial Conditions ($inits): -- #> depot centr  peri   eff  #>     0     0     0     1  #> -- First part of data (object): -- #> # A tibble: 241 x 7 #>   time    C2    C3  depot centr  peri   eff #>    [h] <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> #> 1    0   0   0     10000     0     0   1    #> 2    1  44.4 0.920  7453. 1784.  273.  1.08 #> 3    2  54.9 2.67   5554. 2206.  794.  1.18 #> 4    3  51.9 4.46   4140. 2087. 1324.  1.23 #> 5    4  44.5 5.98   3085. 1789. 1776.  1.23 #> 6    5  36.5 7.18   2299. 1467. 2132.  1.21 #> # ... with 235 more rows x <- mod1 %>% solve(theta, ev, inits) print(x) #> -- Solved rxode2 object -- #> -- Parameters ($params): -- #>      V2      V3      KA      CL       Q     Kin    Kout    EC50  #>  40.200 297.000   0.294  18.600  10.500   1.000   1.000 200.000  #> -- Initial Conditions ($inits): -- #> depot centr  peri   eff  #>     0     0     0     1  #> -- First part of data (object): -- #> # A tibble: 241 x 7 #>   time    C2    C3  depot centr  peri   eff #>    [h] <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> #> 1    0   0   0     10000     0     0   1    #> 2    1  44.4 0.920  7453. 1784.  273.  1.08 #> 3    2  54.9 2.67   5554. 2206.  794.  1.18 #> 4    3  51.9 4.46   4140. 2087. 1324.  1.23 #> 5    4  44.5 5.98   3085. 1789. 1776.  1.23 #> 6    5  36.5 7.18   2299. 1467. 2132.  1.21 #> # ... with 235 more rows"},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-data-frame.html","id":"using-the-solved-object-as-a-simple-data-frame","dir":"Articles","previous_headings":"Using rxode2 data frames","what":"Using the solved object as a simple data frame","title":"rxode2 Data Frames","text":"solved object acts data.frame tbl can filtered dpylr. example filter easily.","code":"library(dplyr) ## You can  drop units for comparisons and filtering x <- mod1 %>% solve(theta,ev,inits) %>%     drop_units %>% filter(time <= 3) %>% as.tbl ## or keep them and compare with the proper units. x <- mod1 %>% solve(theta,ev,inits) %>%     filter(time <= set_units(3, hr)) %>% as.tbl x #> # A tibble: 4 x 7 #>   time    C2    C3  depot centr  peri   eff #>    [h] <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> #> 1    0   0   0     10000     0     0   1    #> 2    1  44.4 0.920  7453. 1784.  273.  1.08 #> 3    2  54.9 2.67   5554. 2206.  794.  1.18 #> 4    3  51.9 4.46   4140. 2087. 1324.  1.23"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-data-frame.html","id":"updating-the-data-set-interactively","dir":"Articles","previous_headings":"","what":"Updating the data-set interactively","title":"rxode2 Data Frames","text":"However isn’t just simple data object. can use solved object update parameters fly, even change sampling time. First need recreate original solved system:","code":"x <- mod1 %>% solve(theta,ev,inits); print(x) #> -- Solved rxode2 object -- #> -- Parameters ($params): -- #>      V2      V3      KA      CL       Q     Kin    Kout    EC50  #>  40.200 297.000   0.294  18.600  10.500   1.000   1.000 200.000  #> -- Initial Conditions ($inits): -- #> depot centr  peri   eff  #>     0     0     0     1  #> -- First part of data (object): -- #> # A tibble: 241 x 7 #>   time    C2    C3  depot centr  peri   eff #>    [h] <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> #> 1    0   0   0     10000     0     0   1    #> 2    1  44.4 0.920  7453. 1784.  273.  1.08 #> 3    2  54.9 2.67   5554. 2206.  794.  1.18 #> 4    3  51.9 4.46   4140. 2087. 1324.  1.23 #> 5    4  44.5 5.98   3085. 1789. 1776.  1.23 #> 6    5  36.5 7.18   2299. 1467. 2132.  1.21 #> # ... with 235 more rows"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-data-frame.html","id":"modifying-initial-conditions","dir":"Articles","previous_headings":"Updating the data-set interactively","what":"Modifying initial conditions","title":"rxode2 Data Frames","text":"examine change initial conditions, can use syntax cmt.0, cmt0, cmt_0. case eff compartment defined model, : shows initial condition effect compartment. wished change initial condition 2, can done easily :","code":"x$eff0 #> [1] 1 x$eff0 <- 2 print(x) #> -- Solved rxode2 object -- #> -- Parameters ($params): -- #>      V2      V3      KA      CL       Q     Kin    Kout    EC50  #>  40.200 297.000   0.294  18.600  10.500   1.000   1.000 200.000  #> -- Initial Conditions ($inits): -- #> depot centr  peri   eff  #>     0     0     0     2  #> -- First part of data (object): -- #> # A tibble: 241 x 7 #>   time    C2    C3  depot centr  peri   eff #>    [h] <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> #> 1    0   0   0     10000     0     0   2    #> 2    1  44.4 0.920  7453. 1784.  273.  1.50 #> 3    2  54.9 2.67   5554. 2206.  794.  1.37 #> 4    3  51.9 4.46   4140. 2087. 1324.  1.31 #> 5    4  44.5 5.98   3085. 1789. 1776.  1.27 #> 6    5  36.5 7.18   2299. 1467. 2132.  1.23 #> # ... with 235 more rows plot(x)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-data-frame.html","id":"modifying-observation-times-for-rxode2","dir":"Articles","previous_headings":"Updating the data-set interactively","what":"Modifying observation times for rxode2","title":"rxode2 Data Frames","text":"Notice initial effect now 2. can also change sampling times easily method changing t time. example:","code":"x$t <- seq(0,5,length.out=20) print(x) #> -- Solved rxode2 object -- #> -- Parameters ($params): -- #>      V2      V3      KA      CL       Q     Kin    Kout    EC50  #>  40.200 297.000   0.294  18.600  10.500   1.000   1.000 200.000  #> -- Initial Conditions ($inits): -- #> depot centr  peri   eff  #>     0     0     0     2  #> -- First part of data (object): -- #> # A tibble: 20 x 7 #>    time    C2     C3  depot centr  peri   eff #>     [h] <dbl>  <dbl>  <dbl> <dbl> <dbl> <dbl> #> 1 0       0   0      10000     0    0    2    #> 2 0.263  16.8 0.0817  9255.  677.  24.3  1.79 #> 3 0.526  29.5 0.299   8566. 1187.  88.7  1.65 #> 4 0.789  38.9 0.615   7929. 1562. 183.   1.55 #> 5 1.05   45.5 1.00    7338. 1830. 298.   1.49 #> 6 1.32   50.1 1.44    6792. 2013. 427.   1.44 #> # ... with 14 more rows plot(x)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-data-frame.html","id":"modifying-simulation-parameters","dir":"Articles","previous_headings":"Updating the data-set interactively","what":"Modifying simulation parameters","title":"rxode2 Data Frames","text":"can also access change parameters $ operator. example, accessing KA can done : may change assigning new value.  can access/change parameters, initialization(s) events $params, $inits, $events accessor syntax, similar used . syntax makes easy update explore effect various parameters solved object.","code":"x$KA #> [1] 0.294 x$KA <- 1 print(x) #> -- Solved rxode2 object -- #> -- Parameters ($params): -- #>    V2    V3    KA    CL     Q   Kin  Kout  EC50  #>  40.2 297.0   1.0  18.6  10.5   1.0   1.0 200.0  #> -- Initial Conditions ($inits): -- #> depot centr  peri   eff  #>     0     0     0     2  #> -- First part of data (object): -- #> # A tibble: 20 x 7 #>    time    C2    C3  depot centr   peri   eff #>     [h] <dbl> <dbl>  <dbl> <dbl>  <dbl> <dbl> #> 1 0       0   0     10000     0     0    2    #> 2 0.263  52.2 0.261  7686. 2098.   77.6  1.82 #> 3 0.526  83.3 0.900  5908. 3348.  267.   1.74 #> 4 0.789  99.8 1.75   4541. 4010.  519.   1.69 #> 5 1.05  106.  2.69   3490. 4273.  800.   1.67 #> 6 1.32  106.  3.66   2683. 4272. 1086.   1.64 #> # ... with 14 more rows plot(x)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-datasets.html","id":"datasets-for-rxode2-nlmixr","dir":"Articles","previous_headings":"","what":"Datasets for rxode2 & nlmixr","title":"rxode2 Event Types","text":"Data input nlmixr type data input rxode2, similar data NONMEM (NONMEM-ready datasets can used directly nlmixr).","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-datasets.html","id":"subject-identification-columns","dir":"Articles","previous_headings":"Columns Described by Type of Use","what":"Subject Identification Columns","title":"rxode2 Event Types","text":"subject identification column separates subjects identification random effects. ID: subject identifier may integer, character, factor.","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-datasets.html","id":"observation-columns","dir":"Articles","previous_headings":"Columns Described by Type of Use","what":"Observation Columns","title":"rxode2 Event Types","text":"Observation columns used indicate dependent variable use measure . DV: numeric column measurement CENS: numeric column indication censoring, limit quantification assay. LIMIT: numeric column helping indicate type censoring, limit quantification assay. MDV: indicator missing DV values CMT: name number compartment DVID: dependent variable identifier EVID event identifier","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-datasets.html","id":"dosing-columns","dir":"Articles","previous_headings":"Columns Described by Type of Use","what":"Dosing Columns","title":"rxode2 Event Types","text":"AMT: amount dose CMT: name number compartment EVID: event identifier ADDL: number additional doses RATE DUR: rate duration dose","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-datasets.html","id":"details-for-specific-dataset-columns","dir":"Articles","previous_headings":"","what":"Details for Specific Dataset Columns","title":"rxode2 Event Types","text":"details sorted alphabetically column name. grouping use, see documentation .","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-datasets.html","id":"amt-column","dir":"Articles","previous_headings":"Details for Specific Dataset Columns","what":"AMT Column","title":"rxode2 Event Types","text":"AMT column defines amount dose. observation rows, 0 NA. dosing rows, amount dose administered CMT. dose zero-order rate (constant infusion), infusion may setup using RATE DUR column.","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-datasets.html","id":"censlimit-columns","dir":"Articles","previous_headings":"Details for Specific Dataset Columns","what":"CENS/LIMIT Columns","title":"rxode2 Event Types","text":"CENS column indicator column indicating censoring occurred. pharmacokinetic modeling, censoring typically sample limit quantification. Internally rxode2 saves values nlmixr can use likelihood calculations. CENS = 0 indicates value DV measured without censoring. CENS = 1 indicates value left censored (limit quantitation) value DV censoring/quantitation limit. CENS = -1 indicates value right censored (limit quantitation) value DV censoring/quantitation limit. LIMIT additional information censoring handled nlmixr stored rxode2’s data structure well. value left censored, like limit 1 may also believe value certain threshold, like zero. case, limit 0 indicates censored value 0 1. short : CENS = 0 LIMIT ignored observation censored CENS = 1 value censored (LIMIT, DV) CENS = -1 value censored (DV, LIMIT)","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-datasets.html","id":"cmt-column","dir":"Articles","previous_headings":"Details for Specific Dataset Columns","what":"CMT Column","title":"rxode2 Event Types","text":"CMT column indicates compartment event occurs. given character string factor (preferred method), matched name model. given integer, matched order compartments appear model.","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-datasets.html","id":"dur-column","dir":"Articles","previous_headings":"Details for Specific Dataset Columns","what":"DUR Column","title":"rxode2 Event Types","text":"DUR column defines duration infusion. used set duration zero-order rate infusion.","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-datasets.html","id":"dv-column","dir":"Articles","previous_headings":"Details for Specific Dataset Columns","what":"DV Column","title":"rxode2 Event Types","text":"DV column indicates current measurement current compartment (see CMT) current measurement identifier (see DVID) may missing (see MDV) censored (see CENS).","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-datasets.html","id":"dvid-column","dir":"Articles","previous_headings":"Details for Specific Dataset Columns","what":"DVID Column","title":"rxode2 Event Types","text":"TODO","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-datasets.html","id":"evid-column","dir":"Articles","previous_headings":"Details for Specific Dataset Columns","what":"EVID Column","title":"rxode2 Event Types","text":"EVID column event identifier row data. observation records, 0. normal dosing records, 1. Many EVID values detailed rxode2 Event Types Classic rxode2 Events vignettes.","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-datasets.html","id":"id-column","dir":"Articles","previous_headings":"Details for Specific Dataset Columns","what":"ID Column","title":"rxode2 Event Types","text":"ID column subject identifier. column used separate one individual (usually single person animal) another. model, ID column used separate individuals. numerical integrator re-initializes new individual, new values random effects selected.","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-datasets.html","id":"rate-column","dir":"Articles","previous_headings":"Details for Specific Dataset Columns","what":"RATE Column","title":"rxode2 Event Types","text":"TODO","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-table.html","id":"creating-rxode2s-event-tables","dir":"Articles","previous_headings":"","what":"Creating rxode2’s event tables","title":"Easy rxode2 Event Tables","text":"event table rxode2 specialized data frame acts container rxode2’s events observation times. create rxode2 event table may use code eventTable(), et(), even create data frame right event information contained . closely related types events rxode2 supports. event table can add sampling/observations doses piping direct access. short table two main functions create dosing Sampling times can added add.sampling( sampling times ) et( sampling times ). Dosing intervals sampling windows also supported. models, can illustrate using model shared rxode2 tutorial:","code":"library(rxode2) #> rxode2 2.0.6 using 1 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` library(units) #> udunits database from /usr/share/xml/udunits/udunits2.xml (ev <- eventTable()) #> -- EventTable with 0 records -- #> 0 dosing records (see x$get.dosing(); add with add.dosing or et) #> 0 observation times (see x$get.sampling(); add with add.sampling or et) (ev <- et()) #> -- EventTable with 0 records -- #> 0 dosing records (see x$get.dosing(); add with add.dosing or et) #> 0 observation times (see x$get.sampling(); add with add.sampling or et) ## Model from rxode2 tutorial m1 <-rxode2({     KA=2.94E-01;     CL=1.86E+01;     V2=4.02E+01;     Q=1.05E+01;     V3=2.97E+02;     Kin=1;     Kout=1;     EC50=200;     ## Added modeled bioavaiblity, duration and rate     fdepot = 1;     durDepot = 8;     rateDepot = 1250;     C2 = centr/V2;     C3 = peri/V3;     d/dt(depot) =-KA*depot;     f(depot) = fdepot     dur(depot) = durDepot     rate(depot) = rateDepot     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;     d/dt(peri)  =                    Q*C2 - Q*C3;     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff;     eff(0) = 1 })"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-table.html","id":"adding-doses-to-the-event-table","dir":"Articles","previous_headings":"Creating rxode2’s event tables","what":"Adding doses to the event table","title":"Easy rxode2 Event Tables","text":"created can add dosing event table add.dosing(), et() functions. Using add.dosing() function : Notice units specified table. specified, units use units package keep track units convert needed. Additionally, ggforce uses label ggplot axes. set_units drop_units useful set drop rxode2 event table units. example, can see time axes labeled:  familiar NONMEM/rxode2 event records, can also specify dosing using et dose elements directly: gives:  shows easy creating event tables can .","code":"ev <- eventTable(amount.units=\"mg\", time.units=\"hr\")  ## The methods ar attached to the event table, so you can use  ## them directly ev$add.dosing(dose=10000, nbr.doses = 3)# loading doses ## Starts at time 0; Default dosing interval is 24  ## You can also pipe the event tables to these methods. ev <- ev %>%   add.dosing(dose=5000, nbr.doses=14,              dosing.interval=12)# maintenance  ev #> -- EventTable with 2 records -- #> 2 dosing records (see x$get.dosing(); add with add.dosing or et) #> 0 observation times (see x$get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with x$expand(); or etExpand(x) #> -- First part of x: -- #> # A tibble: 2 x 5 #>   time   amt  ii  addl evid         #>    [h]  [mg] [h] <int> <evid>       #> 1    0 10000  24     2 1:Dose (Add) #> 2    0  5000  12    13 1:Dose (Add) rxSolve(m1, ev) %>% plot(C2) ev <- et(timeUnits=\"hr\") %>%   et(amt=10000, until = set_units(3, days),      ii=12) # loading doses  ev #> -- EventTable with 1 records -- #> 1 dosing records (see x$get.dosing(); add with add.dosing or et) #> 0 observation times (see x$get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with x$expand(); or etExpand(x) #> -- First part of x: -- #> # A tibble: 1 x 5 #>   time   amt  ii  addl evid         #>    [h] <dbl> [h] <int> <evid>       #> 1    0 10000  12     6 1:Dose (Add) rxSolve(m1, ev) %>% plot(C2)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-table.html","id":"adding-sampling-to-an-event-table","dir":"Articles","previous_headings":"Creating rxode2’s event tables","what":"Adding sampling to an event table","title":"Easy rxode2 Event Tables","text":"notice examples, rxode2 generated default sampling times since sampling times. wish control sampling time, add samples rxode2 event table add.sampling et gives:  use et can simply add similar way add.sampling: gives following rxode2 solve:  Note jagged nature plots since sample times.","code":"ev <- eventTable(amount.units=\"mg\", time.units=\"hr\")  ## The methods ar attached to the event table, so you can use them ## directly ev$add.dosing(dose=10000, nbr.doses = 3)# loading doses  ev$add.sampling(seq(0,24,by=4))  ev #> -- EventTable with 8 records -- #> 1 dosing records (see x$get.dosing(); add with add.dosing or et) #> 7 observation times (see x$get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with x$expand(); or etExpand(x) #> -- First part of x: -- #> # A tibble: 8 x 5 #>   time   amt  ii  addl evid          #>    [h]  [mg] [h] <int> <evid>        #> 1    0    NA  NA    NA 0:Observation #> 2    0 10000  24     2 1:Dose (Add)  #> 3    4    NA  NA    NA 0:Observation #> 4    8    NA  NA    NA 0:Observation #> 5   12    NA  NA    NA 0:Observation #> 6   16    NA  NA    NA 0:Observation #> 7   20    NA  NA    NA 0:Observation #> 8   24    NA  NA    NA 0:Observation solve(m1, ev) %>% plot(C2) ev <- et(timeUnits=\"hr\") %>%   et(amt=10000, until = set_units(3, days),      ii=12) %>% # loading doses   et(seq(0,24,by=4))  ev #> -- EventTable with 8 records -- #> 1 dosing records (see x$get.dosing(); add with add.dosing or et) #> 7 observation times (see x$get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with x$expand(); or etExpand(x) #> -- First part of x: -- #> # A tibble: 8 x 5 #>   time   amt  ii  addl evid          #>    [h] <dbl> [h] <int> <evid>        #> 1    0    NA  NA    NA 0:Observation #> 2    0 10000  12     6 1:Dose (Add)  #> 3    4    NA  NA    NA 0:Observation #> 4    8    NA  NA    NA 0:Observation #> 5   12    NA  NA    NA 0:Observation #> 6   16    NA  NA    NA 0:Observation #> 7   20    NA  NA    NA 0:Observation #> 8   24    NA  NA    NA 0:Observation solve(m1, ev) %>% plot(C2)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-table.html","id":"expand-the-event-table-to-a-multi-subject-event-table-","dir":"Articles","previous_headings":"Creating rxode2’s event tables","what":"Expand the event table to a multi-subject event table.","title":"Easy rxode2 Event Tables","text":"thing needed expand event table list IDs want expand; can see following simulation 4 individuals solved :","code":"ev <- et(timeUnits=\"hr\") %>%   et(amt=10000, until = set_units(3, days),      ii=12) %>% # loading doses   et(seq(0,48,length.out=200)) %>%   et(id=1:4)  ev #> -- EventTable with 804 records -- #> 4 dosing records (see x$get.dosing(); add with add.dosing or et) #> 800 observation times (see x$get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with x$expand(); or etExpand(x) #> -- First part of x: -- #> # A tibble: 804 x 6 #>       id  time   amt  ii  addl evid          #>    <int>   [h] <dbl> [h] <int> <evid>        #>  1     1 0        NA  NA    NA 0:Observation #>  2     1 0     10000  12     6 1:Dose (Add)  #>  3     1 0.241    NA  NA    NA 0:Observation #>  4     1 0.482    NA  NA    NA 0:Observation #>  5     1 0.724    NA  NA    NA 0:Observation #>  6     1 0.965    NA  NA    NA 0:Observation #>  7     1 1.21     NA  NA    NA 0:Observation #>  8     1 1.45     NA  NA    NA 0:Observation #>  9     1 1.69     NA  NA    NA 0:Observation #> 10     1 1.93     NA  NA    NA 0:Observation #> # ... with 794 more rows set.seed(42) rxSetSeed(42) solve(m1, ev,       params=data.frame(KA=0.294*exp(rnorm(4)),                         18.6*exp(rnorm(4)))) %>%     plot(C2)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-table.html","id":"add-doses-and-samples-within-a-sampling-window","dir":"Articles","previous_headings":"Creating rxode2’s event tables","what":"Add doses and samples within a sampling window","title":"Easy rxode2 Event Tables","text":"addition adding fixed doses fixed sampling times, can windows sample draw doses . dosing windows specify time ordered numerical vector lowest dosing time highest dosing time inside list. example, start dosing time 6 hour dosing window: can clearly see different dosing times following simulation:  course reality dosing interval may 2 hours:  sort thing can specified sampling times. specify sampling times terms sampling window, can create list sampling times. sampling time two element ordered numeric vector.  shows flexibility dosing sampling rxode2 event tables allow.","code":"set.seed(42) rxSetSeed(42) ev <- et(timeUnits=\"hr\") %>%   et(time=list(c(0,6)), amt=10000, until = set_units(2, days),      ii=12) %>% # loading doses   et(id=1:4)  ev #> -- EventTable with 16 records -- #> 16 dosing records (see x$get.dosing(); add with add.dosing or et) #> 0 observation times (see x$get.sampling(); add with add.sampling or et) #> -- First part of x: -- #> # A tibble: 16 x 6 #>       id low   time high   amt evid         #>    <int> [h]    [h]  [h] <dbl> <evid>       #>  1     1   0  5.49     6 10000 1:Dose (Add) #>  2     1  12 17.0     18 10000 1:Dose (Add) #>  3     1  24 25.7     30 10000 1:Dose (Add) #>  4     1  36 41.6     42 10000 1:Dose (Add) #>  5     2   0  4.31     6 10000 1:Dose (Add) #>  6     2  12 14.7     18 10000 1:Dose (Add) #>  7     2  24 28.2     30 10000 1:Dose (Add) #>  8     2  36 39.9     42 10000 1:Dose (Add) #>  9     3   0  0.808    6 10000 1:Dose (Add) #> 10     3  12 16.4     18 10000 1:Dose (Add) #> 11     3  24 27.1     30 10000 1:Dose (Add) #> 12     3  36 39.9     42 10000 1:Dose (Add) #> 13     4   0  4.98     6 10000 1:Dose (Add) #> 14     4  12 13.7     18 10000 1:Dose (Add) #> 15     4  24 29.6     30 10000 1:Dose (Add) #> 16     4  36 41.5     42 10000 1:Dose (Add) ev <- ev %>% et(seq(0,48,length.out=200))  solve(m1, ev,       params=data.frame(KA=0.294*exp(rnorm(4)),                         18.6*exp(rnorm(4)))) %>%   plot(C2) set.seed(42) rxSetSeed(42) ev <- et(timeUnits=\"hr\") %>%   et(time=list(c(0,2)), amt=10000, until = set_units(2, days),      ii=12) %>% # loading doses   et(id=1:4) %>%   et(seq(0,48,length.out=200))  solve(m1, ev,       params=data.frame(KA=0.294*exp(rnorm(4)),                         18.6*exp(rnorm(4)))) %>%   plot(C2) rxSetSeed(42) set.seed(42) ev <- et(timeUnits=\"hr\") %>%   et(time=list(c(0,2)), amt=10000, until = set_units(2, days),      ii=12) %>% # loading doses   et(id=1:4)  ## Create 20 samples in the first 24 hours and 20 samples in the ## second 24 hours samples <- c(lapply(1:20, function(...){c(0,24)}),              lapply(1:20, function(...){c(20,48)}))  ## Add the random collection to the event table ev <- ev %>% et(samples)  library(ggplot2) solve(m1, ev, params=data.frame(KA=0.294*exp(rnorm(4)),                                 18.6*exp(rnorm(4)))) %>%   plot(C2) + geom_point()"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-table.html","id":"combining-event-tables","dir":"Articles","previous_headings":"Creating rxode2’s event tables","what":"Combining event tables","title":"Easy rxode2 Event Tables","text":"Since can create dosing records sampling records, can create complex dosing regimen wish. addition, rxode2 allows combine event tables c, seq, rep, rbind.","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-table.html","id":"sequencing-event-tables","dir":"Articles","previous_headings":"Creating rxode2’s event tables","what":"Sequencing event tables","title":"Easy rxode2 Event Tables","text":"One way combine event table sequence c, seq etSeq. takes two dosing groups adds least one inter-dose interval :  sequencing events, can also separate sequence period time; example wanted separate week, easily following sequence event tables:  Note example time bid qd event tables exactly one week, 1 week plus 24 hours inter-dose interval. want behavior, can sequence using wait=\"+ii\".  Also note, rxode2 assumes dosing want space event tables , clears sampling records combine event tables. true, can also use option samples=\"use\"","code":"## bid for 5 days bid <- et(timeUnits=\"hr\") %>%        et(amt=10000,ii=12,until=set_units(5, \"days\"))  ## qd for 5 days qd <- et(timeUnits=\"hr\") %>%       et(amt=20000,ii=24,until=set_units(5, \"days\"))  ## bid for 5 days followed by qd for 5 days et <- seq(bid,qd) %>% et(seq(0,11*24,length.out=100));  rxSolve(m1, et) %>% plot(C2) ## bid for 5 days followed by qd for 5 days et <- seq(bid,set_units(1, \"week\"), qd) %>%     et(seq(0,18*24,length.out=100));  rxSolve(m1, et) %>% plot(C2) ## bid for 5 days followed by qd for 5 days et <- seq(bid,set_units(1, \"week\"), qd,wait=\"+ii\") %>%     et(seq(0,18*24,length.out=100));  rxSolve(m1, et) %>% plot(C2)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-table.html","id":"repeating-event-tables","dir":"Articles","previous_headings":"Creating rxode2’s event tables","what":"Repeating event tables","title":"Easy rxode2 Event Tables","text":"can event table can repeat etRep rep. example 4 rounds 2 weeks QD therapy 1 week therapy can simply specified:  simplified way use sequence event tables. Therefore, many options still apply; samples cleared unless use samples=\"use\", time event tables least inter-dose interval. can adjust timing wait option.","code":"qd <-et(timeUnits = \"hr\") %>%   et(amt=10000, ii=24, until=set_units(2, \"weeks\"), cmt=\"depot\")  et <- rep(qd, times=4, wait=set_units(1,\"weeks\")) %>%       add.sampling(set_units(seq(0, 12.5,by=0.005),weeks))  rxSolve(m1, et)  %>% plot(C2)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-table.html","id":"combining-event-tables-with-rbind","dir":"Articles","previous_headings":"Creating rxode2’s event tables","what":"Combining event tables with rbind","title":"Easy rxode2 Event Tables","text":"may combine event tables rbind. consider event times combining event tables, keeps times. space event tables waiting period, also consider inter-dose interval. Using previous seq can clearly see difference. sequence:  bind together rbind  Still waiting period applies (consider inter-dose interval)  can also bind tables together make ID event table unique; can good combine cohorts different expected dosing sampling times. requires id=\"unique\" option; Using first example shows different case:","code":"## bid for 5 days bid <- et(timeUnits=\"hr\") %>%        et(amt=10000,ii=12,until=set_units(5, \"days\"))  ## qd for 5 days qd <- et(timeUnits=\"hr\") %>%       et(amt=20000,ii=24,until=set_units(5, \"days\"))  et <- seq(bid,qd) %>%     et(seq(0,18*24,length.out=500));  rxSolve(m1, et) %>% plot(C2) ## bid for 5 days et <- rbind(bid,qd) %>%     et(seq(0,18*24,length.out=500));  rxSolve(m1, et) %>% plot(C2) et <- rbind(bid,wait=set_units(10,days),qd) %>%     et(seq(0,18*24,length.out=500));  rxSolve(m1, et) %>% plot(C2) ## bid for 5 days et <- etRbind(bid,qd, id=\"unique\") %>%     et(seq(0,150,length.out=500));  library(ggplot2) rxSolve(m1, et) %>% plot(C2) + facet_wrap( ~ id)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-table.html","id":"expanding-events","dir":"Articles","previous_headings":"Creating rxode2’s event tables","what":"Expanding events","title":"Easy rxode2 Event Tables","text":"Event tables can expanded contain addl data item, like following example: can expand events addl items $expand() etExpand(ev): first, etExpand(ev) expands event table without modifying original data frame: can see addl events expanded, however original data frame remained intact: use ev$expand() modify ev object. similar object-oriented method:","code":"ev <- et() %>%   et(dose=50, ii=8, until=48)  ev #> -- EventTable with 1 records -- #> 1 dosing records (see x$get.dosing(); add with add.dosing or et) #> 0 observation times (see x$get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with x$expand(); or etExpand(x) #> -- First part of x: -- #> # A tibble: 1 x 5 #>    time   amt    ii  addl evid         #>   <dbl> <dbl> <dbl> <int> <evid>       #> 1     0    50     8     6 1:Dose (Add) etExpand(ev) #> -- EventTable with 7 records -- #> 7 dosing records (see x$get.dosing(); add with add.dosing or et) #> 0 observation times (see x$get.sampling(); add with add.sampling or et) #> -- First part of x: -- #> # A tibble: 7 x 4 #>    time   amt    ii evid         #>   <dbl> <dbl> <dbl> <evid>       #> 1     0    50     0 1:Dose (Add) #> 2     8    50     0 1:Dose (Add) #> 3    16    50     0 1:Dose (Add) #> 4    24    50     0 1:Dose (Add) #> 5    32    50     0 1:Dose (Add) #> 6    40    50     0 1:Dose (Add) #> 7    48    50     0 1:Dose (Add) print(ev) #> -- EventTable with 1 records -- #> 1 dosing records (see $get.dosing(); add with add.dosing or et) #> 0 observation times (see $get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with $expand(); or etExpand() #> -- First part of : -- #> # A tibble: 1 x 5 #>    time   amt    ii  addl evid         #>   <dbl> <dbl> <dbl> <int> <evid>       #> 1     0    50     8     6 1:Dose (Add) ev$expand() ev #> -- EventTable with 7 records -- #> 7 dosing records (see x$get.dosing(); add with add.dosing or et) #> 0 observation times (see x$get.sampling(); add with add.sampling or et) #> -- First part of x: -- #> # A tibble: 7 x 4 #>    time   amt    ii evid         #>   <dbl> <dbl> <dbl> <evid>       #> 1     0    50     0 1:Dose (Add) #> 2     8    50     0 1:Dose (Add) #> 3    16    50     0 1:Dose (Add) #> 4    24    50     0 1:Dose (Add) #> 5    32    50     0 1:Dose (Add) #> 6    40    50     0 1:Dose (Add) #> 7    48    50     0 1:Dose (Add)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-table.html","id":"event-tables-in-rstudio-notebooks","dir":"Articles","previous_headings":"Creating rxode2’s event tables","what":"Event tables in Rstudio Notebooks","title":"Easy rxode2 Event Tables","text":"addition output console shown examples, Rstudio notebook output different can seen following screenshots; first screenshot shows event table looks evaluating Rstduio notebook  simple dataframe allows page contents. click first box Rstudio notebook output, notes event table:","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-types.html","id":"rxode2-event-tables","dir":"Articles","previous_headings":"","what":"rxode2 event tables","title":"rxode2 Event Types","text":"general, rxode2 event tables follow NONMEM dataset convention exceptions: may turn compartment negative compartment number “-cmt” cmt compartment name. compartment data item (cmt) can still number, number compartment defined appearance compartment name model. can tedious count, can specify compartment numbers easier using cmt(cmtName) beginning model. Bioavailability changes change rate infusion since dur/amt fixed input data. Similarly, specifying rate/amt infusion, bioavailability change infusion duration since rate/amt fixed input data. infrequent NONMEM columns supported: pcmt, call. evid=5 replace event; replaces value compartment value specified amt column. equivalent deSolve=replace. evid=6 multiply event; multiplies value compartment value specified amt column. equivalent deSolve=multiply. evid=7 transit compartment model/phantom event. puts dose dose() function calculates time since last dose tad() doesn’t actually put dose compartment. allows transit() function easily apply compartment. legal entries data table: notes: evid can classic RxODE (described ) NONMEM-style evid described . NONMEM’s DV required; rxode2 ODE solving framework. NONMEM’s MDV required, since captured EVID. Instead NONMEM-compatible data, can accept deSolve compatible data-frames. returning rxode2 solved data-set additional event ids (EVID) may see depending solving options: EVID = -1 modeled rate ends (corresponds rate = -1) EVID = -2 modeled duration ends (corresponds rate=-2) EVID = -10 rate specified zero-order infusion ends (corresponds rate > 0) EVID = -20 duration specified zero-order infusion ends (corresponds dur > 0) EVID = 101, 102, 103,... correspond 1, 2, 3, … modeled time (mtime). can accessed solving option combination addDosing=TRUE subsetNonmem=FALSE. want see classic EVID equivalents can use addDosing=NA. illustrate event types use model original rxode2 tutorial.","code":"library(rxode2) #> rxode2 2.0.6 using 1 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` ## Model from rxode2 tutorial m1 <- rxode({     KA=2.94E-01;     CL=1.86E+01;     V2=4.02E+01;     Q=1.05E+01;     V3=2.97E+02;     Kin=1;     Kout=1;     EC50=200;     ## Added modeled bioavaiblity, duration and rate     fdepot = 1;     durDepot = 8;     rateDepot = 1250;     C2 = centr/V2;     C3 = peri/V3;     d/dt(depot) =-KA*depot;     f(depot) = fdepot     dur(depot) = durDepot     rate(depot) = rateDepot     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;     d/dt(peri)  =                    Q*C2 - Q*C3;     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff;     eff(0) = 1 });"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-types.html","id":"bolusadditive-doses","dir":"Articles","previous_headings":"","what":"Bolus/Additive Doses","title":"rxode2 Event Types","text":"bolus dose default type dose rxode2 requires amt/dose. Note uses convenience function et() described rxode2 event tables","code":"ev <- et(timeUnits=\"hr\") %>%     et(amt=10000, ii=12,until=24) %>%     et(seq(0, 24, length.out=100))  ev #> -- EventTable with 101 records -- #> 1 dosing records (see x$get.dosing(); add with add.dosing or et) #> 100 observation times (see x$get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with x$expand(); or etExpand(x) #> -- First part of x: -- #> # A tibble: 101 x 5 #>     time   amt  ii  addl evid          #>      [h] <dbl> [h] <int> <evid>        #>  1 0        NA  NA    NA 0:Observation #>  2 0     10000  12     2 1:Dose (Add)  #>  3 0.242    NA  NA    NA 0:Observation #>  4 0.485    NA  NA    NA 0:Observation #>  5 0.727    NA  NA    NA 0:Observation #>  6 0.970    NA  NA    NA 0:Observation #>  7 1.21     NA  NA    NA 0:Observation #>  8 1.45     NA  NA    NA 0:Observation #>  9 1.70     NA  NA    NA 0:Observation #> 10 1.94     NA  NA    NA 0:Observation #> # ... with 91 more rows rxSolve(m1, ev) %>% plot(C2) +     xlab(\"Time\")"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-types.html","id":"infusion-doses","dir":"Articles","previous_headings":"","what":"Infusion Doses","title":"rxode2 Event Types","text":"different type infusions rxode2 supports: Constant Rate Infusion (rate) Constant Duration Infusion (dur) Estimated Rate Infusion Estimated Duration Infusion","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-types.html","id":"constant-infusion-in-terms-of-duration-and-rate","dir":"Articles","previous_headings":"Infusion Doses","what":"Constant Infusion (in terms of duration and rate)","title":"rxode2 Event Types","text":"next type event infusion; two ways specify infusion; first dur keyword. example :  can also specified rate component:  exception bioavailability changes infusion. case modeling rate, bioavailability decrease, decreases infusion duration, NONMEM. example:  Similarly increasing bioavailability increases infusion duration.  rationale behavior rate amt specified event table, thing can change bioavailability increase duration infusion. specify amt dur components event table, bioavailability changes affect rate infusion. can see side--side comparison bioavailability changes affecting rate instead duration records following plots:","code":"ev <- et(timeUnits=\"hr\") %>%     et(amt=10000, ii=12,until=24, dur=8) %>%     et(seq(0, 24, length.out=100))  ev #> -- EventTable with 101 records -- #> 1 dosing records (see x$get.dosing(); add with add.dosing or et) #> 100 observation times (see x$get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with x$expand(); or etExpand(x) #> -- First part of x: -- #> # A tibble: 101 x 6 #>     time   amt  ii  addl evid          dur #>      [h] <dbl> [h] <int> <evid>        [h] #>  1 0        NA  NA    NA 0:Observation  NA #>  2 0     10000  12     2 1:Dose (Add)    8 #>  3 0.242    NA  NA    NA 0:Observation  NA #>  4 0.485    NA  NA    NA 0:Observation  NA #>  5 0.727    NA  NA    NA 0:Observation  NA #>  6 0.970    NA  NA    NA 0:Observation  NA #>  7 1.21     NA  NA    NA 0:Observation  NA #>  8 1.45     NA  NA    NA 0:Observation  NA #>  9 1.70     NA  NA    NA 0:Observation  NA #> 10 1.94     NA  NA    NA 0:Observation  NA #> # ... with 91 more rows rxSolve(m1, ev) %>% plot(depot, C2) +     xlab(\"Time\") ev <- et(timeUnits=\"hr\") %>%     et(amt=10000, ii=12,until=24, rate=10000/8) %>%     et(seq(0, 24, length.out=100))  ev #> -- EventTable with 101 records -- #> 1 dosing records (see x$get.dosing(); add with add.dosing or et) #> 100 observation times (see x$get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with x$expand(); or etExpand(x) #> -- First part of x: -- #> # A tibble: 101 x 6 #>     time   amt rate        ii  addl evid          #>      [h] <dbl> <rate/dur> [h] <int> <evid>        #>  1 0        NA NA          NA    NA 0:Observation #>  2 0     10000  1250       12     2 1:Dose (Add)  #>  3 0.242    NA NA          NA    NA 0:Observation #>  4 0.485    NA NA          NA    NA 0:Observation #>  5 0.727    NA NA          NA    NA 0:Observation #>  6 0.970    NA NA          NA    NA 0:Observation #>  7 1.21     NA NA          NA    NA 0:Observation #>  8 1.45     NA NA          NA    NA 0:Observation #>  9 1.70     NA NA          NA    NA 0:Observation #> 10 1.94     NA NA          NA    NA 0:Observation #> # ... with 91 more rows rxSolve(m1, ev) %>% plot(depot, C2) +     xlab(\"Time\") rxSolve(m1, ev, c(fdepot=0.25)) %>% plot(depot, C2) +     xlab(\"Time\") rxSolve(m1, ev, c(fdepot=1.25)) %>% plot(depot, C2) +     xlab(\"Time\") ev <- et(timeUnits=\"hr\") %>%     et(amt=10000, ii=12,until=24, dur=8) %>%     et(seq(0, 24, length.out=100)) library(ggplot2) library(patchwork)  p1 <- rxSolve(m1, ev, c(fdepot=1.25)) %>% plot(depot) +     xlab(\"Time\") + ylim(0,5000)  p2 <- rxSolve(m1, ev, c(fdepot=0.25)) %>% plot(depot) +     xlab(\"Time\")+ ylim(0,5000)  ## Use patchwork syntax to combine plots p1 * p2"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-types.html","id":"modeled-rate-and-duration-of-infusion","dir":"Articles","previous_headings":"Infusion Doses","what":"Modeled Rate and Duration of Infusion","title":"rxode2 Event Types","text":"can model duration, equivalent NONMEM’s rate=-2.  Similarly, may also model rate. equivalent NONMEM’s rate=-1 rxode2’s event table specifies data item well.","code":"ev <- et(timeUnits=\"hr\") %>%     et(amt=10000, ii=12,until=24, rate=-2) %>%     et(seq(0, 24, length.out=100))  ev #> -- EventTable with 101 records -- #> 1 dosing records (see x$get.dosing(); add with add.dosing or et) #> 100 observation times (see x$get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with x$expand(); or etExpand(x) #> -- First part of x: -- #> # A tibble: 101 x 6 #>     time   amt rate        ii  addl evid          #>      [h] <dbl> <rate/dur> [h] <int> <evid>        #>  1 0        NA NA          NA    NA 0:Observation #>  2 0     10000 -2:dur      12     2 1:Dose (Add)  #>  3 0.242    NA NA          NA    NA 0:Observation #>  4 0.485    NA NA          NA    NA 0:Observation #>  5 0.727    NA NA          NA    NA 0:Observation #>  6 0.970    NA NA          NA    NA 0:Observation #>  7 1.21     NA NA          NA    NA 0:Observation #>  8 1.45     NA NA          NA    NA 0:Observation #>  9 1.70     NA NA          NA    NA 0:Observation #> 10 1.94     NA NA          NA    NA 0:Observation #> # ... with 91 more rows rxSolve(m1, ev, c(durDepot=7)) %>% plot(depot, C2) +     xlab(\"Time\") ev <- et(timeUnits=\"hr\") %>%     et(amt=10000, ii=12,until=24, rate=-1) %>%     et(seq(0, 24, length.out=100))  ev #> -- EventTable with 101 records -- #> 1 dosing records (see x$get.dosing(); add with add.dosing or et) #> 100 observation times (see x$get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with x$expand(); or etExpand(x) #> -- First part of x: -- #> # A tibble: 101 x 6 #>     time   amt rate        ii  addl evid          #>      [h] <dbl> <rate/dur> [h] <int> <evid>        #>  1 0        NA NA          NA    NA 0:Observation #>  2 0     10000 -1:rate     12     2 1:Dose (Add)  #>  3 0.242    NA NA          NA    NA 0:Observation #>  4 0.485    NA NA          NA    NA 0:Observation #>  5 0.727    NA NA          NA    NA 0:Observation #>  6 0.970    NA NA          NA    NA 0:Observation #>  7 1.21     NA NA          NA    NA 0:Observation #>  8 1.45     NA NA          NA    NA 0:Observation #>  9 1.70     NA NA          NA    NA 0:Observation #> 10 1.94     NA NA          NA    NA 0:Observation #> # ... with 91 more rows rxSolve(m1, ev, c(rateDepot=10000/3)) %>% plot(depot, C2) +     xlab(\"Time\")"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-types.html","id":"steady-state","dir":"Articles","previous_headings":"","what":"Steady State","title":"rxode2 Event Types","text":"doses solved steady state reached constant inter-dose interval.","code":"ev <- et(timeUnits=\"hr\") %>%     et(amt=10000, ii=12, ss=1) %>%     et(seq(0, 24, length.out=100))  ev #> -- EventTable with 101 records -- #> 1 dosing records (see x$get.dosing(); add with add.dosing or et) #> 100 observation times (see x$get.sampling(); add with add.sampling or et) #> -- First part of x: -- #> # A tibble: 101 x 5 #>     time   amt  ii evid             ss #>      [h] <dbl> [h] <evid>        <int> #>  1 0        NA  NA 0:Observation    NA #>  2 0     10000  12 1:Dose (Add)      1 #>  3 0.242    NA  NA 0:Observation    NA #>  4 0.485    NA  NA 0:Observation    NA #>  5 0.727    NA  NA 0:Observation    NA #>  6 0.970    NA  NA 0:Observation    NA #>  7 1.21     NA  NA 0:Observation    NA #>  8 1.45     NA  NA 0:Observation    NA #>  9 1.70     NA  NA 0:Observation    NA #> 10 1.94     NA  NA 0:Observation    NA #> # ... with 91 more rows rxSolve(m1, ev) %>% plot(C2)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-types.html","id":"steady-state-for-complex-dosing","dir":"Articles","previous_headings":"Steady State","what":"Steady state for complex dosing","title":"rxode2 Event Types","text":"using ss=2 flag, can use super-positioning principle linear kinetics get steady state nonstandard dosing (.e. morning 100 mg vs evening 150 mg). done : Saving state values Resetting states solving system steady state Adding back prior state values  can see takes full dose cycle reach true complex steady state dosing.","code":"ev <- et(timeUnits=\"hr\") %>%     et(amt=10000, ii=24, ss=1) %>%     et(time=12, amt=15000, ii=24, ss=2) %>%     et(time=24, amt=10000, ii=24, addl=3) %>%     et(time=36, amt=15000, ii=24, addl=3) %>%     et(seq(0, 64, length.out=500))  library(ggplot2)  rxSolve(m1, ev,maxsteps=10000) %>% plot(C2) +   annotate(\"rect\", xmin=0, xmax=24, ymin=-Inf, ymax=Inf,            alpha=0.2) +   annotate(\"text\", x=12.5, y=7,            label=\"Initial Steady State Period\") +   annotate(\"text\", x=44,   y=7,            label=\"Steady State AM/PM dosing\")"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-types.html","id":"steady-state-for-constant-infusion-or-zero-order-processes","dir":"Articles","previous_headings":"Steady State","what":"Steady state for constant infusion or zero order processes","title":"rxode2 Event Types","text":"last type steady state rxode2 supports steady-state constant infusion rate. can specified way NONMEM, : inter-dose interval ii=0 steady state dose, ie ss=1 Either positive rate (rate>0) estimated rate rate=-1. zero dose, ie amt=0 steady-state constant infusion achieved, infusion turned using record, just like NONMEM. Note rate=-2 model duration infusion doesn’t make much sense since solving infusion steady state. duration specified steady state solution. Also note bioavailability changes steady state infusion also make sense neither change rate duration steady state infusion. Hence modeled bioavailability type dosing event ignored. example:  can used PK, can used steady-state disease processes.","code":"ev <- et(timeUnits=\"hr\") %>%     et(amt=0, ss=1,rate=10000/8)  p1 <- rxSolve(m1, ev) %>% plot(C2, eff)   ev <- et(timeUnits=\"hr\") %>%     et(amt=200000, rate=10000/8) %>%     et(0, 250, length.out=1000)  p2 <- rxSolve(m1, ev) %>% plot(C2, eff)  library(patchwork)  p1 / p2"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-types.html","id":"reset-events","dir":"Articles","previous_headings":"","what":"Reset Events","title":"rxode2 Event Types","text":"Reset events implemented evid=3 evid=reset, reset evid=4 reset dose. solving show happens system system reset 6 hours post-dose.  can see compartments reset initial values. next dose start dosing cycle . case, whole system reset dose given","code":"ev <- et(timeUnits=\"hr\") %>%     et(amt=10000, ii=12, addl=3) %>%     et(time=6, evid=reset) %>%     et(seq(0, 24, length.out=100))  ev #> -- EventTable with 102 records -- #> 2 dosing records (see x$get.dosing(); add with add.dosing or et) #> 100 observation times (see x$get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with x$expand(); or etExpand(x) #> -- First part of x: -- #> # A tibble: 102 x 5 #>     time   amt  ii  addl evid          #>      [h] <dbl> [h] <int> <evid>        #>  1 0        NA  NA    NA 0:Observation #>  2 0     10000  12     3 1:Dose (Add)  #>  3 0.242    NA  NA    NA 0:Observation #>  4 0.485    NA  NA    NA 0:Observation #>  5 0.727    NA  NA    NA 0:Observation #>  6 0.970    NA  NA    NA 0:Observation #>  7 1.21     NA  NA    NA 0:Observation #>  8 1.45     NA  NA    NA 0:Observation #>  9 1.70     NA  NA    NA 0:Observation #> 10 1.94     NA  NA    NA 0:Observation #> # ... with 92 more rows rxSolve(m1, ev) %>% plot(depot,C2, eff) ev <- et(timeUnits=\"hr\") %>%     et(amt=10000, ii=12, addl=3) %>%     et(time=6, amt=10000, evid=4) %>%     et(seq(0, 24, length.out=100))  ev #> -- EventTable with 102 records -- #> 2 dosing records (see x$get.dosing(); add with add.dosing or et) #> 100 observation times (see x$get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with x$expand(); or etExpand(x) #> -- First part of x: -- #> # A tibble: 102 x 5 #>     time   amt  ii  addl evid          #>      [h] <dbl> [h] <int> <evid>        #>  1 0        NA  NA    NA 0:Observation #>  2 0     10000  12     3 1:Dose (Add)  #>  3 0.242    NA  NA    NA 0:Observation #>  4 0.485    NA  NA    NA 0:Observation #>  5 0.727    NA  NA    NA 0:Observation #>  6 0.970    NA  NA    NA 0:Observation #>  7 1.21     NA  NA    NA 0:Observation #>  8 1.45     NA  NA    NA 0:Observation #>  9 1.70     NA  NA    NA 0:Observation #> 10 1.94     NA  NA    NA 0:Observation #> # ... with 92 more rows rxSolve(m1, ev) %>% plot(depot,C2, eff)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-event-types.html","id":"turning-off-compartments","dir":"Articles","previous_headings":"","what":"Turning off compartments","title":"rxode2 Event Types","text":"may also turn compartment, similar reset event. Solving shows system:  case, depot turned , depot compartment concentrations set initial values compartment concentrations/levels reset. another dose depot administered depot compartment turned back . Note dose compartment turns back compartment dosed. Hence turn effect compartment, continues another dose depot.  turn back compartment, zero-dose compartment evid=2 compartment needed.","code":"ev <- et(timeUnits=\"hr\") %>%     et(amt=10000, ii=12, addl=3) %>%     et(time=6, cmt=\"-depot\", evid=2) %>%     et(seq(0, 24, length.out=100))  ev #> -- EventTable with 102 records -- #> 2 dosing records (see x$get.dosing(); add with add.dosing or et) #> 100 observation times (see x$get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with x$expand(); or etExpand(x) #> -- First part of x: -- #> # A tibble: 102 x 6 #>     time cmt         amt  ii  addl evid          #>      [h] <chr>     <dbl> [h] <int> <evid>        #>  1 0     (obs)        NA  NA    NA 0:Observation #>  2 0     (default) 10000  12     3 1:Dose (Add)  #>  3 0.242 (obs)        NA  NA    NA 0:Observation #>  4 0.485 (obs)        NA  NA    NA 0:Observation #>  5 0.727 (obs)        NA  NA    NA 0:Observation #>  6 0.970 (obs)        NA  NA    NA 0:Observation #>  7 1.21  (obs)        NA  NA    NA 0:Observation #>  8 1.45  (obs)        NA  NA    NA 0:Observation #>  9 1.70  (obs)        NA  NA    NA 0:Observation #> 10 1.94  (obs)        NA  NA    NA 0:Observation #> # ... with 92 more rows rxSolve(m1, ev) %>% plot(depot,C2, eff) ev <- et(timeUnits=\"hr\") %>%     et(amt=10000, ii=12, addl=3) %>%     et(time=6, cmt=\"-eff\", evid=2) %>%     et(seq(0, 24, length.out=100))  rxSolve(m1, ev) %>% plot(depot,C2, eff) ev <- et(timeUnits=\"hr\") %>%     et(amt=10000, ii=12, addl=3) %>%     et(time=6, cmt=\"-eff\", evid=2) %>%     et(time=12,cmt=\"eff\",evid=2) %>%     et(seq(0, 24, length.out=100))  rxSolve(m1, ev) %>% plot(depot,C2, eff)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-events-classic.html","id":"classic-rxode-evid-values","dir":"Articles","previous_headings":"","what":"Classic RxODE evid values","title":"Classic rxode2 Events","text":"Originally RxODE supported compound event IDs; rxode2 still supports parameters, often useful use normal NONMEM dataset standard used many modeling tools like NONMEM, Monolix nlmixr, described rxode2 types article. Classically, RxODE supported event coding single event id evid described following table. classic EVID concatenate numbers table, infusion compartment 1 10101 infusion compartment 199 119901. EVID = 0 (observations), EVID=2 (type event) EVID=3 supported. Internally EVID=9 non-observation event makes sure system initialized zero; EVID=9 manually set. EVID 10-99 represents modeled time interventions, similar NONMEM’s MTIME. along amount (amt) time columns specify events ODE system. infusions specified EVIDs > 100 amt column represents rate value. Infusion flags 1 2 +amt turn infusion specific compartment -amt turn infusion specific compartment. specify dose/duration place dosing records time duration starts stops. modeled rate/duration infusion flags infusion flag must followed infusion record. number concatenated together form full RxODE event ID, shown following examples:","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-events-classic.html","id":"bolus-dose-examples","dir":"Articles","previous_headings":"Classic RxODE evid values","what":"Bolus Dose Examples","title":"Classic rxode2 Events","text":"100 bolus dose compartment #1 time 0 100 bolus dose compartment #99 time 0 100 bolus dose compartment #199 time 0","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-events-classic.html","id":"infusion-event-examples","dir":"Articles","previous_headings":"Classic RxODE evid values","what":"Infusion Event Examples","title":"Classic rxode2 Events","text":"Bolus infusion rate 50 compartment 1 1.5 hr, (modeled bioavailability changes duration infusion) Bolus infusion rate 50 compartment 1 1.5 hr (modeled bioavailability changes rate infusion) Modeled rate amount 50 Modeled duration amount 50","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-events-classic.html","id":"steady-state-for-classic-rxode-evid-example","dir":"Articles","previous_headings":"Classic RxODE evid values","what":"Steady State for classic RxODE EVID example","title":"Classic rxode2 Events","text":"Steady state dose cmt 1 Steady State super-positioning principle 50 pm 100 dose","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-events-classic.html","id":"turning-off-a-compartment-with-classic-rxode-evid","dir":"Articles","previous_headings":"Classic RxODE evid values","what":"Turning off a compartment with classic RxODE EVID","title":"Classic rxode2 Events","text":"Turn first compartment time 12 Event coding rxode2 encoded single event number evid. compartments 100, coded : event 0 observation events. 100*(Compartment Number) + 1 dose captured amt 10000 + 100*(Compartment Number) + 1 infusion rate captured amt column infusion turned subtracting amt evid stop infusion. compartments greater equal 100, 100s place digits transferred 100,000th place digit. doses 99th compartment evid bolus dose 9901 evid infusion 19901. bolus dose 199th compartment evid bolus dose 109901. infusion dosing record 199th compartment 119901.","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-intro.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Introduction to rxode2","text":"rxode2 R package facilitates simulation ODE models R. designed pharmacometrics models mind, can applied generally ODE model.","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-intro.html","id":"description-of-rxode2-illustrated-through-an-example","dir":"Articles","previous_headings":"","what":"Description of rxode2 illustrated through an example","title":"Introduction to rxode2","text":"model equations can specified text string, model file R expression. differential algebraic equations permitted. Differential equations specified d/dt(var_name) =. equation can separated semicolon. load rxode2 package compile model:","code":"library(rxode2) #> rxode2 2.0.6 using 1 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()`  mod1 <- rxode2({   C2 <- centr/V2;   C3 <- peri/V3;   d/dt(depot) <- -KA*depot;   d/dt(centr) <- KA*depot - CL*C2 - Q*C2 + Q*C3;   d/dt(peri)  <- Q*C2 - Q*C3;   d/dt(eff)   <- Kin - Kout*(1-C2/(EC50+C2))*eff; })"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-intro.html","id":"specify-ode-parameters-and-initial-conditions","dir":"Articles","previous_headings":"Description of rxode2 illustrated through an example","what":"Specify ODE parameters and initial conditions","title":"Introduction to rxode2","text":"Model parameters can defined named vectors. Names parameters vector must superset parameters ODE model, order parameters within vector important. Initial conditions (ICs) can defined vector well. elements specified, initial condition compartment assumed zero. want specify initial conditions model can add:","code":"theta <-     c(KA=2.94E-01, CL=1.86E+01, V2=4.02E+01, # central       Q=1.05E+01,  V3=2.97E+02,              # peripheral      Kin=1, Kout=1, EC50=200)               # effects inits <- c(eff=1) eff(0) = 1"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-intro.html","id":"specify-dosing-and-sampling-in-rxode2","dir":"Articles","previous_headings":"Description of rxode2 illustrated through an example","what":"Specify Dosing and sampling in rxode2","title":"Introduction to rxode2","text":"rxode2 provides simple flexible way specify dosing sampling functions generate event table. First, empty event table generated “eventTable()” function: Next, use add.dosing() add.sampling() functions EventTable object specify dosing (amounts, frequency /times, etc.) observation times sample state system. functions can called multiple times specify complex dosing sampling regiments. , functions used specify 10mg BID dosing 5 days, followed 20mg QD dosing 5 days: wish can also mattigr pipe operator %>% functions get.dosing() get.sampling() can used retrieve information event table. may notice similar NONMEM event tables; familiar NONMEM data events use directly event table function et can see code, can dose compartment named rxode2 model. slight deviation NONMEM can reduce need compartment renumbering. events can also combined expanded (multi-subject events complex regimens) rbind, c, seq, rep. information creating complex dosing regimens using rxode2 see rxode2 events vignette.","code":"ev <- eventTable(amount.units='mg', time.units='hours') ev$add.dosing(dose=10000, nbr.doses=10, dosing.interval=12) ev$add.dosing(dose=20000, nbr.doses=5, start.time=120,               dosing.interval=24) ev$add.sampling(0:240) ev <- eventTable(amount.units=\"mg\", time.units=\"hours\") %>%   add.dosing(dose=10000, nbr.doses=10, dosing.interval=12) %>%   add.dosing(dose=20000, nbr.doses=5, start.time=120,              dosing.interval=24) %>%   add.sampling(0:240) head(ev$get.dosing()) #>   id low time high       cmt   amt rate ii addl evid ss dur #> 1  1  NA    0   NA (default) 10000    0 12    9    1  0   0 #> 2  1  NA  120   NA (default) 20000    0 24    4    1  0   0 head(ev$get.sampling()) #>   id low time high   cmt amt rate ii addl evid ss dur #> 1  1  NA    0   NA (obs)  NA   NA NA   NA    0 NA  NA #> 2  1  NA    1   NA (obs)  NA   NA NA   NA    0 NA  NA #> 3  1  NA    2   NA (obs)  NA   NA NA   NA    0 NA  NA #> 4  1  NA    3   NA (obs)  NA   NA NA   NA    0 NA  NA #> 5  1  NA    4   NA (obs)  NA   NA NA   NA    0 NA  NA #> 6  1  NA    5   NA (obs)  NA   NA NA   NA    0 NA  NA ev  <- et(amountUnits=\"mg\", timeUnits=\"hours\") %>%   et(amt=10000, addl=9,ii=12,cmt=\"depot\") %>%   et(time=120, amt=2000, addl=4, ii=14, cmt=\"depot\") %>%   et(0:240) # Add sampling"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-intro.html","id":"solving-odes","dir":"Articles","previous_headings":"Description of rxode2 illustrated through an example","what":"Solving ODEs","title":"Introduction to rxode2","text":"ODE can now solved calling model object’s run solve function. Simulation results variables model stored output matrix x. can also solve create rxode2 data frame: returns modified data frame. can see compartment values plot :  ,  Note labels automatically labeled units initial event table. rxode2 extracts units label plot (present).","code":"x <- mod1$solve(theta, ev, inits); knitr::kable(head(x)) x <- mod1 %>% rxSolve(theta, ev, inits); x #> ── Solved rxode2 object ── #> ── Parameters (x$params): ── #>      V2      V3      KA      CL       Q     Kin    Kout    EC50  #>  40.200 297.000   0.294  18.600  10.500   1.000   1.000 200.000  #> ── Initial Conditions (x$inits): ── #> depot centr  peri   eff  #>     0     0     0     1  #> ── First part of data (object): ── #> # A tibble: 241 × 7 #>   time    C2    C3  depot centr  peri   eff #>    [h] <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> #> 1    0   0   0     10000     0     0   1    #> 2    1  44.4 0.920  7453. 1784.  273.  1.08 #> 3    2  54.9 2.67   5554. 2206.  794.  1.18 #> 4    3  51.9 4.46   4140. 2087. 1324.  1.23 #> 5    4  44.5 5.98   3085. 1789. 1776.  1.23 #> 6    5  36.5 7.18   2299. 1467. 2132.  1.21 #> # … with 235 more rows library(ggplot2) plot(x,C2) + ylab(\"Central Concentration\") plot(x,eff)  + ylab(\"Effect\")"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-model-types.html","id":"prediction-only-models","dir":"Articles","previous_headings":"","what":"Prediction only models","title":"rxode2 additional model types","text":"Prediction models simple create. use rxode2 syntax without ODE systems . simple example one-compartment model. Solving rxode2 models saving simple ODE system, faster course.","code":"library(rxode2) ## rxode2 2.0.6 using 1 threads (see ?getRxThreads) ##   no cache: create with `rxCreateCache()` mod <- rxode2({     ipre <- 10 * exp(-ke * t); }) mod ## rxode2 2.0.6 model named rx_4a4e407455c31a268df170171332d9e1 model (ready).  ## x$params: ke ## x$lhs: ipre et  <- et(seq(0,24,length.out=50)) cmt1 <- rxSolve(mod,et,params=c(ke=0.5)) cmt1 ## -- Solved rxode2 object -- ## -- Parameters (x$params): -- ##  ke  ## 0.5  ## -- Initial Conditions (x$inits): -- ## named numeric(0) ## -- First part of data (object): -- ## # A tibble: 50 x 2 ##    time  ipre ##   <dbl> <dbl> ## 1 0     10    ## 2 0.490  7.83 ## 3 0.980  6.13 ## 4 1.47   4.80 ## 5 1.96   3.75 ## 6 2.45   2.94 ## # ... with 44 more rows"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-model-types.html","id":"solved-compartment-models","dir":"Articles","previous_headings":"","what":"Solved compartment models","title":"rxode2 additional model types","text":"Solved models also simple create. simply place linCmt() psuedo-function code. linCmt() function figures type model use based parameter names specified. often, pharmacometric models parameterized terms volume clearances. Clearances specified NONMEM-style names CL, Q, Q1, Q2, etc. distributional clearances CLD, CLD2. Volumes specified Central (VC V), Peripheral/Tissue (VP, VT). translations available, example translations : Another popular parameterization terms micro-constants. rxode2 assumes compartment 1 central compartment. elimination constant specified K, Ke Kel. example translations : last parameterization possible using alpha V //B/C. example translations : linCmt() sleuthing complete, 1, 2 3 compartment model solution used value linCmt(). compartments can dose linear solved system depot central linear absorption constant model ka. Without additional ODEs, compartments numbered depot=1 central=2. absorption constant ka missing, may dose central compartment. Without additional ODEs compartment number central=1. compartments take sort events ODE model can take, discussed rxode2 events vignette. acts ODE model; specify dose depot compartment solve system:","code":"mod <- rxode2({     ke <- 0.5     V <- 1     ipre <- linCmt(); }) mod ## rxode2 2.0.6 model named rx_ef86f580d17d211395cda6d420a0d50a model (ready).  ## x$stateExtra: central ## x$params: ke, V ## x$lhs: ipre et  <- et(amt=10,time=0,cmt=depot) %>%     et(seq(0,24,length.out=50)) cmt1 <- rxSolve(mod,et,params=c(ke=0.5)) cmt1 ## -- Solved rxode2 object -- ## -- Parameters (x$params): -- ##  ke   V  ## 0.5 1.0  ## -- Initial Conditions (x$inits): -- ## named numeric(0) ## -- First part of data (object): -- ## # A tibble: 50 x 2 ##    time  ipre ##   <dbl> <dbl> ## 1 0     10    ## 2 0.490  7.83 ## 3 0.980  6.13 ## 4 1.47   4.80 ## 5 1.96   3.75 ## 6 2.45   2.94 ## # ... with 44 more rows"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-model-types.html","id":"mixing-solved-systems-and-odes","dir":"Articles","previous_headings":"","what":"Mixing Solved Systems and ODEs","title":"rxode2 additional model types","text":"addition pure ODEs, may mix solved systems ODEs. prior 2-compartment indirect response model can simplified linCmt() function: allows indirect response model assign 2-compartment model C2 variable used indirect response model. mixing solved systems ODEs, solved system’s compartment always last compartment. solved system technically isn’t compartment solved. Adding dosing compartment end interfere actual ODE solved. Therefore,two-compartment indirect response model, effect compartment compartment #1 PK dosing compartment depot compartment #2. compartment model requires new event table since compartment number changed: can solved following command: Note solving require specifying effect compartment initial condition 1. Rather, already pre-specified eff(0)=1. can solved different initial conditions easily: rxode2 detective also require specify variables linCmt() function already defined block. Therefore, following function also work solve system. Note specify parameters solving system since built model, can override parameters:","code":"library(rxode2) ## Setup example model mod1 <-rxode2({     C2 = centr/V2;     C3 = peri/V3;     d/dt(depot) =-KA*depot;     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;     d/dt(peri)  =                    Q*C2 - Q*C3;     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff; });  ## Seup parameters and initial conditions  theta <-     c(KA=2.94E-01, CL=1.86E+01, V2=4.02E+01, # central       Q=1.05E+01,  V3=2.97E+02,              # peripheral       Kin=1, Kout=1, EC50=200)               # effects  inits <- c(eff=1);  ## Setup dosing event information ev <- eventTable(amount.units=\"mg\", time.units=\"hours\") %>%     add.dosing(dose=10000, nbr.doses=10, dosing.interval=12) %>%     add.dosing(dose=20000, nbr.doses=5, start.time=120,dosing.interval=24) %>%     add.sampling(0:240);  ## Setup a mixed solved/ode system: mod2 <- rxode2({     ## the order of variables do not matter, the type of compartmental     ## model is determined by the parameters specified.     C2   = linCmt(KA, CL, V2, Q, V3);     eff(0) = 1  ## This specifies that the effect compartment starts at 1.     d/dt(eff) =  Kin - Kout*(1-C2/(EC50+C2))*eff; }) ev <- eventTable(amount.units='mg', time.units='hours') %>%     add.dosing(dose=10000, nbr.doses=10, dosing.interval=12,dosing.to=2) %>%     add.dosing(dose=20000, nbr.doses=5, start.time=120,dosing.interval=24,dosing.to=2) %>%     add.sampling(0:240); x <- mod2 %>%  solve(theta, ev) print(x) ## -- Solved rxode2 object -- ## -- Parameters ($params): -- ##      CL      V2       Q      V3      KA     Kin    Kout    EC50  ##  18.600  40.200  10.500 297.000   0.294   1.000   1.000 200.000  ## -- Initial Conditions ($inits): -- ## eff  ##   1  ## -- First part of data (object): -- ## # A tibble: 241 x 3 ##   time    C2   eff ##    [h] <dbl> <dbl> ## 1    0 249.   1    ## 2    1 121.   1.35 ## 3    2  60.3  1.38 ## 4    3  31.0  1.28 ## 5    4  17.0  1.18 ## 6    5  10.2  1.11 ## # ... with 235 more rows x <- mod2 %>%  solve(theta, ev,c(eff=2)) print(x) ## -- Solved rxode2 object -- ## -- Parameters ($params): -- ##      CL      V2       Q      V3      KA     Kin    Kout    EC50  ##  18.600  40.200  10.500 297.000   0.294   1.000   1.000 200.000  ## -- Initial Conditions ($inits): -- ## eff  ##   2  ## -- First part of data (object): -- ## # A tibble: 241 x 3 ##   time    C2   eff ##    [h] <dbl> <dbl> ## 1    0 249.   2    ## 2    1 121.   1.93 ## 3    2  60.3  1.67 ## 4    3  31.0  1.41 ## 5    4  17.0  1.23 ## 6    5  10.2  1.13 ## # ... with 235 more rows mod3 <- rxode2({     KA=2.94E-01;     CL=1.86E+01;     V2=4.02E+01;     Q=1.05E+01;     V3=2.97E+02;     Kin=1;     Kout=1;     EC50=200;     ## The linCmt() picks up the variables from above     C2   = linCmt();     eff(0) = 1  ## This specifies that the effect compartment starts at 1.     d/dt(eff) =  Kin - Kout*(1-C2/(EC50+C2))*eff; })  x <- mod3 %>%  solve(ev) print(x) ## -- Solved rxode2 object -- ## -- Parameters ($params): -- ##      KA      CL      V2       Q      V3     Kin    Kout    EC50  ##   0.294  18.600  40.200  10.500 297.000   1.000   1.000 200.000  ## -- Initial Conditions ($inits): -- ## eff  ##   1  ## -- First part of data (object): -- ## # A tibble: 241 x 3 ##   time    C2   eff ##    [h] <dbl> <dbl> ## 1    0 249.   1    ## 2    1 121.   1.35 ## 3    2  60.3  1.38 ## 4    3  31.0  1.28 ## 5    4  17.0  1.18 ## 6    5  10.2  1.11 ## # ... with 235 more rows x <- mod3 %>%  solve(c(KA=10),ev) print(x) ## -- Solved rxode2 object -- ## -- Parameters ($params): -- ##    KA    CL    V2     Q    V3   Kin  Kout  EC50  ##  10.0  18.6  40.2  10.5 297.0   1.0   1.0 200.0  ## -- Initial Conditions ($inits): -- ## eff  ##   1  ## -- First part of data (object): -- ## # A tibble: 241 x 3 ##   time    C2   eff ##    [h] <dbl> <dbl> ## 1    0 249.   1    ## 2    1 121.   1.35 ## 3    2  60.3  1.38 ## 4    3  31.0  1.28 ## 5    4  17.0  1.18 ## 6    5  10.2  1.11 ## # ... with 235 more rows"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-nesting.html","id":"nesting-in-rxode2","dir":"Articles","previous_headings":"","what":"Nesting in rxode2","title":"Nesting levels in rxode2","text":"one level nesting possible rxode2; example using following uncertainties sources variability:","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-nesting.html","id":"event-table","dir":"Articles","previous_headings":"Nesting in rxode2","what":"Event table","title":"Nesting levels in rxode2","text":"event table contains nesting variables: inv: investigator id id: subject id eye: eye id (left right) occ: occasion","code":"library(rxode2) #> rxode2 2.0.6 using 1 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union et(amountUnits=\"mg\", timeUnits=\"hours\") %>%   et(amt=10000, addl=9,ii=12,cmt=\"depot\") %>%   et(time=120, amt=2000, addl=4, ii=14, cmt=\"depot\") %>%   et(seq(0, 240, by=4)) %>% # Assumes sampling when there is no dosing information   et(seq(0, 240, by=4) + 0.1) %>% ## adds 0.1 for separate eye   et(id=1:20) %>%   ## Add an occasion per dose   mutate(occ=cumsum(!is.na(amt))) %>%   mutate(occ=ifelse(occ == 0, 1, occ)) %>%   mutate(occ=2- occ %% 2) %>%   mutate(eye=ifelse(round(time) == time, 1, 2)) %>%   mutate(inv=ifelse(id < 10, 1, 2)) %>% as_tibble ->   ev"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-nesting.html","id":"rxode2-model","dir":"Articles","previous_headings":"Nesting in rxode2","what":"rxode2 model","title":"Nesting levels in rxode2","text":"creates rxode2 model multi-level nesting. Note variables inv.Cl, inv.Ka, eta.Cl etc; need one variable level nesting.","code":"mod <- rxode2({   ## Clearance with individuals   eff(0) = 1   C2 = centr/V2*(1+prop.sd);   C3 = peri/V3;   CL =  TCl*exp(eta.Cl + eye.Cl + iov.Cl + inv.Cl)   KA = TKA * exp(eta.Ka + eye.Ka + iov.Cl + inv.Ka)   d/dt(depot) =-KA*depot;   d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;   d/dt(peri)  =                    Q*C2 - Q*C3;   d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff;   ef0 = eff + add.sd })"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-nesting.html","id":"uncertainty-in-model-parameters","dir":"Articles","previous_headings":"Nesting in rxode2","what":"Uncertainty in Model parameters","title":"Nesting levels in rxode2","text":"","code":"theta <- c(\"TKA\"=0.294, \"TCl\"=18.6, \"V2\"=40.2,            \"Q\"=10.5, \"V3\"=297, \"Kin\"=1, \"Kout\"=1, \"EC50\"=200)  ## Creating covariance matrix tmp <- matrix(rnorm(8^2), 8, 8) tMat <- tcrossprod(tmp, tmp) / (8 ^ 2) dimnames(tMat) <- list(names(theta), names(theta))  tMat #>                TKA         TCl           V2             Q          V3 #> TKA   0.0710697445 -0.03419656  0.006103234  0.0001968422  0.02951084 #> TCl  -0.0341965610  0.11649794 -0.079214276  0.0184721966 -0.06628296 #> V2    0.0061032336 -0.07921428  0.134771263 -0.1113665531 -0.01086500 #> Q     0.0001968422  0.01847220 -0.111366553  0.2074249709  0.09359306 #> V3    0.0295108449 -0.06628296 -0.010864999  0.0935930637  0.16240502 #> Kin  -0.0584715728  0.00830477  0.035297492 -0.0712952080 -0.01271279 #> Kout  0.0099437003 -0.04198486  0.067977444 -0.1115869728  0.03920155 #> EC50  0.0451714865 -0.07223838  0.006852357  0.0381992699  0.06755403 #>              Kin        Kout         EC50 #> TKA  -0.05847157  0.00994370  0.045171486 #> TCl   0.00830477 -0.04198486 -0.072238380 #> V2    0.03529749  0.06797744  0.006852357 #> Q    -0.07129521 -0.11158697  0.038199270 #> V3   -0.01271279  0.03920155  0.067554033 #> Kin   0.18246268  0.04135995 -0.067136731 #> Kout  0.04135995  0.22254120 -0.072240302 #> EC50 -0.06713673 -0.07224030  0.213500315"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-nesting.html","id":"nesting-variability","dir":"Articles","previous_headings":"Nesting in rxode2","what":"Nesting Variability","title":"Nesting levels in rxode2","text":"specify multiple levels nesting, can specify nested lotri matrix; using approach use condition operator | specify variable nesting occurs ; Bayesian simulation need specify much information parameter; rxode2 nu parameter. case: - id, nu=100 model came 100 subjects - eye, nu=200 model came 200 eyes - occ, nu=200 model came 200 occasions - inv, nu=10 model came 10 investigators specify lotri can use | var(nu=X), :","code":"omega <- lotri(lotri(eta.Cl ~ 0.1,                      eta.Ka ~ 0.1) | id(nu=100),                lotri(eye.Cl ~ 0.05,                      eye.Ka ~ 0.05) | eye(nu=200),                lotri(iov.Cl ~ 0.01,                      iov.Ka ~ 0.01) | occ(nu=200),                lotri(inv.Cl ~ 0.02,                      inv.Ka ~ 0.02) | inv(nu=10)) omega #> $id #>        eta.Cl eta.Ka #> eta.Cl    0.1    0.0 #> eta.Ka    0.0    0.1 #>  #> $eye #>        eye.Cl eye.Ka #> eye.Cl   0.05   0.00 #> eye.Ka   0.00   0.05 #>  #> $occ #>        iov.Cl iov.Ka #> iov.Cl   0.01   0.00 #> iov.Ka   0.00   0.01 #>  #> $inv #>        inv.Cl inv.Ka #> inv.Cl   0.02   0.00 #> inv.Ka   0.00   0.02 #>  #> Properties: nu"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-nesting.html","id":"unexplained-variability","dir":"Articles","previous_headings":"Nesting in rxode2","what":"Unexplained variability","title":"Nesting levels in rxode2","text":"last piece variability specify unexplained variability","code":"sigma <- lotri(prop.sd ~ .25,                add.sd~ 0.125)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-nesting.html","id":"solving-the-problem","dir":"Articles","previous_headings":"Nesting in rxode2","what":"Solving the problem","title":"Nesting levels in rxode2","text":"multiple investigators study; investigator number individuals enrolled site. rxode2 automatically determines number investigators simulate effect investigator. output, inv.Cl(inv==1) inv.Cl investigator 1, inv.Cl(inv==2) inv.Cl investigator 2, etc. inv.Cl(inv==1), inv.Cl(inv==2), etc simulated study combined form investigator variability. equation form represent following: look simulated parameters can see inv.Cl(inv==1) inv.Cl(inv==2) s$params; study: eye variability occasion variability individual simulates number variables become eye occasion variability; case eye: look simulation variables (ie eye.Cl(eye==1), eye.Cl(eye==2), etc) change individual combined make eye variability occasion variability can seen pharamcometric models.","code":"s <- rxSolve(mod, theta, ev,              thetaMat=tMat, omega=omega,              sigma=sigma, sigmaDf=400,              nStud=400) #> unhandled error message: EE:[lsoda] 70000 steps taken before reaching tout #>  @(lsoda.c:750 #> Warning: some ID(s) could not solve the ODEs correctly; These values are #> replaced with 'NA' print(s) #> -- Solved rxode2 object -- #> -- Parameters ($params): -- #> # A tibble: 8,000 x 24 #>    sim.id id    `inv.Cl(inv==1)` `inv.Cl(inv==2)` `inv.Ka(inv==1)` #>     <int> <fct>            <dbl>            <dbl>            <dbl> #>  1      1 1               -0.124           -0.184           0.0987 #>  2      1 2               -0.124           -0.184           0.0987 #>  3      1 3               -0.124           -0.184           0.0987 #>  4      1 4               -0.124           -0.184           0.0987 #>  5      1 5               -0.124           -0.184           0.0987 #>  6      1 6               -0.124           -0.184           0.0987 #>  7      1 7               -0.124           -0.184           0.0987 #>  8      1 8               -0.124           -0.184           0.0987 #>  9      1 9               -0.124           -0.184           0.0987 #> 10      1 10              -0.124           -0.184           0.0987 #> # ... with 7,990 more rows, and 19 more variables: `inv.Ka(inv==2)` <dbl>, #> #   `eye.Cl(eye==1)` <dbl>, `eye.Cl(eye==2)` <dbl>, `eye.Ka(eye==1)` <dbl>, #> #   `eye.Ka(eye==2)` <dbl>, `iov.Cl(occ==1)` <dbl>, `iov.Cl(occ==2)` <dbl>, #> #   `iov.Ka(occ==1)` <dbl>, `iov.Ka(occ==2)` <dbl>, V2 <dbl>, V3 <dbl>, #> #   TCl <dbl>, eta.Cl <dbl>, TKA <dbl>, eta.Ka <dbl>, Q <dbl>, Kin <dbl>, #> #   Kout <dbl>, EC50 <dbl> #> -- Initial Conditions ($inits): -- #> depot centr  peri   eff  #>     0     0     0     1  #>  #> Simulation with uncertainty in: #> * parameters ($thetaMat for changes) #> * omega matrix ($omegaList) #>  #> -- First part of data (object): -- #> # A tibble: 976,000 x 21 #>   sim.id    id time inv.Cl inv.Ka   eye.Cl eye.Ka iov.Cl iov.Ka    C2      C3 #>    <int> <int>  [h]  <dbl>  <dbl>    <dbl>  <dbl>  <dbl>  <dbl> <dbl>   <dbl> #> 1      1     1  0   -0.124 0.0987 -0.154   -0.239 0.0401 -0.152  0    0       #> 2      1     1  0.1 -0.124 0.0987  0.00926  0.210 0.0401 -0.152  1.09 0.00232 #> 3      1     1  4   -0.124 0.0987 -0.154   -0.239 0.0401 -0.152 24.6  2.07    #> 4      1     1  4.1 -0.124 0.0987  0.00926  0.210 0.0401 -0.152 18.1  2.13    #> 5      1     1  8   -0.124 0.0987 -0.154   -0.239 0.0401 -0.152 14.8  4.07    #> 6      1     1  8.1 -0.124 0.0987  0.00926  0.210 0.0401 -0.152  8.27 4.11    #> # ... with 975,994 more rows, and 10 more variables: CL <dbl>, KA <dbl>, #> #   ef0 <dbl>, depot <dbl>, centr <dbl>, peri <dbl>, eff <dbl>, occ <fct>, #> #   eye <fct>, inv <fct> inv.Cl = (inv == 1) * `inv.Cl(inv==1)` + (inv == 2) * `inv.Cl(inv==2)` print(head(s$params)) #>   sim.id id inv.Cl(inv==1) inv.Cl(inv==2) inv.Ka(inv==1) inv.Ka(inv==2) #> 1      1  1     -0.1236197     -0.1839697     0.09871845      0.1136121 #> 2      1  2     -0.1236197     -0.1839697     0.09871845      0.1136121 #> 3      1  3     -0.1236197     -0.1839697     0.09871845      0.1136121 #> 4      1  4     -0.1236197     -0.1839697     0.09871845      0.1136121 #> 5      1  5     -0.1236197     -0.1839697     0.09871845      0.1136121 #> 6      1  6     -0.1236197     -0.1839697     0.09871845      0.1136121 #>   eye.Cl(eye==1) eye.Cl(eye==2) eye.Ka(eye==1) eye.Ka(eye==2) iov.Cl(occ==1) #> 1    -0.15363570    0.009257607    -0.23873715     0.21021668     0.04009327 #> 2     0.12399399   -0.254281497    -0.28772340     0.30139593    -0.04431999 #> 3    -0.08050762   -0.062940038     0.40329505    -0.33302361     0.05525988 #> 4    -0.03858377   -0.099669007     0.27434001    -0.08603331    -0.10441174 #> 5     0.05379779    0.038848903    -0.02862652    -0.07509268    -0.02612766 #> 6    -0.19213395    0.510106622    -0.22131059    -0.37322768    -0.04667792 #>   iov.Cl(occ==2) iov.Ka(occ==1) iov.Ka(occ==2)       V2       V3      TCl #> 1    -0.08947888   -0.152377909    -0.01519458 39.91241 296.8268 18.89885 #> 2     0.03678616    0.161868201    -0.06043290 39.91241 296.8268 18.89885 #> 3     0.07184037   -0.092675504     0.06280242 39.91241 296.8268 18.89885 #> 4    -0.06567972   -0.003996593     0.04324325 39.91241 296.8268 18.89885 #> 5     0.15691383    0.008594909    -0.02187752 39.91241 296.8268 18.89885 #> 6    -0.35338518   -0.115640652     0.05550589 39.91241 296.8268 18.89885 #>        eta.Cl        TKA      eta.Ka      Q      Kin      Kout     EC50 #> 1  0.28638543 0.07071227 -0.18482764 10.616 1.061649 0.6964133 200.2212 #> 2  0.25062889 0.07071227  0.09618637 10.616 1.061649 0.6964133 200.2212 #> 3 -0.23244157 0.07071227 -0.16197904 10.616 1.061649 0.6964133 200.2212 #> 4  0.04900821 0.07071227  0.34377717 10.616 1.061649 0.6964133 200.2212 #> 5 -0.15678604 0.07071227 -0.26566563 10.616 1.061649 0.6964133 200.2212 #> 6 -0.07222906 0.07071227 -0.01941575 10.616 1.061649 0.6964133 200.2212 print(head(s$params %>% filter(sim.id == 2))) #>   sim.id id inv.Cl(inv==1) inv.Cl(inv==2) inv.Ka(inv==1) inv.Ka(inv==2) #> 1      2  1   -0.008702867      0.1222549    -0.02618696       0.192125 #> 2      2  2   -0.008702867      0.1222549    -0.02618696       0.192125 #> 3      2  3   -0.008702867      0.1222549    -0.02618696       0.192125 #> 4      2  4   -0.008702867      0.1222549    -0.02618696       0.192125 #> 5      2  5   -0.008702867      0.1222549    -0.02618696       0.192125 #> 6      2  6   -0.008702867      0.1222549    -0.02618696       0.192125 #>   eye.Cl(eye==1) eye.Cl(eye==2) eye.Ka(eye==1) eye.Ka(eye==2) iov.Cl(occ==1) #> 1      0.2152156    -0.30189037    -0.28026749     0.02044771    0.112550106 #> 2     -0.1327936     0.10146359    -0.10226163     0.39507765    0.030369953 #> 3     -0.1976085    -0.43708647    -0.13636188    -0.06040983    0.009415321 #> 4     -0.1402088     0.05623468     0.02038127    -0.11960952    0.199516532 #> 5     -0.3169192    -0.38653522    -0.02737260     0.50418276    0.095432941 #> 6      0.2303175    -0.15658901     0.45513054    -0.34218176   -0.104577262 #>   iov.Cl(occ==2) iov.Ka(occ==1) iov.Ka(occ==2)       V2       V3      TCl #> 1    0.007991737    0.113665813     0.06765209 40.16375 296.5221 18.60596 #> 2   -0.062282282   -0.014642489    -0.30316846 40.16375 296.5221 18.60596 #> 3   -0.108684225    0.104015041     0.01648678 40.16375 296.5221 18.60596 #> 4    0.043252667    0.126506891     0.11280477 40.16375 296.5221 18.60596 #> 5    0.060664949   -0.004738922    -0.11096321 40.16375 296.5221 18.60596 #> 6   -0.057133775    0.004353259    -0.02650305 40.16375 296.5221 18.60596 #>        eta.Cl      TKA      eta.Ka        Q       Kin      Kout     EC50 #> 1  0.13655412 0.207088  0.57434856 10.49689 0.1181636 0.8689126 200.0704 #> 2 -0.23822262 0.207088  0.08692058 10.49689 0.1181636 0.8689126 200.0704 #> 3  0.34748675 0.207088  0.69878621 10.49689 0.1181636 0.8689126 200.0704 #> 4 -0.16294477 0.207088 -0.09935347 10.49689 0.1181636 0.8689126 200.0704 #> 5  0.26515780 0.207088  0.52109272 10.49689 0.1181636 0.8689126 200.0704 #> 6 -0.09794151 0.207088 -0.10365287 10.49689 0.1181636 0.8689126 200.0704 eye.Cl = (eye == 1) * `eye.Cl(eye==1)` + (eye == 2) * `eye.Cl(eye==2)`"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-pipeline.html","id":"setting-up-the-rxode2-model-for-the-pipeline","dir":"Articles","previous_headings":"","what":"Setting up the rxode2 model for the pipeline","title":"rxode2 in a pipeline","text":"example show use rxode2 simple pipeline. can start model can used different simulation workflows rxode2 can handle: tumor growth model described Ribba 2012. case, compiled model R object Ribba2012, though rxode2 simulation pipeline, assign compiled model object, though think makes sense.","code":"library(rxode2) #> rxode2 2.0.6 using 1 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()`  Ribba2012 <- rxode2({     k = 100      tkde = 0.24     eta.tkde = 0     kde ~ tkde*exp(eta.tkde)      tkpq = 0.0295     eta.kpq = 0     kpq ~ tkpq * exp(eta.kpq)      tkqpp = 0.0031     eta.kqpp = 0     kqpp ~ tkqpp * exp(eta.kqpp)      tlambdap = 0.121     eta.lambdap = 0     lambdap ~ tlambdap*exp(eta.lambdap)      tgamma = 0.729     eta.gamma = 0     gamma ~ tgamma*exp(eta.gamma)      tdeltaqp = 0.00867     eta.deltaqp = 0     deltaqp ~ tdeltaqp*exp(eta.deltaqp)      prop.err <- 0     pstar <- (pt+q+qp)*(1+prop.err)     d/dt(c) = -kde * c     d/dt(pt) = lambdap * pt *(1-pstar/k) + kqpp*qp -         kpq*pt - gamma*c*kde*pt     d/dt(q) = kpq*pt -gamma*c*kde*q     d/dt(qp) = gamma*c*kde*q - kqpp*qp - deltaqp*qp     ## initial conditions     tpt0 = 7.13     eta.pt0 = 0     pt0 ~ tpt0*exp(eta.pt0)     tq0 = 41.2     eta.q0 = 0     q0 ~ tq0*exp(eta.q0)     pt(0) = pt0     q(0) = q0 })"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-pipeline.html","id":"simulating-one-event-table","dir":"Articles","previous_headings":"","what":"Simulating one event table","title":"rxode2 in a pipeline","text":"Simulating single event table quite simple: pipe rxode2 simulation object event table object et(). events completely specified, simply solve ODE system rxSolve(). case can pipe output plot() conveniently view results. pt (Proliferative Tissue), q (quiescent tissue) qp (DNA-Damaged quiescent tissue) pstar (total tumor tissue)","code":"Ribba2012 %>% # Use rxode2     et(time.units=\"months\") %>% # Pipe to a new event table     et(amt=1, time=50, until=58, ii=1.5) %>% # Add dosing every 1.5 months     et(0, 250, by=0.5) %>% # Add some sampling times (not required)     rxSolve() %>% # Solve the simulation     plot(pt, q, qp, pstar) # Plot it, plotting the variables of interest"},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-pipeline.html","id":"simulating-with-between-subject-variability","dir":"Articles","previous_headings":"Simulating multiple subjects from a single event table","what":"Simulating with between subject variability","title":"rxode2 in a pipeline","text":"next sort simulation may useful simulating multiple patients treatments. case, use omega matrix specified paper: information, easy simulate 3 subjects model-based parameters:  Note two different things added simulation: - nSub specify many subjects model - omega specify subject variability.","code":"## Add CVs from paper for individual simulation ## Uses exact formula:  lognCv = function(x){log((x/100)^2+1)}  library(lotri) ## Now create omega matrix ## I'm using lotri to quickly specify names/diagonals omega <- lotri(eta.pt0 ~ lognCv(94),                eta.q0 ~ lognCv(54),                eta.lambdap ~ lognCv(72),                eta.kqp ~ lognCv(76),                eta.qpp ~ lognCv(97),                eta.deltaqp ~ lognCv(115),                eta.kde ~ lognCv(70))  omega #>               eta.pt0    eta.q0 eta.lambdap   eta.kqp   eta.qpp eta.deltaqp #> eta.pt0     0.6331848 0.0000000   0.0000000 0.0000000 0.0000000   0.0000000 #> eta.q0      0.0000000 0.2558818   0.0000000 0.0000000 0.0000000   0.0000000 #> eta.lambdap 0.0000000 0.0000000   0.4176571 0.0000000 0.0000000   0.0000000 #> eta.kqp     0.0000000 0.0000000   0.0000000 0.4559047 0.0000000   0.0000000 #> eta.qpp     0.0000000 0.0000000   0.0000000 0.0000000 0.6631518   0.0000000 #> eta.deltaqp 0.0000000 0.0000000   0.0000000 0.0000000 0.0000000   0.8426442 #> eta.kde     0.0000000 0.0000000   0.0000000 0.0000000 0.0000000   0.0000000 #>               eta.kde #> eta.pt0     0.0000000 #> eta.q0      0.0000000 #> eta.lambdap 0.0000000 #> eta.kqp     0.0000000 #> eta.qpp     0.0000000 #> eta.deltaqp 0.0000000 #> eta.kde     0.3987761 set.seed(1089) rxSetSeed(1089) Ribba2012 %>% # Use rxode2     et(time.units=\"months\") %>% # Pipe to a new event table     et(amt=1, time=50, until=58, ii=1.5) %>% # Add dosing every 1.5 months     et(0, 250, by=0.5) %>% # Add some sampling times (not required)     rxSolve(nSub=3, omega=omega) %>% # Solve the simulation     plot(pt, q, qp, pstar) # Plot it, plotting the variables of interest"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-pipeline.html","id":"simulation-with-unexplained-variability","dir":"Articles","previous_headings":"Simulating multiple subjects from a single event table","what":"Simulation with unexplained variability","title":"rxode2 in a pipeline","text":"can even add unexplained variability quite easily:  case added sigma matrix unexplained variability pstar total tumor tissue. can even simulate uncertainty theta omega sigma values wish.","code":"Ribba2012 %>% # Use rxode2     et(time.units=\"months\") %>% # Pipe to a new event table     et(amt=1, time=50, until=58, ii=1.5) %>% # Add dosing every 1.5 months      et(0, 250, by=0.5) %>% # Add some sampling times (not required)     rxSolve(nSub=3, omega=omega, sigma=lotri(prop.err ~ 0.05^2)) %>% # Solve the simulation     plot(pt, q, qp, pstar) # Plot it, plotting the variables of interest"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-pipeline.html","id":"simulation-with-uncertainty-in-all-the-parameters-by-matrices","dir":"Articles","previous_headings":"Simulating multiple subjects from a single event table","what":"Simulation with uncertainty in all the parameters (by matrices)","title":"rxode2 in a pipeline","text":"assume parameters came 95 subjects 8 observations apiece, degrees freedom omega matrix 95, degrees freedom sigma matrix 95*8=760 95 items informed omega matrix, 760 items informed sigma matrix.  Often simulations full covariance matrix fixed effect parameters. case, matrix, specified thetaMat. full covariance matrix, can information diagonal elements covariance matrix model paper. can converted follows: Now thetaMat represent uncertainty theta matrix, well pieces simulation. Typically can put information simulation thetaMat matrix. large variability theta easy sample negative rate constant, make sense. example: correct problems simply need use truncated multivariate normal specify reasonable ranges parameters. theta specified thetaLower thetaUpper. Similar parameters matrices: omegaLower, omegaUpper, sigmaLower sigmaUpper. may named vectors, one numeric value, numeric vector matching number parameters specified thetaMat matrix. case simulation simply modified thetaLower=0 make sure rates positive:","code":"Ribba2012 %>% # Use rxode2     et(time.units=\"months\") %>% # Pipe to a new event table     et(amt=1, time=50, until=58, ii=1.5) %>% # Add dosing every 1.5 months     et(0, 250, by=0.5) %>% # Add some sampling times (not required)     rxSolve(nSub=3, nStud=3, omega=omega, sigma=lotri(prop.err ~ 0.05^2),             dfSub=760, dfObs=95) %>% # Solve the simulation     plot(pt, q, qp, pstar) # Plot it, plotting the variables of interest rseVar <- function(est, rse){     return(est*rse/100)^2 }  thetaMat <- lotri(tpt0 ~ rseVar(7.13,25),                   tq0 ~ rseVar(41.2,7),                   tlambdap ~ rseVar(0.121, 16),                   tkqpp ~ rseVar(0.0031, 35),                   tdeltaqp ~ rseVar(0.00867, 21),                   tgamma ~ rseVar(0.729, 37),                   tkde ~ rseVar(0.24, 33)                   );  thetaMat #>            tpt0   tq0 tlambdap    tkqpp  tdeltaqp  tgamma   tkde #> tpt0     1.7825 0.000  0.00000 0.000000 0.0000000 0.00000 0.0000 #> tq0      0.0000 2.884  0.00000 0.000000 0.0000000 0.00000 0.0000 #> tlambdap 0.0000 0.000  0.01936 0.000000 0.0000000 0.00000 0.0000 #> tkqpp    0.0000 0.000  0.00000 0.001085 0.0000000 0.00000 0.0000 #> tdeltaqp 0.0000 0.000  0.00000 0.000000 0.0018207 0.00000 0.0000 #> tgamma   0.0000 0.000  0.00000 0.000000 0.0000000 0.26973 0.0000 #> tkde     0.0000 0.000  0.00000 0.000000 0.0000000 0.00000 0.0792 Ribba2012 %>% # Use rxode2 et(time.units=\"months\") %>% # Pipe to a new event table et(amt=1, time=50, until=58, ii=1.5) %>% # Add dosing every 1.5 months et(0, 250, by=0.5) %>% # Add some sampling times (not required) rxSolve(nSub=2, nStud=2, omega=omega, sigma=lotri(prop.err ~ 0.05^2), thetaMat=thetaMat,  dfSub=760, dfObs=95) %>% # Solve the simulation plot(pt, q, qp, pstar) # Plot it, plotting the variables of interest  #> unhandled error message: EE:[lsoda] 70000 steps taken before reaching tout #> @(lsoda.c:750 #> Warning message: #> In rxSolve_(object, .ctl, .nms, .xtra, params, events, inits, setupOnly = .setupOnly) : #>  Some ID(s) could not solve the ODEs correctly; These values are replaced with NA. Ribba2012 %>% # Use rxode2     et(time.units=\"months\") %>% # Pipe to a new event table     et(amt=1, time=50, until=58, ii=1.5) %>% # Add dosing every 1.5 months     et(0, 250, by=0.5) %>% # Add some sampling times (not required)     rxSolve(nSub=2, nStud=2, omega=omega, sigma=lotri(prop.err ~ 0.05^2),             thetaMat=thetaMat,             thetaLower=0, # Make sure the rates are reasonable             dfSub=760, dfObs=95) %>% # Solve the simulation     plot(pt, q, qp, pstar) # Plot it, plotting the variables of interest"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-pipeline.html","id":"summarizing-the-simulation-output","dir":"Articles","previous_headings":"","what":"Summarizing the simulation output","title":"rxode2 in a pipeline","text":"easy use dplyr data.table perform summary simulations, rxode2 also provides ability confint function.","code":"## This takes a little more time; Most of the time is the summary ## time.  sim0 <- Ribba2012 %>% # Use rxode2     et(time.units=\"months\") %>% # Pipe to a new event table     et(amt=1, time=50, until=58, ii=1.5) %>% # Add dosing every 1.5 months     et(0, 250, by=0.5) %>% # Add some sampling times (not required)     rxSolve(nSub=10, nStud=10, omega=omega, sigma=lotri(prop.err ~ 0.05^2),             thetaMat=thetaMat,             thetaLower=0, # Make sure the rates are reasonable             dfSub=760, dfObs=95) %>% # Solve the simulation     confint(c(\"pt\",\"q\",\"qp\",\"pstar\"),level=0.90); # Create Simulation intervals #> summarizing data...done  sim0 %>% plot() # Plot the simulation intervals"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-pipeline.html","id":"simulating-from-a-data-frame-of-parameters","dir":"Articles","previous_headings":"Summarizing the simulation output","what":"Simulating from a data-frame of parameters","title":"rxode2 in a pipeline","text":"simulation matrices can useful fast way simulate information, sometimes may want simulate complex scenarios. instance, may reason believe tkde needs tlambdap, therefore need simulated carefully. can generate data frame whatever way want. internal method simulating new parameters exported .","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union pars <- rxInits(Ribba2012); pars <- pars[regexpr(\"(prop|eta)\",names(pars)) == -1] print(pars) #>        k     tkde     tkpq    tkqpp tlambdap   tgamma tdeltaqp     tpt0  #> 1.00e+02 2.40e-01 2.95e-02 3.10e-03 1.21e-01 7.29e-01 8.67e-03 7.13e+00  #>      tq0  #> 4.12e+01 ## This is the exported method for simulation of Theta/Omega internally in rxode2 df <- rxSimThetaOmega(params=pars, omega=omega,dfSub=760,                       thetaMat=thetaMat, thetaLower=0, nSub=60,nStud=60) %>%     filter(tkde > tlambdap) %>% as.tbl() #> Warning: `as.tbl()` was deprecated in dplyr 1.0.0. #> Please use `tibble::as_tibble()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. ## You could also simulate more and bind them together to a data frame. print(df) #> # A tibble: 2,100 × 16 #>        k  tkde   tkpq tkqpp tlambdap tgamma tdeltaqp  tpt0   tq0 eta.pt0 eta.q0 #>    <dbl> <dbl>  <dbl> <dbl>    <dbl>  <dbl>    <dbl> <dbl> <dbl>   <dbl>  <dbl> #>  1   100  1.60 0.0295  1.25    0.149   1.30    0.414  7.60  42.6  2.31   0.199  #>  2   100  1.60 0.0295  1.25    0.149   1.30    0.414  7.60  42.6  1.35   0.0514 #>  3   100  1.60 0.0295  1.25    0.149   1.30    0.414  7.60  42.6 -0.404  1.08   #>  4   100  1.60 0.0295  1.25    0.149   1.30    0.414  7.60  42.6 -0.177  0.0311 #>  5   100  1.60 0.0295  1.25    0.149   1.30    0.414  7.60  42.6 -0.771  0.945  #>  6   100  1.60 0.0295  1.25    0.149   1.30    0.414  7.60  42.6  0.883  0.0507 #>  7   100  1.60 0.0295  1.25    0.149   1.30    0.414  7.60  42.6 -0.368  0.932  #>  8   100  1.60 0.0295  1.25    0.149   1.30    0.414  7.60  42.6  1.43   0.223  #>  9   100  1.60 0.0295  1.25    0.149   1.30    0.414  7.60  42.6  0.0627 0.154  #> 10   100  1.60 0.0295  1.25    0.149   1.30    0.414  7.60  42.6  0.242  0.143  #> # … with 2,090 more rows, and 5 more variables: eta.lambdap <dbl>, #> #   eta.kqp <dbl>, eta.qpp <dbl>, eta.deltaqp <dbl>, eta.kde <dbl> ## Quick check to make sure that all the parameters are OK. all(df$tkde>df$tlambdap) #> [1] TRUE sim1 <- Ribba2012 %>% # Use rxode2     et(time.units=\"months\") %>% # Pipe to a new event table     et(amt=1, time=50, until=58, ii=1.5) %>% # Add dosing every 1.5 months     et(0, 250, by=0.5) %>% # Add some sampling times (not required)     rxSolve(df) ## Note this information looses information about which ID is in a ## \"study\", so it summarizes the confidence intervals by dividing the ## subjects into sqrt(#subjects) subjects and then summarizes the ## confidence intervals sim2 <- sim1 %>% confint(c(\"pt\",\"q\",\"qp\",\"pstar\"),level=0.90); # Create Simulation intervals #> ! in order to put confidence bands around the intervals, you need at least 2500 simulations #> summarizing data...done save(sim2, file = file.path(system.file(package = \"rxode2\"), \"pipeline-sim2.rds\"), version = 2) sim2 %>% plot()"},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-plot.html","id":"setting-up-model-for-plotting-explanation","dir":"Articles","previous_headings":"Plotting in rxode2","what":"Setting up model for plotting explanation","title":"Plotting rxode2 models","text":"first step explain rxode2 model plots setup: rxode2 model event table solved object","code":"library(rxode2) ## rxode2 2.0.6 using 1 threads (see ?getRxThreads) ##   no cache: create with `rxCreateCache()` ## Model from rxode2 tutorial m1 <- rxode2({   KA <- 2.94E-01   CL <- 1.86E+01   V2 <- 4.02E+01   Q <- 1.05E+01   V3 <- 2.97E+02   Kin <- 1   Kout <- 1   EC50 <- 200   ## Added modeled bioavaiblity, duration and rate   fdepot <- 1   durDepot <- 8   rateDepot <- 1250   C2 <- centr / V2   C3 <- peri / V3   d/dt(depot) <- -KA * depot   f(depot) <- fdepot   dur(depot) <- durDepot   rate(depot) <- rateDepot   d/dt(centr) <- KA * depot - CL * C2 - Q * C2 + Q * C3   d/dt(peri) <- Q * C2 - Q * C3   d/dt(eff) <- Kin - Kout * (1 - C2 / (EC50 + C2)) * eff   eff(0) <- 1 })  ev <- et(timeUnits = \"hr\") %>%   et(amt = 10000, ii = 12, until = 24) %>%   et(seq(0, 24, length.out = 100))  s <- rxSolve(m1, ev)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-plot.html","id":"default-rxode2-plot","dir":"Articles","previous_headings":"Plotting in rxode2","what":"Default rxode2 plot","title":"Plotting rxode2 models","text":"default plot rxode2 plot time versus state calculated lhs values:  Things note: First, plots actually ggplot2 plots can modified standard ggplot2 grammar graphics Also note plot method rxSolve objects can currently use arguments default plot method: log character string contains \"x\" x axis logarithmic, \"y\" y axis logarithmic \"xy\" \"yx\" axes logarithmic. available, use xgxr xgx_scale_x_log10() xgx_scale_y_log10() functions. xlab bit different simply supplying x-label ggplot2, retain unit information originally supplied event table. Also note, available, unit information used used meaningful ticks xgx_scale_x_time_units() ylab supplies y label following currently unsupported: . type b. xlim c. ylim d. main e. sub f. ann g. axes","code":"plot(s)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-plot.html","id":"subsetting-plots","dir":"Articles","previous_headings":"","what":"Subsetting plots","title":"Plotting rxode2 models","text":"interesting, often useful subset plots based values interested ; example, interesting plot eff C2. , simply specify interesting items plot function. instance:","code":"plot(s, C2, eff)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-plot.html","id":"semi-log-plots","dir":"Articles","previous_headings":"","what":"Semi-log plots","title":"Plotting rxode2 models","text":"Semi-log plots PK concentrations common; simply need use log=\"y\"  uses xgx_scale_y_log10() available clearly show semi-log nature plot.","code":"plot(s, C2, log=\"y\", ylab=\"Concentration\") ## Warning: Transformation introduced infinite values in continuous y-axis"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-plot.html","id":"plots-with-multi-subject-plots","dir":"Articles","previous_headings":"","what":"Plots with multi-subject plots","title":"Plotting rxode2 models","text":"multi-subject plots can easily plot applying principles . illustrate plot, lets expand event table include plot 4 subjects lognormal random variability subjects; complete, may plot method:  Notice colored individual labeled legend. interested concentration, produces similar plot:  Notice plot individual labeled attached id let know individual comes . done ggrepel available, otherwise legend retained.","code":"# Setup the new problem m2 <- rxode2({   KA <- 2.94E-01   CL <- 1.86E+01 * exp(eta.Cl)   V2 <- 4.02E+01   Q <- 1.05E+01   V3 <- 2.97E+02   Kin <- 1   Kout <- 1   EC50 <- 200   ## Added modeled bioavaiblity, duration and rate   fdepot <- 1   durDepot <- 8   rateDepot <- 1250   C2 <- centr / V2   C3 <- peri / V3   d / dt(depot) <- -KA * depot   f(depot) <- fdepot   dur(depot) <- durDepot   rate(depot) <- rateDepot   d / dt(centr) <- KA * depot - CL * C2 - Q * C2 + Q * C3   d / dt(peri) <- Q * C2 - Q * C3   d / dt(eff) <- Kin - Kout * (1 - C2 / (EC50 + C2)) * eff   eff(0) <- 1 })  # Add the between subject variability: omega <- lotri(eta.Cl ~ 0.4^2)  # Create the event table ev <- et(timeUnits = \"hr\") %>%   et(amt = 10000, until = units::set_units(3, days), ii = 12) %>% # loading doses   et(seq(0, 48, length.out = 200)) %>%   et(id = 1:4)  s <- rxSolve(m2, ev, omega=omega) plot(s, C2, eff) plot(s, C2, log=\"y\", ylab=\"Concentration\") ## Warning: Transformation introduced infinite values in continuous y-axis"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-plot.html","id":"multi-subject-plots-with-large-number-of-subjects","dir":"Articles","previous_headings":"Plots with multi-subject plots","what":"Multi-subject plots with large number of subjects","title":"Plotting rxode2 models","text":"can get bit much many subjects solved (example lets simulate 100)  case, individuals put plot transparent grayscale plot pane. allows places subjects present darker. number individuals plots switch legend grayscale controlled changing options rxode2.spaghetti. ie. options(rxode2.spaghetti=7). 7 individuals default value plotting changes individual grayscale spaghetti plots. can also create confidence interval simulations confint: plot plot","code":"ev <- et(timeUnits = \"hr\") %>%   et(amt = 10000, until = units::set_units(3, days), ii = 12) %>% # loading doses   et(seq(0, 48, length.out = 200)) %>%   et(id = 1:100) # 100 subjects  s <- rxSolve(m2, ev, omega=omega)  plot(s, C2, log=\"y\", ylab=\"Concentration\") ## Warning: Transformation introduced infinite values in continuous y-axis s2 <- confint(s, parm=\"C2\") ## ! in order to put confidence bands around the intervals, you need at least 2500 simulations ## summarizing data...done plot(s2)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-prior-data.html","id":"using-prior-data-for-solving","dir":"Articles","previous_headings":"","what":"Using prior data for solving","title":"Using Prior Data for ODE solving","text":"rxode2 can use single subject multiple subjects single event table solve ODEs. Additionally, rxode2 can use arbitrary data frame individualized events. example using nlmixr, use theo_sd data frame","code":"library(rxode2) #> rxode2 2.0.6 using 1 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` ## Load data from nlmixr d <- qs::qread(\"theo_sd.qs\")  ## Create rxode2 model theo <- rxode2({     tka ~ 0.45 # Log Ka     tcl ~ 1 # Log Cl     tv ~ 3.45    # Log V     eta.ka ~ 0.6     eta.cl ~ 0.3     eta.v ~ 0.1     ka <- exp(tka + eta.ka)     cl <- exp(tcl + eta.cl)     v <- exp(tv + eta.v)     d/dt(depot) = -ka * depot     d/dt(center) = ka * depot - cl / v * center     cp = center / v })  ## Create parameter dataset library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union parsDf <- tribble(   ~ eta.ka, ~ eta.cl, ~ eta.v,    0.105, -0.487, -0.080,   0.221, 0.144, 0.021,   0.368, 0.031, 0.058,  -0.277, -0.015, -0.007,  -0.046, -0.155, -0.142,  -0.382, 0.367, 0.203,  -0.791, 0.160, 0.047,  -0.181, 0.168, 0.096,   1.420, 0.042, 0.012,  -0.738, -0.391, -0.170,   0.790, 0.281, 0.146,  -0.527, -0.126, -0.198) %>%     mutate(tka = 0.451, tcl = 1.017, tv = 3.449)  ## Now solve the dataset solveData <- rxSolve(theo, parsDf, d)  plot(solveData, cp) print(solveData) #> ── Solved rxode2 object ── #> ── Parameters ($params): ── #> # A tibble: 12 × 1 #>    id    #>    <fct> #>  1 1     #>  2 2     #>  3 3     #>  4 4     #>  5 5     #>  6 6     #>  7 7     #>  8 8     #>  9 9     #> 10 10    #> 11 11    #> 12 12    #> ── Initial Conditions ($inits): ── #>  depot center  #>      0      0  #> ── First part of data (object): ── #> # A tibble: 132 × 8 #>      id  time    ka    cl     v    cp     depot center #>   <int> <dbl> <dbl> <dbl> <dbl> <dbl>     <dbl>  <dbl> #> 1     1  0     2.86  3.67  34.8  0    320.          0  #> 2     1  0.25  2.86  3.67  34.8  4.62 157.        161. #> 3     1  0.57  2.86  3.67  34.8  7.12  62.8       248. #> 4     1  1.12  2.86  3.67  34.8  8.09  13.0       282. #> 5     1  2.02  2.86  3.67  34.8  7.68   0.996     267. #> 6     1  3.82  2.86  3.67  34.8  6.38   0.00581   222. #> # … with 126 more rows  ## Of course the fasest way to solve if you don't care about the rxode2 extra parameters is  solveData <- rxSolve(theo, parsDf, d, returnType=\"data.frame\")  ## solved data dplyr::as.tbl(solveData) #> Warning: `as.tbl()` was deprecated in dplyr 1.0.0. #> Please use `tibble::as_tibble()` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was generated. #> # A tibble: 132 × 8 #>       id  time    ka    cl     v    cp   depot center #>    <int> <dbl> <dbl> <dbl> <dbl> <dbl>   <dbl>  <dbl> #>  1     1  0     2.86  3.67  34.8  0    3.20e+2    0   #>  2     1  0.25  2.86  3.67  34.8  4.62 1.57e+2  161.  #>  3     1  0.57  2.86  3.67  34.8  7.12 6.28e+1  248.  #>  4     1  1.12  2.86  3.67  34.8  8.09 1.30e+1  282.  #>  5     1  2.02  2.86  3.67  34.8  7.68 9.96e-1  267.  #>  6     1  3.82  2.86  3.67  34.8  6.38 5.81e-3  222.  #>  7     1  5.1   2.86  3.67  34.8  5.58 1.50e-4  194.  #>  8     1  7.03  2.86  3.67  34.8  4.55 6.02e-7  158.  #>  9     1  9.05  2.86  3.67  34.8  3.68 1.77e-9  128.  #> 10     1 12.1   2.86  3.67  34.8  2.66 9.43e-9   92.6 #> # … with 122 more rows  data.table::data.table(solveData) #>      id  time       ka       cl        v        cp         depot    center #>   1:  1  0.00 2.857651 3.669297 34.81332 0.0000000  3.199920e+02   0.00000 #>   2:  1  0.25 2.857651 3.669297 34.81332 4.6240421  1.566295e+02 160.97825 #>   3:  1  0.57 2.857651 3.669297 34.81332 7.1151647  6.276731e+01 247.70249 #>   4:  1  1.12 2.857651 3.669297 34.81332 8.0922106  1.303613e+01 281.71670 #>   5:  1  2.02 2.857651 3.669297 34.81332 7.6837844  9.958446e-01 267.49803 #>  ---                                                                       #> 128: 12  5.07 2.857651 3.669297 34.81332 5.6044213  1.636210e-04 195.10850 #> 129: 12  7.07 2.857651 3.669297 34.81332 4.5392337  5.385697e-07 158.02579 #> 130: 12  9.03 2.857651 3.669297 34.81332 3.6920276  1.882087e-09 128.53173 #> 131: 12 12.05 2.857651 3.669297 34.81332 2.6855080  8.461424e-09  93.49144 #> 132: 12 24.15 2.857651 3.669297 34.81332 0.7501667 -4.775222e-10  26.11579"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-rxUse.html","id":"using-pre-compiled-models-in-your-packages","dir":"Articles","previous_headings":"","what":"Using Pre-compiled models in your packages","title":"Compiled rxode2 models in Packages","text":"package like include pre-compiled rxode2 models package easy create package. simple make package rxPkg() command. : Add model package; can use package data idr package loads Add right package requirements DESCRIPTION file. want update describe package modify authors, license etc. Create skeleton model documentation files can add package documentation. case file idr-doc.R R directory Create configure configure.win script removes regenerates src directory based whatever version rxode2 compiled . modified plan compiled code, though suggested. can write R code package interacts rxode2 object can distribute shiny apps similar things package context. present can add models package rxUse(). Simply compile rxode2 model package add model rxUse() Now model idr model library. also create model-doc.R R directory can document model. can use devtools methods install/test model","code":"library(rxode2); ## Now Create a model idr <- rxode2({     C2 = centr/V2;     C3 = peri/V3;     d/dt(depot) =-KA*depot;     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;     d/dt(peri)  =                    Q*C2 - Q*C3;     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff; })  ## You can specify as many models as you want to add  rxPkg(idr, package=\"myPackage\"); ## Add the idr model to your package rxUse(model) devtools::load_all() # Load all the functions in the package devtools::document() # Create package documentation devtools::install() # Install package devtools::check() # Check the package devtools::build() # build the package so you can submit it to places like CRAN"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-rxUse.html","id":"using-models-in-a-already-present-package","dir":"Articles","previous_headings":"","what":"Using Models in a already present package","title":"Compiled rxode2 models in Packages","text":"illustrate, lets start blank package rxUse() : - Create rxode2 sources move package’s src/ directory. R source package, also finish directory library-init.c registers rxode2 models package use R. - Create stub R documentation models including package. able see R documentation loading package standard ? interface. still need : - Export least one function. function wish export, can add re-export rxode2 using roxygen follows: want use Suggests instead Depends package, way want export rxode2’s normal routines also need instruct R load model library models included model’s dll. done : R package rxode2 models intend add compiled sources (recommended), can add following configure scripts Depending check may need dummy autoconf script, want integrate sources Rcpp C/Fortan based packages, need include rxModels-compiled.h : - Add define macro compiledModelCall list registered .Call functions. - Register C interface allow model solving R_init0_rxModels_rxode2_models() (rxModels replaced package name). complete, can compile/document standard methods: load package new version rxode2, models recompiled used. However, want models recompiled recent version rxode2, simply need call rxUse() project directory followed standard methods install/create package. Note include rxode2 code required generate model regenerate rxode2 c-code src directory. rxode2 objects, summary show one way recreate model. example compiled models package can found rxModels repository.","code":"library(rxode2) library(usethis) pkgPath  <- file.path(rxTempDir(),\"MyRxModel\") create_package(pkgPath); use_gpl3_license(\"Matt\") use_package(\"rxode2\", \"LinkingTo\") use_package(\"rxode2\", \"Depends\") ##  library(rxode2) on load; Can use imports instead. use_roxygen_md() ##use_readme_md() library(rxode2); ## Now Create a model idr <- rxode2({     C2 = centr/V2;     C3 = peri/V3;     d/dt(depot) =-KA*depot;     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;     d/dt(peri)  =                    Q*C2 - Q*C3;     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff; });  rxUse(idr); ## Add the idr model to your package rxUse(); # Update the compiled rxode2 sources for all of your packages ##' @importFrom rxode2 rxode2 ##' @export rxode2::rxode2 ##' @importFrom rxode2 rxode2 ##' @export rxode2::rxode2  ##' @importFrom rxode2 et ##' @export rxode2::et  ##' @importFrom rxode2 etRep ##' @export rxode2::etRep  ##' @importFrom rxode2 etSeq ##' @export rxode2::etSeq  ##' @importFrom rxode2 as.et ##' @export rxode2::as.et  ##' @importFrom rxode2 eventTable ##' @export rxode2::eventTable  ##' @importFrom rxode2 add.dosing ##' @export rxode2::add.dosing  ##' @importFrom rxode2 add.sampling ##' @export rxode2::add.sampling  ##' @importFrom rxode2 rxSolve ##' @export rxode2::rxSolve  ##' @importFrom rxode2 rxControl ##' @export rxode2::rxControl  ##' @importFrom rxode2 rxClean ##' @export rxode2::rxClean  ##' @importFrom rxode2 rxUse ##' @export rxode2::rxUse  ##' @importFrom rxode2 rxShiny ##' @export rxode2::rxShiny  ##' @importFrom rxode2 genShinyApp.template ##' @export rxode2::genShinyApp.template  ##' @importFrom rxode2 cvPost ##' @export rxode2::cvPost  # This is actually from `magrittr` but allows less imports ##' @importFrom rxode2 %>% ##' @export rxode2::`%>%` # In this case `rxModels` is the package name ##' @useDynLib rxModels, .registration=TRUE #!/bin/sh # This should be used for both configure and configure.win echo \"unlink('src', recursive=TRUE);rxode2::rxUse()\" > build.R ${R_HOME}/bin/Rscript build.R rm build.R ## dummy autoconf script ## It is saved to configure.ac devtools::load_all() devtools::document() devtools::install() devtools::load_all() devtools::document() devtools::install()"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-shiny.html","id":"facilities-for-generating-r-shiny-applications","dir":"Articles","previous_headings":"","what":"Facilities for generating R shiny applications","title":"rxode2 and Shiny","text":"example creating R shiny application interactively explore responses various complex dosing regimens available http://qsp.engr.uga.edu:3838/rxode2/RegimenSimulator. Shiny applications like one may programmatically created experimental function genShinyApp.template(). application includes widgets varying dose, dosing regimen, dose cycle, number cycles. Click go Shiny App","code":"genShinyApp.template(appDir = \"shinyExample\", verbose=TRUE)  library(shiny) runApp(\"shinyExample\")"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-shiny.html","id":"exploring-parameter-fits-graphically-using-shiny","dir":"Articles","previous_headings":"","what":"Exploring parameter fits graphically using shiny","title":"rxode2 and Shiny","text":"rxode2 object can explored rxShiny(obj). rxShiny() also allow try new models see behave.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html","id":"simulation-of-variability-with-rxode2","dir":"Articles","previous_headings":"Population Simulations with rxode2","what":"Simulation of Variability with rxode2","title":"rxode2 Simulation","text":"pharmacometrics nonlinear-mixed effect modeling software (like nlmixr) characterizes -subject variability. subject variability can simulate new subjects. Assuming 2-compartment, indirect response model, can set create rxode2 model describing system :","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html","id":"setting-up-the-rxode2-model","dir":"Articles","previous_headings":"Population Simulations with rxode2 > Simulation of Variability with rxode2","what":"Setting up the rxode2 model","title":"rxode2 Simulation","text":"","code":"library(rxode2) #> rxode2 2.0.6 using 1 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()`  set.seed(32) rxSetSeed(32)  mod <- rxode2({   eff(0) = 1   C2 = centr/V2*(1+prop.err);   C3 = peri/V3;   CL =  TCl*exp(eta.Cl) ## This is coded as a variable in the model   d/dt(depot) =-KA*depot;   d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;   d/dt(peri)  =                    Q*C2 - Q*C3;   d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff; })"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html","id":"adding-the-parameter-estimates","dir":"Articles","previous_headings":"Population Simulations with rxode2 > Simulation of Variability with rxode2","what":"Adding the parameter estimates","title":"rxode2 Simulation","text":"next step get parameters R can start simulation: case, use lotri specify omega since uses similar lower-triangular matrix specification nlmixr (also similar NONMEM):","code":"theta <- c(KA=2.94E-01, TCl=1.86E+01, V2=4.02E+01,  # central             Q=1.05E+01, V3=2.97E+02,                # peripheral            Kin=1, Kout=1, EC50=200, prop.err=0)      # effects ## the column names of the omega matrix need to match the parameters specified by rxode2 omega <- lotri(eta.Cl ~ 0.4^2) omega #>        eta.Cl #> eta.Cl   0.16"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html","id":"simulating","dir":"Articles","previous_headings":"Population Simulations with rxode2 > Simulation of Variability with rxode2","what":"Simulating","title":"rxode2 Simulation","text":"next step simulate create dosing regimen overall simulation: wish, can also add sampling times (though now rxode2 can fill ): Note et takes similar arguments seq adding sampling times. methods adding sampling times events make complex dosing regimens (See event vignette). includes ways add variability sampling dosing times). complete can simulate using rxSolve routine: quickly look customize simulation use default plot routine. Since rxode2 object, create ggplot2 object can modify wish. extra parameter plot tells rxode2/R piece information interested plotting. case, interested looking derived parameter C2:","code":"ev <- et(amount.units=\"mg\", time.units=\"hours\") %>%   et(amt=10000, cmt=\"centr\") ev <- ev %>% et(0,48, length.out=100) sim  <- rxSolve(mod,theta,ev,omega=omega,nSub=100)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html","id":"checking-the-simulation-with-plot","dir":"Articles","previous_headings":"Population Simulations with rxode2 > Simulation of Variability with rxode2","what":"Checking the simulation with plot","title":"rxode2 Simulation","text":"course additional parameter also state value, like eff:  even look two side--side:  stack patchwork","code":"library(ggplot2) ## The plots from rxode2 are ggplots so they can be modified with ## standard ggplot commands. plot(sim, C2, log=\"y\") +     ylab(\"Central Compartment\") ## They also takes many of the standard plot arguments; See ?plot plot(sim, eff, ylab=\"Effect\") plot(sim, C2, eff) library(patchwork) plot(sim, C2, log=\"y\") / plot(sim, eff)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html","id":"processing-the-data-to-create-summary-plots","dir":"Articles","previous_headings":"Population Simulations with rxode2 > Simulation of Variability with rxode2","what":"Processing the data to create summary plots","title":"rxode2 Simulation","text":"Usually pharmacometric simulations enough simply simulate system. something easier digest, like look central extreme tendencies simulation. Since rxode2 solve object type data frame now straightforward perform calculations generate plots simulated data. can , 5th, 50th, 95th percentiles simulated data plotted.   Note can see parameters simulated example","code":"confint(sim, \"C2\", level=0.95) %>%     plot(ylab=\"Central Concentration\", log=\"y\") #> ! in order to put confidence bands around the intervals, you need at least 2500 simulations #> summarizing data...done confint(sim, \"eff\", level=0.95) %>%     plot(ylab=\"Effect\") #> ! in order to put confidence bands around the intervals, you need at least 2500 simulations #> summarizing data...done head(sim$param) #>   sim.id   V2 prop.err  V3  TCl     eta.Cl    KA    Q Kin Kout EC50 #> 1      1 40.2        0 297 18.6  0.1886912 0.294 10.5   1    1  200 #> 2      2 40.2        0 297 18.6 -0.1492457 0.294 10.5   1    1  200 #> 3      3 40.2        0 297 18.6  0.5075745 0.294 10.5   1    1  200 #> 4      4 40.2        0 297 18.6  0.3819285 0.294 10.5   1    1  200 #> 5      5 40.2        0 297 18.6  0.1262516 0.294 10.5   1    1  200 #> 6      6 40.2        0 297 18.6  0.1721206 0.294 10.5   1    1  200"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html","id":"simulation-of-unexplained-variability-sigma","dir":"Articles","previous_headings":"Population Simulations with rxode2 > Simulation of Variability with rxode2","what":"Simulation of unexplained variability (sigma)","title":"rxode2 Simulation","text":"addition conveniently simulating subject variability, can also easily simulate unexplained variability.","code":"mod <- rxode2({   eff(0) = 1   C2 = centr/V2;   C3 = peri/V3;   CL =  TCl*exp(eta.Cl) ## This is coded as a variable in the model   d/dt(depot) =-KA*depot;   d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;   d/dt(peri)  =                    Q*C2 - Q*C3;   d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff;   e = eff+eff.err   cp = centr*(1+cp.err) })  theta <- c(KA=2.94E-01, TCl=1.86E+01, V2=4.02E+01,  # central             Q=1.05E+01, V3=2.97E+02,                # peripheral            Kin=1, Kout=1, EC50=200)                # effects    sigma <- lotri(eff.err ~ 0.1, cp.err ~ 0.1)   sim  <- rxSolve(mod, theta, ev, omega=omega, nSub=100, sigma=sigma) s <- confint(sim, c(\"eff\", \"centr\")); #> ! in order to put confidence bands around the intervals, you need at least 2500 simulations #> summarizing data...done  plot(s)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html","id":"simulation-of-individuals","dir":"Articles","previous_headings":"Population Simulations with rxode2 > Simulation of Variability with rxode2","what":"Simulation of Individuals","title":"rxode2 Simulation","text":"Sometimes may want match dosing observations individuals clinical trial. create data.frame using rxode2 event specification well ID column indicate individual. rxode2 event vignette talks datasets created.","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union ev1 <- eventTable(amount.units=\"mg\", time.units=\"hours\") %>%     add.dosing(dose=10000, nbr.doses=1, dosing.to=2) %>%     add.sampling(seq(0,48,length.out=10));  ev2 <- eventTable(amount.units=\"mg\", time.units=\"hours\") %>%     add.dosing(dose=5000, nbr.doses=1, dosing.to=2) %>%     add.sampling(seq(0,48,length.out=8));  dat <- rbind(data.frame(ID=1, ev1$get.EventTable()),              data.frame(ID=2, ev2$get.EventTable()))   ## Note the number of subject is not needed since it is determined by the data sim  <- rxSolve(mod, theta, dat, omega=omega, sigma=sigma)  sim %>% select(id, time, e, cp) #>    id          time         e          cp #> 1   1  0.000000 [h] 1.0704873 6088.682408 #> 2   1  5.333333 [h] 1.4161832  195.326087 #> 3   1 10.666667 [h] 1.1577243   71.657674 #> 4   1 16.000000 [h] 1.5530452   55.718881 #> 5   1 21.333333 [h] 0.6095692   79.788997 #> 6   1 26.666667 [h] 1.0198489   87.860527 #> 7   1 32.000000 [h] 1.3936163    6.063889 #> 8   1 37.333333 [h] 1.5462477   47.825627 #> 9   1 42.666667 [h] 0.9646993   34.477631 #> 10  1 48.000000 [h] 0.7520603   57.685566 #> 11  2  0.000000 [h] 1.2096424 3806.329387 #> 12  2  6.857143 [h] 1.0133905   91.404578 #> 13  2 13.714286 [h] 0.7185334   43.293896 #> 14  2 20.571429 [h] 1.0589584   44.864883 #> 15  2 27.428571 [h] 1.0806704   27.278484 #> 16  2 34.285714 [h] 1.0580734   18.125166 #> 17  2 41.142857 [h] 0.7148149   16.826759 #> 18  2 48.000000 [h] 0.8196009   16.593307"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html","id":"simulation-of-clinical-trials","dir":"Articles","previous_headings":"","what":"Simulation of Clinical Trials","title":"rxode2 Simulation","text":"either using simple single event table, data clinical trial described , complete clinical trial simulation can performed. Typically clinical trial simulations want account uncertainty fixed parameter estimates, even uncertainty subject variability well unexplained variability. rxode2 allows account uncertainties simulating multiple virtual “studies,” specified parameter nStud. studies samples realization fixed effect parameters covariance matrices subject variability(omega) unexplained variabilities (sigma). Depending information models, strategies simulating realization omega sigma matrices. first strategy occurs either standard errors standard deviations (related parameters), modeled correlation model simulating . case suggested strategy use inverse Wishart (parameterized scale conjugate prior)/scaled inverse chi distribution. approach uses single parameter inform variability covariance matrix sampled (degrees freedom). second strategy occurs standard errors variance/standard deviation modeled correlations covariance matrix. approach perform separate simulations standard deviations correlation matrix. First simulate variance/standard deviation components thetaMat multivariate normal simulation. simulation transformation standard deviations, correlation matrix simulated using degrees freedom covariance matrix. Combining simulated standard deviation simulated correlation matrix give simulated covariance matrix. smaller dimension covariance matrices (dimension < 10x10) recommended use lkj distribution simulate correlation matrix. higher dimension covariance matrices suggested use inverse wishart distribution (transformed correlation matrix) simulations. covariance/variance prior simulated rxode2s cvPost() function.","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html","id":"simulation-from-inverse-wishart-correlations","dir":"Articles","previous_headings":"Simulation of Clinical Trials","what":"Simulation from inverse Wishart correlations","title":"rxode2 Simulation","text":"example simulation :  wish can see omega sigma used virtual study accessing solved data object $omega.list $sigma.list: can also see parameter realizations $params data frame.","code":"## Creating covariance matrix tmp <- matrix(rnorm(8^2), 8, 8) tMat <- tcrossprod(tmp, tmp) / (8 ^ 2) dimnames(tMat) <- list(NULL, names(theta))  sim  <- rxSolve(mod, theta, ev, omega=omega, nSub=100, sigma=sigma, thetaMat=tMat, nStud=10,                 dfSub=10, dfObs=100)  s <-sim %>% confint(c(\"centr\", \"eff\")) #> summarizing data...done  plot(s) head(sim$omega.list) #> [[1]] #>           eta.Cl #> eta.Cl 0.1676778 #>  #> [[2]] #>           eta.Cl #> eta.Cl 0.2917085 #>  #> [[3]] #>           eta.Cl #> eta.Cl 0.1776813 #>  #> [[4]] #>           eta.Cl #> eta.Cl 0.1578682 #>  #> [[5]] #>           eta.Cl #> eta.Cl 0.1845614 #>  #> [[6]] #>           eta.Cl #> eta.Cl 0.3282268 head(sim$sigma.list) #> [[1]] #>             eff.err      cp.err #> eff.err 0.112416983 0.004197039 #> cp.err  0.004197039 0.097293971 #>  #> [[2]] #>              eff.err       cp.err #> eff.err  0.084311199 -0.006277998 #> cp.err  -0.006277998  0.122140938 #>  #> [[3]] #>            eff.err     cp.err #> eff.err 0.09834771 0.01060251 #> cp.err  0.01060251 0.10024751 #>  #> [[4]] #>             eff.err      cp.err #> eff.err 0.125556975 0.007690868 #> cp.err  0.007690868 0.090991261 #>  #> [[5]] #>            eff.err     cp.err #> eff.err  0.1116261 -0.0184748 #> cp.err  -0.0184748  0.1320288 #>  #> [[6]] #>             eff.err      cp.err #> eff.err 0.093539238 0.007270049 #> cp.err  0.007270049 0.098648424"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html","id":"simulate-using-variancestandard-deviation-standard-errors","dir":"Articles","previous_headings":"Simulation of Clinical Trials","what":"Simulate using variance/standard deviation standard errors","title":"rxode2 Simulation","text":"Lets assume wish simulate nonmem run included xpose First setup model: Next input estimated parameters: also covariances; , easiest way create named covariance matrix use lotri():","code":"rx1 <- rxode2({   cl <- tcl*(1+crcl.cl*(CLCR-65)) * exp(eta.cl)   v <- tv * WT * exp(eta.v)   ka <- tka * exp(eta.ka)   ipred <- linCmt()   obs <- ipred * (1 + prop.sd) + add.sd  }) theta <- c(tcl=2.63E+01, tv=1.35E+00, tka=4.20E+00, tlag=2.08E-01,            prop.sd=2.05E-01, add.sd=1.06E-02, crcl.cl=7.17E-03,            ## Note that since we are using the separation strategy the ETA variances are here too            eta.cl=7.30E-02,  eta.v=3.80E-02, eta.ka=1.91E+00) thetaMat <- lotri(     tcl + tv + tka + tlag + prop.sd + add.sd + crcl.cl + eta.cl + eta.v + eta.ka ~         c(7.95E-01,           2.05E-02, 1.92E-03,           7.22E-02, -8.30E-03, 6.55E-01,           -3.45E-03, -6.42E-05, 3.22E-03, 2.47E-04,           8.71E-04, 2.53E-04, -4.71E-03, -5.79E-05, 5.04E-04,           6.30E-04, -3.17E-06, -6.52E-04, -1.53E-05, -3.14E-05, 1.34E-05,           -3.30E-04, 5.46E-06, -3.15E-04, 2.46E-06, 3.15E-06, -1.58E-06, 2.88E-06,           -1.29E-03, -7.97E-05, 1.68E-03, -2.75E-05, -8.26E-05, 1.13E-05, -1.66E-06, 1.58E-04,           -1.23E-03, -1.27E-05, -1.33E-03, -1.47E-05, -1.03E-04, 1.02E-05, 1.67E-06, 6.68E-05, 1.56E-04,           7.69E-02, -7.23E-03, 3.74E-01, 1.79E-03, -2.85E-03, 1.18E-05, -2.54E-04, 1.61E-03, -9.03E-04, 3.12E-01))  evw <- et(amount.units=\"mg\", time.units=\"hours\") %>%     et(amt=100) %>%     ## For this problem we will simulate with sampling windows     et(list(c(0, 0.5),        c(0.5, 1),        c(1, 3),        c(3, 6),        c(6, 12))) %>%     et(id=1:1000)  ## From the run we know that: ##   total number of observations is: 476 ##    Total number of individuals:     74 sim  <- rxSolve(rx1, theta, evw,  nSub=100, nStud=10,                 thetaMat=thetaMat,                 ## Match boundaries of problem                 thetaLower=0,                  sigma=c(\"prop.sd\", \"add.sd\"), ## Sigmas are standard deviations                 sigmaXform=\"identity\", # default sigma xform=\"identity\"                 omega=c(\"eta.cl\", \"eta.v\", \"eta.ka\"), ## etas are variances                 omegaXform=\"variance\", # default omega xform=\"variance\"                 iCov=data.frame(WT=rnorm(1000, 70, 15), CLCR=rnorm(1000, 65, 25)),                 dfSub=74, dfObs=476);  print(sim) #> ── Solved rxode2 object ── #> ── Parameters ($params): ── #> # A tibble: 10,000 × 9 #>    sim.id id      tcl crcl.cl eta.cl    tv   eta.v   tka  eta.ka #>     <int> <fct> <dbl>   <dbl>  <dbl> <dbl>   <dbl> <dbl>   <dbl> #>  1      1 1      27.2   0.757 -0.167  1.94 -0.190   4.80  0.138  #>  2      1 2      27.2   0.757  0.519  1.94 -0.0103  4.80 -1.02   #>  3      1 3      27.2   0.757 -0.324  1.94  0.0859  4.80 -1.25   #>  4      1 4      27.2   0.757  0.951  1.94  0.287   4.80 -0.735  #>  5      1 5      27.2   0.757 -0.147  1.94 -0.233   4.80 -0.880  #>  6      1 6      27.2   0.757  0.629  1.94 -0.316   4.80  1.80   #>  7      1 7      27.2   0.757  0.869  1.94 -0.981   4.80 -1.22   #>  8      1 8      27.2   0.757  0.443  1.94  0.756   4.80  0.734  #>  9      1 9      27.2   0.757 -0.825  1.94 -1.00    4.80  0.0974 #> 10      1 10     27.2   0.757  0.106  1.94 -0.362   4.80 -1.31   #> # … with 9,990 more rows #> ── Initial Conditions ($inits): ── #> named numeric(0) #>  #> Simulation with uncertainty in: #> • parameters ($thetaMat for changes) #> • omega matrix ($omegaList) #> • sigma matrix ($sigmaList) #>  #> ── First part of data (object): ── #> # A tibble: 50,000 × 10 #>   sim.id    id   time     cl     v    ka    ipred    obs    WT  CLCR #>    <int> <int>    [h]  <dbl> <dbl> <dbl>    <dbl>  <dbl> <dbl> <dbl> #> 1      1     1 0.0155   97.1  99.8  5.51 0.0814    0.738  62.2  69.3 #> 2      1     1 0.749    97.1  99.8  5.51 0.568     0.550  62.2  69.3 #> 3      1     1 1.02     97.1  99.8  5.51 0.446     0.821  62.2  69.3 #> 4      1     1 3.41     97.1  99.8  5.51 0.0441   -1.19   62.2  69.3 #> 5      1     1 7.81     97.1  99.8  5.51 0.000609  0.225  62.2  69.3 #> 6      1     2 0.0833 1445.   68.5  1.73 0.0906   -0.579  35.7 105.  #> # … with 49,994 more rows ## Notice that the simulation time-points change for the individual  ## If you want the same sampling time-points you can do that as well: evw <- et(amount.units=\"mg\", time.units=\"hours\") %>%     et(amt=100) %>%     et(0, 24, length.out=50) %>%     et(id=1:100)  sim  <- rxSolve(rx1, theta, evw,  nSub=100, nStud=10,                 thetaMat=thetaMat,                 ## Match boundaries of problem                 thetaLower=0,                  sigma=c(\"prop.sd\", \"add.sd\"), ## Sigmas are standard deviations                 sigmaXform=\"identity\", # default sigma xform=\"identity\"                 omega=c(\"eta.cl\", \"eta.v\", \"eta.ka\"), ## etas are variances                 omegaXform=\"variance\", # default omega xform=\"variance\"                 iCov=data.frame(WT=rnorm(100, 70, 15), CLCR=rnorm(100, 65, 25)),                 dfSub=74, dfObs=476,                 resample=TRUE)  s <-sim %>% confint(c(\"ipred\")) #> summarizing data...done plot(s)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html","id":"simulate-without-uncertainty-in-omega-or-sigma-parameters","dir":"Articles","previous_headings":"Simulation of Clinical Trials","what":"Simulate without uncertainty in omega or sigma parameters","title":"rxode2 Simulation","text":"wish sample prior distributions either omega sigma matrices, can turn feature specifying simVariability = FALSE option solving:  Note since realizations omega sigma simulated, $omega.list $sigma.list return NULL.","code":"mod <- rxode2({   eff(0) = 1   C2 = centr/V2;   C3 = peri/V3;   CL =  TCl*exp(eta.Cl) ## This is coded as a variable in the model   d/dt(depot) =-KA*depot;   d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;   d/dt(peri)  =                    Q*C2 - Q*C3;   d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff;   e = eff+eff.err   cp = centr*(1+cp.err) })  theta <- c(KA=2.94E-01, TCl=1.86E+01, V2=4.02E+01,  # central             Q=1.05E+01, V3=2.97E+02,                # peripheral            Kin=1, Kout=1, EC50=200)                # effects    sigma <- lotri(eff.err ~ 0.1, cp.err ~ 0.1)   sim  <- rxSolve(mod, theta, ev, omega=omega, nSub=100, sigma=sigma,                 thetaMat=tMat, nStud=10,                 simVariability=FALSE)  s <-sim %>% confint(c(\"centr\", \"eff\")) #> summarizing data...done  plot(s)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-sim-var.html","id":"rxode2-multi-threaded-solving-and-simulation","dir":"Articles","previous_headings":"Simulation of Clinical Trials > Simulate without uncertainty in omega or sigma parameters","what":"rxode2 multi-threaded solving and simulation","title":"rxode2 Simulation","text":"rxode2 now supports multi-threaded solving OpenMP supported compilers, including linux windows. Mac OSX can also supported default uses available cores solving determined rxCores(). may overkill depending system, certain point speed solving limited things computing power. can also speed simulation using multi-cores generate random deviates threefry simulation engine. controlled nCoresRV parameter. example: default 1 core since result depends number cores random seed use simulation well work-load thread sharing/architecture. However, can always speed process cores sure collaborators number cores available OpenMP thread-capable compile.","code":"sim  <- rxSolve(mod, theta, ev, omega=omega, nSub=100, sigma=sigma, thetaMat=tMat, nStud=10,                 nCoresRV=2)  s <-sim %>% confint(c(\"eff\", \"centr\")) #> summarizing data...done"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-single-subject.html","id":"single-subject-solving","dir":"Articles","previous_headings":"","what":"Single Subject solving","title":"Single Subject ODE solving -- differences from multiple subject","text":"Originally, rxode2 created solve ODEs one individual. single system without changes individual parameters. course still supported, classic examples found rxode2 intro. article discusses differences multiple subject single subject solving. three differences: Single solving solve ID parallel Single solving lacks id column parameters($params) well actual dataset. Single solving allows parameter exploration easier parameter can modified. multiple subject solves, make sure update individual parameter. first obvious difference speed; multiple subjects can run subject ID parallel. information examples speed gains multiple subject solving see Speeding rxode2 vignette. next difference amount information output final data. Taking 2 compartment indirect response model originally tutorial: Now simple solve  better see differences single solve, can solve 2 individuals  observing two solves, can see: multiple subject solve contains id column data frame data frame parameters subject. last feature obvious, modifying individual parameters. single subject data, can modify rxode2 data frame changing initial conditions parameter values part data frame, described rxode2 Data Frames. multiple subject solving, feature still works, requires care supplying individual’s parameter value, otherwise may change solve drop parameter key individuals.","code":"library(rxode2) #> rxode2 2.0.6 using 1 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` mod1 <-rxode2({     KA=2.94E-01     CL=1.86E+01     V2=4.02E+01     Q=1.05E+01     V3=2.97E+02     Kin=1     Kout=1     EC50=200     C2 = centr/V2     C3 = peri/V3     d/dt(depot) =-KA*depot     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3     d/dt(peri)  =                    Q*C2 - Q*C3     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff     eff(0) = 1 })  et <- et(amount.units='mg', time.units='hours') %>%     et(dose=10000, addl=9, ii=12) %>%     et(amt=20000, nbr.doses=5, start.time=120, dosing.interval=24) %>%     et(0:240) # sampling x <- rxSolve(mod1, et) x #> ── Solved rxode2 object ── #> ── Parameters (x$params): ── #>      KA      CL      V2       Q      V3     Kin    Kout    EC50  #>   0.294  18.600  40.200  10.500 297.000   1.000   1.000 200.000  #> ── Initial Conditions (x$inits): ── #> depot centr  peri   eff  #>     0     0     0     1  #> ── First part of data (object): ── #> # A tibble: 241 × 7 #>   time    C2    C3  depot centr  peri   eff #>    [h] <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> #> 1    0   0   0     10000     0     0   1    #> 2    1  44.4 0.920  7453. 1784.  273.  1.08 #> 3    2  54.9 2.67   5554. 2206.  794.  1.18 #> 4    3  51.9 4.46   4140. 2087. 1324.  1.23 #> 5    4  44.5 5.98   3085. 1789. 1776.  1.23 #> 6    5  36.5 7.18   2299. 1467. 2132.  1.21 #> # … with 235 more rows  print(x) #> ── Solved rxode2 object ── #> ── Parameters ($params): ── #>      KA      CL      V2       Q      V3     Kin    Kout    EC50  #>   0.294  18.600  40.200  10.500 297.000   1.000   1.000 200.000  #> ── Initial Conditions ($inits): ── #> depot centr  peri   eff  #>     0     0     0     1  #> ── First part of data (object): ── #> # A tibble: 241 × 7 #>   time    C2    C3  depot centr  peri   eff #>    [h] <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> #> 1    0   0   0     10000     0     0   1    #> 2    1  44.4 0.920  7453. 1784.  273.  1.08 #> 3    2  54.9 2.67   5554. 2206.  794.  1.18 #> 4    3  51.9 4.46   4140. 2087. 1324.  1.23 #> 5    4  44.5 5.98   3085. 1789. 1776.  1.23 #> 6    5  36.5 7.18   2299. 1467. 2132.  1.21 #> # … with 235 more rows  plot(x, C2, eff) x2 <- rxSolve(mod1, et %>% et(id=1:2), params=data.frame(CL=c(18.6, 7.6))) print(x2) #> ── Solved rxode2 object ── #> ── Parameters ($params): ── #> # A tibble: 2 × 9 #>   id       KA    CL    V2     Q    V3   Kin  Kout  EC50 #>   <fct> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1 1     0.294  18.6  40.2  10.5   297     1     1   200 #> 2 2     0.294   7.6  40.2  10.5   297     1     1   200 #> ── Initial Conditions ($inits): ── #> depot centr  peri   eff  #>     0     0     0     1  #> ── First part of data (object): ── #> # A tibble: 482 × 8 #>      id time    C2    C3  depot centr  peri   eff #>   <int>  [h] <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> #> 1     1    0   0   0     10000     0     0   1    #> 2     1    1  44.4 0.920  7453. 1784.  273.  1.08 #> 3     1    2  54.9 2.67   5554. 2206.  794.  1.18 #> 4     1    3  51.9 4.46   4140. 2087. 1324.  1.23 #> 5     1    4  44.5 5.98   3085. 1789. 1776.  1.23 #> 6     1    5  36.5 7.18   2299. 1467. 2132.  1.21 #> # … with 476 more rows  plot(x2, C2, eff)"},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-speed.html","id":"increasing-rxode2-speed-by-multi-subject-parallel-solving","dir":"Articles","previous_headings":"","what":"Increasing rxode2 speed by multi-subject parallel solving","title":"Speeding up rxode2","text":"rxode2 originally developed ODE solver allowed ODE solve single subject. flexibility still supported. original code rxode2 tutorial :","code":"library(rxode2) #> rxode2 2.0.6 using 1 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()`  library(microbenchmark) library(ggplot2)  mod1 <- rxode2({     C2 = centr/V2;     C3 = peri/V3;     d/dt(depot) = -KA*depot;     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;     d/dt(peri) = Q*C2 - Q*C3;     d/dt(eff) = Kin - Kout*(1-C2/(EC50+C2))*eff;     eff(0) = 1 })  ## Create an event table  ev <- et() %>%     et(amt=10000, addl=9,ii=12) %>%     et(time=120, amt=20000, addl=4, ii=24) %>%     et(0:240) ## Add Sampling  nsub <- 100 # 100 sub-problems sigma <- matrix(c(0.09,0.08,0.08,0.25),2,2) # IIV covariance matrix mv <- rxRmvn(n=nsub, rep(0,2), sigma) # Sample from covariance matrix CL <- 7*exp(mv[,1]) V2 <- 40*exp(mv[,2]) params.all <- cbind(KA=0.3, CL=CL, V2=V2, Q=10, V3=300,                     Kin=0.2, Kout=0.2, EC50=8)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-speed.html","id":"for-loop","dir":"Articles","previous_headings":"Increasing rxode2 speed by multi-subject parallel solving","what":"For Loop","title":"Speeding up rxode2","text":"slowest way code use loop. example enclose function compare timing.","code":"runFor <- function(){     res <- NULL     for (i in 1:nsub) {         params <- params.all[i,]         x <- mod1$solve(params, ev)         ##Store results for effect compartment         res <- cbind(res, x[, \"eff\"])     }     return(res) }"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-speed.html","id":"running-with-apply","dir":"Articles","previous_headings":"Increasing rxode2 speed by multi-subject parallel solving","what":"Running with apply","title":"Speeding up rxode2","text":"general R, apply types functions perform better loop, tutorial also suggests speed enhancement","code":"runSapply <- function(){     res <- apply(params.all, 1, function(theta)         mod1$run(theta, ev)[, \"eff\"]) }"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-speed.html","id":"run-using-a-single-threaded-solve","dir":"Articles","previous_headings":"Increasing rxode2 speed by multi-subject parallel solving","what":"Run using a single-threaded solve","title":"Speeding up rxode2","text":"can also rxode2 solve subject simultaneously without collecting results R, using single threaded solve. data output slightly different , still gives information:","code":"runSingleThread <- function(){   solve(mod1, params.all, ev, cores=1)[,c(\"sim.id\", \"time\", \"eff\")] }"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-speed.html","id":"run-a-2-threaded-solve","dir":"Articles","previous_headings":"Increasing rxode2 speed by multi-subject parallel solving","what":"Run a 2 threaded solve","title":"Speeding up rxode2","text":"rxode2 supports multi-threaded solves, another option 2 threads (called cores solve options, can see options rxControl() rxSolve()).","code":"run2Thread <- function(){   solve(mod1, params.all, ev, cores=2)[,c(\"sim.id\", \"time\", \"eff\")] }"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-speed.html","id":"compare-the-times-between-all-the-methods","dir":"Articles","previous_headings":"Increasing rxode2 speed by multi-subject parallel solving","what":"Compare the times between all the methods","title":"Speeding up rxode2","text":"Now moment truth, timings:  clear largest jump performance using solve method providing parameters rxode2 solve without looping subject either sapply. number cores/threads applied solve also plays role solving. can explore number threads following code:  can suite spot speed vs number cores. system type (mac, linux, windows /processor), complexity ODE solving number subjects may affect arbitrary number threads. 4 threads good number use without prior knowledge systems days least 4 threads (2 processors 4 threads).","code":"bench <- microbenchmark(runFor(), runSapply(), runSingleThread(),run2Thread()) print(bench) #> Unit: milliseconds #>               expr      min        lq      mean    median        uq      max #>           runFor() 371.6052 377.25145 385.15338 382.73265 385.80100 471.0296 #>        runSapply() 370.4834 377.25565 382.05715 380.58210 383.37485 478.2946 #>  runSingleThread()  34.1882  34.40140  34.67363  34.49655  34.71575  38.6602 #>       run2Thread()  20.1295  20.35545  20.83236  20.44950  20.76490  26.0191 #>  neval #>    100 #>    100 #>    100 #>    100 autoplot(bench) #> Coordinate system already present. Adding new coordinate system, which will replace the existing one. runThread <- function(n){     solve(mod1, params.all, ev, cores=n)[,c(\"sim.id\", \"time\", \"eff\")] }  bench <- eval(parse(text=sprintf(\"microbenchmark(%s)\",                                      paste(paste0(\"runThread(\", seq(1, 2 * rxCores()),\")\"),                                            collapse=\",\")))) print(bench) #> Unit: milliseconds #>          expr     min       lq     mean  median      uq     max neval #>  runThread(1) 34.2824 34.49045 35.00604 34.9038 35.0187 39.1465   100 #>  runThread(2) 20.2086 20.38575 20.87525 20.8670 20.9876 25.1390   100 autoplot(bench) #> Coordinate system already present. Adding new coordinate system, which will replace the existing one."},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-speed.html","id":"a-real-life-example","dir":"Articles","previous_headings":"","what":"A real life example","title":"Speeding up rxode2","text":"parallel solving implemented, fastest way run rxode2 lapply. Rik Schoemaker created data-set nlmixr comparisons, reduced run faster automatic building pkgdown website. applying new parallel solving concepts can simply run simulation less code faster: can see striking time difference two methods; things keep mind: rxode2 use thread-safe sitmo threefry routines simulation eta values. Therefore results expected different (also random samples taken different order different) prior simulation run R 3.5, different random number generator results simulation different actual nlmixr comparison using slower simulation. speed comparison used data.table. rxode2 uses data.table internally (available) try speed sorting, different installations data.table installed. can force rxode2 use order() sorting using forderForceBase(TRUE). case little difference two, though examples data.table’s presence leads speed increase (less likely lead slowdown).","code":"library(rxode2) library(data.table) #Define the rxode2 model   ode1 <- \"   d/dt(abs)    = -KA*abs;   d/dt(centr)  =  KA*abs-(CL/V)*centr;   C2=centr/V;   \"    #Create the rxode2 simulation object mod1 <- rxode2(model = ode1)  #Population parameter values on log-scale   paramsl <- c(CL = log(4),                V = log(70),                KA = log(1)) #make 10,000 subjects to sample from:   nsubg <- 300 # subjects per dose   doses <- c(10, 30, 60, 120)   nsub <- nsubg * length(doses) #IIV of 30% for each parameter   omega <- diag(c(0.09, 0.09, 0.09))# IIV covariance matrix   sigma <- 0.2 #Sample from the multivariate normal   set.seed(98176247)   rxSetSeed(98176247)   library(MASS)   mv <-     mvrnorm(nsub, rep(0, dim(omega)[1]), omega) # Sample from covariance matrix #Combine population parameters with IIV   params.all <-     data.table(       \"ID\" = seq(1:nsub),       \"CL\" = exp(paramsl['CL'] + mv[, 1]),       \"V\" = exp(paramsl['V'] + mv[, 2]),       \"KA\" = exp(paramsl['KA'] + mv[, 3])     ) #set the doses (looping through the 4 doses) params.all[, AMT := rep(100 * doses,nsubg)]  Startlapply <- Sys.time()    #Run the simulations using lapply for speed   s = lapply(1:nsub, function(i) { #selects the parameters associated with the subject to be simulated     params <- params.all[i] #creates an eventTable with 7 doses every 24 hours     ev <- eventTable()     ev$add.dosing(       dose = params$AMT,       nbr.doses = 1,       dosing.to = 1,       rate = NULL,       start.time = 0     ) #generates 4 random samples in a 24 hour period     ev$add.sampling(c(0, sort(round(sample(runif(600, 0, 1440), 4) / 60, 2)))) #runs the rxode2 simulation     x <- as.data.table(mod1$run(params, ev)) #merges the parameters and ID number to the simulation output     x[, names(params) := params]   })    #runs the entire sequence of 100 subjects and binds the results to the object res   res = as.data.table(do.call(\"rbind\", s))    Stoplapply <- Sys.time()    print(Stoplapply - Startlapply) #> Time difference of 8.529673 secs rx <- rxode2({     CL =  log(4)     V = log(70)     KA = log(1)     CL = exp(CL + eta.CL)     V = exp(V + eta.V)     KA = exp(KA + eta.KA)     d/dt(abs)    = -KA*abs;     d/dt(centr)  =  KA*abs-(CL/V)*centr;     C2=centr/V; })  omega <- lotri(eta.CL ~ 0.09,                eta.V ~ 0.09,                eta.KA ~ 0.09)  doses <- c(10, 30, 60, 120)   startParallel <- Sys.time() ev <- do.call(\"rbind\",         lapply(seq_along(doses), function(i){             et() %>%                 et(amt=doses[i]) %>% # Add single dose                 et(0) %>% # Add 0 observation                 ## Generate 4 samples in 24 hour period                 et(lapply(1:4, function(...){c(0, 24)})) %>%                 et(id=seq(1, nsubg) + (i - 1) * nsubg) %>%                 ## Convert to data frame to skip sorting the data                 ## When binding the data together                 as.data.frame          })) ## To better compare, use the same output, that is data.table res <- rxSolve(rx, ev, omega=omega, returnType=\"data.table\") endParallel <- Sys.time() print(endParallel - startParallel) #> Time difference of 0.1348557 secs"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-speed.html","id":"want-more-ways-to-run-multi-subject-simulations","dir":"Articles","previous_headings":"A real life example","what":"Want more ways to run multi-subject simulations","title":"Speeding up rxode2","text":"version since tutorial even ways run multi-subject simulations, including adding variability sampling dosing times et() (see rxode2 events information), ability supply omega sigma matrix well adding thetaMat R simulate uncertainty omega, sigma theta matrices; see rxode2 simulation vignette.","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-speed.html","id":"session-information","dir":"Articles","previous_headings":"A real life example","what":"Session Information","title":"Speeding up rxode2","text":"session information:","code":"sessionInfo() #> R version 4.2.0 (2022-04-22) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.9.0 #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.9.0 #>  #> locale: #>  [1] LC_CTYPE=C.UTF-8       LC_NUMERIC=C           LC_TIME=C.UTF-8        #>  [4] LC_COLLATE=C.UTF-8     LC_MONETARY=C.UTF-8    LC_MESSAGES=C.UTF-8    #>  [7] LC_PAPER=C.UTF-8       LC_NAME=C              LC_ADDRESS=C           #> [10] LC_TELEPHONE=C         LC_MEASUREMENT=C.UTF-8 LC_IDENTIFICATION=C    #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] MASS_7.3-56          data.table_1.14.2    ggplot2_3.3.5        #> [4] microbenchmark_1.4.9 rxode2_2.0.6         #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.1.2    xfun_0.30           bslib_0.3.1         #>  [4] purrr_0.3.4         colorspace_2.0-3    vctrs_0.4.1         #>  [7] generics_0.1.2      htmltools_0.5.2     yaml_2.3.5          #> [10] utf8_1.2.2          rlang_1.0.2         pkgdown_2.0.3.9000  #> [13] jquerylib_0.1.4     pillar_1.7.0        withr_2.5.0         #> [16] glue_1.6.2          lifecycle_1.0.1     stringr_1.4.0       #> [19] munsell_0.5.0       gtable_0.3.0        ragg_1.2.2          #> [22] stringfish_0.15.7   memoise_2.0.1       evaluate_0.15       #> [25] RApiSerialize_0.1.0 knitr_1.39          fastmap_1.1.0       #> [28] sys_3.4             fansi_1.0.3         highr_0.9           #> [31] Rcpp_1.0.8.3        scales_1.2.0        backports_1.4.1     #> [34] checkmate_2.1.0     cachem_1.0.6        desc_1.4.1          #> [37] RcppParallel_5.1.5  jsonlite_1.8.0      farver_2.1.0        #> [40] systemfonts_1.0.4   fs_1.5.2            textshaping_0.3.6   #> [43] digest_0.6.29       stringi_1.7.6       lotri_0.4.1         #> [46] dplyr_1.0.8         qs_0.25.3           grid_4.2.0          #> [49] rprojroot_2.0.3     cli_3.3.0           tools_4.2.0         #> [52] dparser_1.3.1-5     magrittr_2.0.3      sass_0.4.1          #> [55] tibble_3.1.6        PreciseSums_0.5     crayon_1.5.1        #> [58] pkgconfig_2.0.3     ellipsis_0.3.2      rmarkdown_2.14      #> [61] R6_2.5.1            units_0.8-0         compiler_4.2.0"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-stiff.html","id":"stiff-odes-with-jacobian-specification","dir":"Articles","previous_headings":"","what":"Stiff ODEs with Jacobian Specification","title":"rxode2 Jacobian specification and Stiff Systems","text":"Occasionally, may come across stiff differential equation, differential equation numerically unstable small variations parameters cause different solutions ODEs. One way tackle choose stiff-solver, hybrid stiff solver (like default LSODA). Typically enough. However exact Jacobian solutions may increase stability ODE. (Note Jacobian derivative ODE specification respect variable). rxode2 can specify Jacobian df(state)/dy(variable)= statement. classic ODE stiff properties various conditions Van der Pol differential equations. rxode2 can specified following: stiff mu=1, mu=1000 stiff system easy enough , bit tedious. rxode2 setup appropriately, can use computer algebra system sympy calculate Jacobian automatically. done rxode2 option calcJac option: see generated model, can use rxCat():","code":"library(rxode2) ## rxode2 2.0.6 using 1 threads (see ?getRxThreads) ##   no cache: create with `rxCreateCache()` Vtpol2 <- rxode2({     d/dt(y)  = dy     d/dt(dy) = mu*(1-y^2)*dy - y     ## Jacobian     df(y)/dy(dy)  = 1     df(dy)/dy(y)  = -2*dy*mu*y - 1     df(dy)/dy(dy) = mu*(1-y^2)     ## Initial conditions     y(0) = 2     dy(0) = 0     ## mu     mu = 1 ## nonstiff; 10 moderately stiff; 1000 stiff })  et <- eventTable(); et$add.sampling(seq(0, 10, length.out=200)); et$add.dosing(20, start.time=0);  s1 <- Vtpol2 %>%  solve(et, method=\"lsoda\") print(s1) ## -- Solved rxode2 object -- ## -- Parameters ($params): -- ## mu  ##  1  ## -- Initial Conditions ($inits): -- ##  y dy  ##  2  0  ## -- First part of data (object): -- ## # A tibble: 200 x 3 ##     time     y      dy ##    <dbl> <dbl>   <dbl> ## 1 0       22    0      ## 2 0.0503  22.0 -0.0456 ## 3 0.101   22.0 -0.0456 ## 4 0.151   22.0 -0.0456 ## 5 0.201   22.0 -0.0456 ## 6 0.251   22.0 -0.0456 ## # ... with 194 more rows s2 <- Vtpol2 %>%  solve(c(mu=1000), et) print(s2) ## -- Solved rxode2 object -- ## -- Parameters ($params): -- ##   mu  ## 1000  ## -- Initial Conditions ($inits): -- ##  y dy  ##  2  0  ## -- First part of data (object): -- ## # A tibble: 200 x 3 ##     time     y         dy ##    <dbl> <dbl>      <dbl> ## 1 0       22    0         ## 2 0.0503  22.0 -0.0000455 ## 3 0.101   22.0 -0.0000455 ## 4 0.151   22.0 -0.0000455 ## 5 0.201   22.0 -0.0000455 ## 6 0.251   22.0 -0.0000455 ## # ... with 194 more rows Vtpol <- rxode2({     d/dt(y)  = dy     d/dt(dy) = mu*(1-y^2)*dy - y     ## Initial conditions     y(0) = 2     dy(0) = 0     ## mu     mu = 1 ## nonstiff; 10 moderately stiff; 1000 stiff }, calcJac=TRUE) > rxCat(Vtpol) d/dt(y)=dy; d/dt(dy)=mu*(1-y^2)*dy-y; y(0)=2; dy(0)=0; mu=1; df(y)/dy(y)=0; df(dy)/dy(y)=-2*dy*mu*y-1; df(y)/dy(dy)=1; df(dy)/dy(dy)=mu*(-Rx_pow_di(y,2)+1);"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"rxode2 ODE solving syntax","text":"briefly describes syntax used define models rxode2 translate R-callable compiled code. also describes communication variables R rxode2 modeling specification. commented example quickly show capabilities rxode2 syntax.","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"rxode2 ODE solving syntax","text":"","code":"# An rxode2 model specification (this line is a comment).     if(comed==0){   # concomitant medication (con-med)?       F = 1.0;     # full bioavailability w.o. con-med    }     else {       F = 0.80;    # 20% reduced bioavailability    }     C2 = centr/V2;  # concentration in the central compartment    C3 = peri/V3;   # concentration in the peripheral compartment     # ODE describing the PK and PD     d/dt(depot) = -KA*depot;    d/dt(centr) = F*KA*depot - CL*C2 - Q*C2 + Q*C3;    d/dt(peri)  =                      Q*C2 - Q*C3;    d/dt(eff)   = Kin - Kout*(1-C2/(EC50+C2))*eff;"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html","id":"syntax","dir":"Articles","previous_headings":"","what":"Syntax","title":"rxode2 ODE solving syntax","text":"rxode2 model specification consists one statements optionally terminated semi-colons ; optional comments (comments delimited # end--line). block statements set statements delimited curly braces, { ... }. Statements can either assignments, conditional /else /else, loops (can exited break), special statements, printing statements (debugging/testing) Assignment statements can : simple assignments, left hand identifier (.e., variable) special time-derivative assignments, left hand specifies change amount corresponding state variable (compartment) respect time e.g., d/dt(depot): special initial-condition assignments left hand specifies compartment initial condition specified, e.g. depot(0) = 0 special model event changes including bioavailability (f(depot)=1), lag time (alag(depot)=0), modeled rate (rate(depot)=2) modeled duration (dur(depot)=2). example model features event specification modeled infusions rxode2 data specification found rxode2 events vignette. special change point syntax, model times. model times specified mtime(var)=time special Jacobian-derivative assignments, left hand specifies change compartment ode respect variable. example, d/dt(y) = dy, Jacobian compartment can specified df(y)/dy(dy) = 1. may advantage obtaining solution specifying Jacobian stiff ODE systems. However, stiff systems tried LSODA, actually slightly slowed solving. Note assignment can done =, <- ~. assigning ~ operator, simple assignments time-derivative assignments output. Special statements can : Compartment declaration statements, can change default dosing compartment assumed compartment number(s) well add extra compartment names end (useful multiple-endpoint nlmixr models); specified cmt(compartmentName) Parameter declaration statements, can make sure input parameters certain order instead ordering parameters order parsed. useful keeping parameter order using 2 different ODE models. specified param(par1, par2,...) example model shown : Expressions assignment statements can numeric logical, however, character integer expressions currently supported. Numeric expressions can include following numeric operators +, -, *, /, ^ mathematical functions defined C R math libraries (e.g., fabs, exp, log, sin, abs). may also access R’s functions R math libraries, like lgammafn log gamma function. rxode2 syntax case-sensitive, .e., ABC different abc, Abc, ABc, etc.","code":"# simple assignment    C2 = centr/V2;     # time-derivative assignment    d/dt(centr) = F*KA*depot - CL*C2 - Q*C2 + Q*C3;"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html","id":"identifiers","dir":"Articles","previous_headings":"Syntax","what":"Identifiers","title":"rxode2 ODE solving syntax","text":"Like R, Identifiers (variable names) may consist one alphanumeric, underscore _ period . characters, first character digit underscore _. Identifiers model specification can refer : State variables dynamic system (e.g., compartments pharmacokinetics model). Implied input variable, t (time), tlast (last time point), podo (oral dose, undocumented case absorption transit models). Special constants like pi R’s predefined constants. Model parameters (e.g., ka rate absorption, CL clearance, etc.) Others, created assignments part model specification; referred LHS (left-hand side) variable. Currently, rxode2 modeling language recognizes system state variables “parameters”, thus, values need passed R ODE model (e.g., age) either passed params argument integrator function rxSolve() supplied event data-set. certain variable names rxode2 event tables. avoid confusion, following event table-related items assigned, used state can accessed rxode2 code: cmt dvid addl ss rate id However following variables used model specification: evid ii Sometimes rxode2 generates variables fed back rxode2. Similarly, nlmixr generates variables used nlmixr estimation simulation. variables start either rx nlmixr prefixes. avoid problems, suggested use variables starting either rx nlmixr prefixes.","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html","id":"logical-operators","dir":"Articles","previous_headings":"","what":"Logical Operators","title":"rxode2 ODE solving syntax","text":"Logical operators support standard R operators ==, != >= <= > <. Like R can () () statements, ifelse() expressions. Additionally can standard assignment. instance, following valid: Notice can also use character expressions comparisons. convenience comes cost since character comparisons slower numeric expressions. Unlike R, .numeric .integer logical statements needed, cause syntax error try use function.","code":"cov1 = covm*(sexf == \"female\") + covm*(sexf != \"female\")"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html","id":"interface-and-data-handling-between-r-and-the-generated-c-code","dir":"Articles","previous_headings":"","what":"Interface and data handling between R and the generated C code","title":"rxode2 ODE solving syntax","text":"Users specify variables dynamic system’s state variables via d/dt(identifier) operator part model specification, model parameters via params= argument rxode2 solve() method: values variables pre-specified time points saved model fitting/integration returned part fitted values (see function eventTable, particular member function add.sampling function define set time points capture values variables) returned part modeling output. ODE specification mini-language parsed help open source tool DParser, Plevyak (2015).","code":"m1 <- rxode2(model = ode, modName = \"m1\")  # model parameters -- a named vector is required theta <-     c(KA=0.29, CL=18.6, V2=40.2, Q=10.5, V3=297, Kin=1, Kout=1, EC50=200)  # state variables and their amounts at time 0 (the use of names is # encouraged, but not required) inits <- c(depot=0, centr=0, peri=0, eff=1)  # qd1 is an eventTable specification with a set of dosing and sampling  # records (code not shown here)  solve(theta, event = qd1, inits = inits)"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html","id":"supported-functions","dir":"Articles","previous_headings":"","what":"Supported functions","title":"rxode2 ODE solving syntax","text":"supported functions rxode2 can seen rxSupportedFuns(). brief description built-functions following table: Note lag(cmt) = equivalent alag(cmt) = = lag(wt)","code":"#> rxode2 2.0.6 using 1 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()`"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html","id":"reserved-keywords","dir":"Articles","previous_headings":"","what":"Reserved keywords","title":"rxode2 ODE solving syntax","text":"reserved keywords rxode2 model. following table:","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html","id":"bugs-andor-deficiencies","dir":"Articles","previous_headings":"","what":"Bugs and/or deficiencies","title":"rxode2 ODE solving syntax","text":"modulo operator %% currently unsupported.","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-syntax.html","id":"note","dir":"Articles","previous_headings":"","what":"Note","title":"rxode2 ODE solving syntax","text":"ODE specification mini-language parsed help open source tool , Plevyak (2015).","code":""},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-tutorials.html","id":"interactive-tutorials","dir":"Articles","previous_headings":"","what":"Interactive tutorials","title":"Interactive Tutorials","text":"rxode2 comes interactive tutorials can run R session; built Rstudio 1.3 can run R session :","code":"library(rxode2) #> rxode2 2.0.6 using 1 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` ## rxode2 Syntax learnr::run_tutorial(\"rxode2-00-syntax\", \"rxode2\")  ## rxode2 event tables   learnr::run_tutorial(\"rxode2-00-events\", \"rxode2\")"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-wt.html","id":"creating-a-2-compartment-model-in-rxode2","dir":"Articles","previous_headings":"","what":"Creating a 2-compartment model in rxode2","title":"Weight Based Dosing in rxode2","text":"","code":"library(rxode2) #> rxode2 2.0.6 using 1 threads (see ?getRxThreads) #>   no cache: create with `rxCreateCache()` ## Note the time covariate is not included in the simulation m1 <- rxode2({   CL ~ (1-0.2*SEX)*(0.807+0.00514*(CRCL-91.2))*exp(eta.cl)   V1 ~ 4.8*exp(eta.v1)   Q ~ (3.46+0.0593*(WT-75.1))*exp(eta.q);   V2 ~ 1.93*(3.13+0.0458*(WT-75.1))*exp(eta.v2)   A1 ~ centr;   A2 ~ peri;   d/dt(centr) ~ - A1*(CL/V1 + Q/V1) + A2*Q/V2;   d/dt(peri) ~ A1*Q/V1 - A2*Q/V2;   DV = centr / V1 * (1 + prop.err) })"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-wt.html","id":"simulating-covariates","dir":"Articles","previous_headings":"","what":"Simulating Covariates","title":"Weight Based Dosing in rxode2","text":"simulation correlates age, sex, weight. Since using weight based dosing, needs simulated first","code":"set.seed(42) rxSetSeed(42) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union nsub=30 # Simulate Weight based on age and gender AGE<-round(runif(nsub,min=18,max=70)) SEX<-round(runif(nsub,min=0,max=1)) HTm<-round(rnorm(nsub,176.3,0.17*sqrt(4482)),digits=1) HTf<-round(rnorm(nsub,162.2,0.16*sqrt(4857)),digits=1) WTm<-round(exp(3.28+1.92*log(HTm/100))*exp(rnorm(nsub,0,0.14)),digits=1) WTf<-round(exp(3.49+1.45*log(HTf/100))*exp(rnorm(nsub,0,0.17)),digits=1) WT<-ifelse(SEX==1,WTf,WTm) CRCL<-round(runif(nsub,30,140)) ## id is in lower case to match the event table cov.df <- tibble(id=seq_along(AGE), AGE=AGE, SEX=SEX, WT=WT, CRCL=CRCL) print(cov.df) #> # A tibble: 30 x 5 #>       id   AGE   SEX    WT  CRCL #>    <int> <dbl> <dbl> <dbl> <dbl> #>  1     1    66     1  49.4    83 #>  2     2    67     1  52.5    79 #>  3     3    33     0  97.9    37 #>  4     4    61     1  63.8    66 #>  5     5    51     0  71.8   127 #>  6     6    45     1  69.6   132 #>  7     7    56     0  61      73 #>  8     8    25     0  57.7    47 #>  9     9    52     1  58.7    65 #> 10    10    55     1  73.1    64 #> # ... with 20 more rows"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-wt.html","id":"creating-weight-based-event-table","dir":"Articles","previous_headings":"","what":"Creating weight based event table","title":"Weight Based Dosing in rxode2","text":"","code":"s<-c(0,0.25,0.5,0.75,1,1.5,seq(2,24,by=1)) s <- lapply(s, function(x){.x <- 0.1 * x; c(x - .x, x + .x)})  e <- et() %>%     ## Specify the id and weight based dosing from covariate data.frame     ## This requires rxode2 XXX      et(id=cov.df$id, amt=6*cov.df$WT, rate=6 * cov.df$WT) %>%     ## Sampling is added for each ID     et(s) %>%     as.data.frame %>%     ## Merge the event table with the covarite information     merge(cov.df, by=\"id\") %>%     as_tibble   e #> # A tibble: 900 x 12 #>       id    low  time   high cmt         amt  rate  evid   AGE   SEX    WT  CRCL #>    <int>  <dbl> <dbl>  <dbl> <chr>     <dbl> <dbl> <int> <dbl> <dbl> <dbl> <dbl> #>  1     1  0     0      0     (obs)       NA    NA      0    66     1  49.4    83 #>  2     1 NA     0     NA     (default)  296.  296.     1    66     1  49.4    83 #>  3     1  0.225 0.246  0.275 (obs)       NA    NA      0    66     1  49.4    83 #>  4     1  0.45  0.516  0.55  (obs)       NA    NA      0    66     1  49.4    83 #>  5     1  0.675 0.729  0.825 (obs)       NA    NA      0    66     1  49.4    83 #>  6     1  0.9   0.921  1.1   (obs)       NA    NA      0    66     1  49.4    83 #>  7     1  1.35  1.42   1.65  (obs)       NA    NA      0    66     1  49.4    83 #>  8     1  1.8   1.82   2.2   (obs)       NA    NA      0    66     1  49.4    83 #>  9     1  2.7   2.97   3.3   (obs)       NA    NA      0    66     1  49.4    83 #> 10     1  3.6   3.87   4.4   (obs)       NA    NA      0    66     1  49.4    83 #> # ... with 890 more rows"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-wt.html","id":"solving-daptomycin-simulation","dir":"Articles","previous_headings":"","what":"Solving Daptomycin simulation","title":"Weight Based Dosing in rxode2","text":"","code":"data <- rxSolve(m1, e,              ## Lotri uses lower-triangular matrix rep. for named matrix              omega=lotri(eta.cl ~ .306,                           eta.q ~0.0652,                          eta.v1 ~.567,                          eta.v2 ~ .191),              sigma=lotri(prop.err ~ 0.15),              addDosing = TRUE, addCov = TRUE)  print(data) #> -- Solved rxode2 object -- #> -- Parameters ($params): -- #> # A tibble: 30 x 5 #>    id     eta.cl  eta.v1    eta.q  eta.v2 #>    <fct>   <dbl>   <dbl>    <dbl>   <dbl> #>  1 1     -0.437   0.775  -0.0174  -0.245  #>  2 2     -0.0282  0.284   0.294    0.0732 #>  3 3      0.421   0.118  -0.210    0.0272 #>  4 4     -0.489  -0.338   0.181   -0.299  #>  5 5      0.907   0.369  -0.00218 -0.0916 #>  6 6      0.664   0.0865 -0.0508   0.143  #>  7 7     -0.390  -0.466  -0.196   -0.314  #>  8 8     -0.390   0.0103 -0.0412   0.613  #>  9 9     -0.632  -0.569   0.146   -0.198  #> 10 10    -0.392   1.90   -0.0942  -0.181  #> # ... with 20 more rows #> -- Initial Conditions ($inits): -- #> centr  peri  #>     0     0  #> -- First part of data (object): -- #> # A tibble: 900 x 9 #>      id  evid   cmt   amt  time    DV   SEX    WT  CRCL #>   <int> <int> <int> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #> 1     1     1     1  296. 0      0        1  49.4    83 #> 2     1     0    NA   NA  0      0        1  49.4    83 #> 3     1     0    NA   NA  0.246 12.6      1  49.4    83 #> 4     1     0    NA   NA  0.516 22.0      1  49.4    83 #> 5     1     0    NA   NA  0.729 17.5      1  49.4    83 #> 6     1     0    NA   NA  0.921  3.46     1  49.4    83 #> # ... with 894 more rows plot(data, log=\"y\") #> Warning: Transformation introduced infinite values in continuous y-axis"},{"path":"https://nlmixr2.github.io/rxode2/articles/rxode2-wt.html","id":"daptomycin-reference","dir":"Articles","previous_headings":"","what":"Daptomycin Reference","title":"Weight Based Dosing in rxode2","text":"weight-based simulation adapted Daptomycin article : Dvorchik B, Arbeit RD, Chung J, Liu S, Knebel W, Kastrissios H. Population pharmacokinetics daptomycin. Antimicrob Agents Che mother 2004; 48: 2799-2807. doi:(10.1128/AAC.48.8.2799-2807.2004)[https://dx.doi.org/10.1128%2FAAC.48.8.2799-2807.2004] simulation example made available work Sherwin Sy modifications Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors","text":"Matthew L. Fidler (core team/developer/manual) Melissa Hallow (tutorial writer) Wenping Wang (core team/developer)","code":""},{"path":"https://nlmixr2.github.io/rxode2/authors.html","id":"contributors","dir":"","previous_headings":"","what":"Contributors","title":"Authors","text":"Zufar Mulyukov – Wrote initial version rxShiny() modifications Matthew Fidler Alan Hindmarsh – Lsoda author Awad H. Al-Mohy – Al-Mohy matrix exponential author Ernst Hairer – dop853 author Gerhard Wanner – dop853 author Goro Fuji – Timsort author Hadley Wickham – Author original findLhs RxODE, also original author .s3register (used permission anyone, changed Matthew Fidler) Jack Dongarra – LApack author Linda Petzold – LSODA Martin Maechler – expm author, used routines inductive linearization Morwenn – Timsort author Nicholas J. Higham – Author Al-mohy matrix exponential Roger B. Sidje – expokit matrix exponential author Simon Frost – thread safe C implementation liblsoda Kevin Ushey – Original author fast factor, modified Matthew Filder Yu Feng – thread safe liblsoda Matt Dowle – forder primary author (version modified Matthew Fidler allow different type threading exclude grouping) Cleve Moler – LApack author David Cooley – Author fast_factor modified now used RxODE quickly create factors IDs without sorting like R Drew Schmidt – Drew Schmidt author edits exponential matrix utility taken R package expm Arun Srinivasan – forder secondary author (version modified Matthew Fidler allow different type threading, indexing exclude grouping)","code":""},{"path":"https://nlmixr2.github.io/rxode2/authors.html","id":"rxode-acknowledgments","dir":"","previous_headings":"","what":"RxODE acknowledgments:","title":"Authors","text":"Sherwin Sy – Weight based dosing example Justin Wilkins – Documentation updates, logo testing Emma Schwager – R IJK distribution author J Coligne – dop853 fortran author Bill Denney – Documentation updates, manual minor bug fixes Tim Waterhouse – Fixed one bug mac working directories Richard Upton – Helped solving ADVAN linCmt() solutions Dirk Eddelbuettel – Made fixes Rcpp changes require R strict headers Ross Ihaka – R author Robert Gentleman – R author R core team – R authors","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Facilities for Simulating from ODE-Based Models","text":"rxode2 R package solving simulating ode-based models. models convert rxode2 mini-language C create compiled dll fast solving. ODE solving using rxode2 key parts: rxode() creates C code fast ODE solving based simple syntax related Leibnitz notation. NONMEM deSolve compatible data frame, created et() EventTable() easy simulation events data frame can augmented adding time-varying adding individual covariates (iCov= needed) multiple subject data, may parallelized. single subject output data frame adaptive Covariances metrics uncertanty can used simulate solving","code":""},{"path":"https://nlmixr2.github.io/rxode2/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Facilities for Simulating from ODE-Based Models","text":"can install released version rxode2 CRAN : can install development version rxode2 build models rxode2, need working c compiler. use parallel threaded solving rxode2, c compiler needs support open-mp. can check see R working c compiler can check : toolchain, can set described platform information :","code":"install.packages(\"rxode2\") devtools::install_github(\"nlmixr2/rxode2\") ## install.packages(\"pkgbuild\") pkgbuild::has_build_tools(debug = TRUE)"},{"path":"https://nlmixr2.github.io/rxode2/index.html","id":"windows","dir":"","previous_headings":"Installation","what":"Windows","title":"Facilities for Simulating from ODE-Based Models","text":"windows may simply use installr install rtools: Alternatively can download install rtools directly.","code":"install.packages(\"installr\") library(installr) install.rtools()"},{"path":"https://nlmixr2.github.io/rxode2/index.html","id":"mac-osx","dir":"","previous_headings":"Installation","what":"Mac OSX","title":"Facilities for Simulating from ODE-Based Models","text":"get speed need OpenMP enabled compile rxode2 compiler. various options date discussion likely data.table installation faq MacOS. last thing keep mind rxode2 uses code similar original lsoda requires gfortran compiler setup well OpenMP compilers. going using rxode2 nlmixr together older mac computer, suggest trying following: crashes R session binary work Mac machine. able run nlmixr, need compile package manually. proceed assuming homebrew installed system. system terminal need install dependencies compile symengine: installing dependencies, need reinstall symengine:","code":"library(symengine) brew install cmake gmp mpfr libmpc install.packages(\"symengine\", type=\"source\") library(symengine)"},{"path":"https://nlmixr2.github.io/rxode2/index.html","id":"linux","dir":"","previous_headings":"Installation","what":"Linux","title":"Facilities for Simulating from ODE-Based Models","text":"install linux make sure install gcc (openmp support) gfortran using distribution’s package manager.","code":""},{"path":"https://nlmixr2.github.io/rxode2/index.html","id":"development-version","dir":"","previous_headings":"","what":"Development Version","title":"Facilities for Simulating from ODE-Based Models","text":"Since development version rxode2 uses StanHeaders, need make sure compiler setup support C++14, described rstan setup page. R 4.0, believe requires modifying windows toolchain longer (much easier setup). C++ toolchain setup appropriately, can install development version GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"nlmixr2/rxode2\")"},{"path":"https://nlmixr2.github.io/rxode2/index.html","id":"illustrated-example","dir":"","previous_headings":"","what":"Illustrated Example","title":"Facilities for Simulating from ODE-Based Models","text":"model equations can specified text string, model file R expression. differential algebraic equations permitted. Differential equations specified d/dt(var_name) =. equation can separated semicolon. load rxode2 package compile model:","code":"library(rxode2)  mod1 <- rxode2({   C2 <- centr/V2;   C3 <- peri/V3;   d/dt(depot) <- -KA*depot;   d/dt(centr) <- KA*depot - CL*C2 - Q*C2 + Q*C3;   d/dt(peri)  <- Q*C2 - Q*C3;   d/dt(eff)   <- Kin - Kout*(1-C2/(EC50+C2))*eff; }) #>"},{"path":"https://nlmixr2.github.io/rxode2/index.html","id":"specify-ode-parameters-and-initial-conditions","dir":"","previous_headings":"","what":"Specify ODE parameters and initial conditions","title":"Facilities for Simulating from ODE-Based Models","text":"Model parameters can defined named vectors. Names parameters vector must superset parameters ODE model, order parameters within vector important. Initial conditions (ICs) can defined vector well. elements specified, initial condition compartment assumed zero. want specify initial conditions model can add:","code":"theta <-     c(KA=2.94E-01, CL=1.86E+01, V2=4.02E+01, # central       Q=1.05E+01,  V3=2.97E+02,              # peripheral      Kin=1, Kout=1, EC50=200)               # effects inits <- c(eff=1) eff(0) = 1"},{"path":"https://nlmixr2.github.io/rxode2/index.html","id":"specify-dosing-and-sampling-in-rxode2","dir":"","previous_headings":"","what":"Specify Dosing and sampling in rxode2","title":"Facilities for Simulating from ODE-Based Models","text":"rxode2 provides simple flexible way specify dosing sampling functions generate event table. First, empty event table generated “eventTable()” function: Next, use add.dosing() add.sampling() functions EventTable object specify dosing (amounts, frequency /times, etc.) observation times sample state system. functions can called multiple times specify complex dosing sampling regiments. , functions used specify 10mg BID dosing 5 days, followed 20mg QD dosing 5 days: wish can also mattigr pipe operator %>% functions get.dosing() get.sampling() can used retrieve information event table. may notice similar NONMEM event tables; familiar NONMEM data events use directly event table function et can see code, can dose compartment named rxode2 model. slight deviation NONMEM can reduce need compartment renumbering. events can also combined expanded (multi-subject events complex regimens) rbind, c, seq, rep. information creating complex dosing regimens using rxode2 see rxode2 events vignette.","code":"ev <- eventTable(amount.units='mg', time.units='hours') ev$add.dosing(dose=10000, nbr.doses=10, dosing.interval=12) ev$add.dosing(dose=20000, nbr.doses=5, start.time=120,               dosing.interval=24) ev$add.sampling(0:240) ev <- eventTable(amount.units=\"mg\", time.units=\"hours\") %>%   add.dosing(dose=10000, nbr.doses=10, dosing.interval=12) %>%   add.dosing(dose=20000, nbr.doses=5, start.time=120,              dosing.interval=24) %>%   add.sampling(0:240) head(ev$get.dosing()) #>   id low time high       cmt   amt rate ii addl evid ss dur #> 1  1  NA    0   NA (default) 10000    0 12    9    1  0   0 #> 2  1  NA  120   NA (default) 20000    0 24    4    1  0   0 head(ev$get.sampling()) #>   id low time high   cmt amt rate ii addl evid ss dur #> 1  1  NA    0   NA (obs)  NA   NA NA   NA    0 NA  NA #> 2  1  NA    1   NA (obs)  NA   NA NA   NA    0 NA  NA #> 3  1  NA    2   NA (obs)  NA   NA NA   NA    0 NA  NA #> 4  1  NA    3   NA (obs)  NA   NA NA   NA    0 NA  NA #> 5  1  NA    4   NA (obs)  NA   NA NA   NA    0 NA  NA #> 6  1  NA    5   NA (obs)  NA   NA NA   NA    0 NA  NA ev  <- et(amountUnits=\"mg\", timeUnits=\"hours\") %>%   et(amt=10000, addl=9,ii=12,cmt=\"depot\") %>%   et(time=120, amt=2000, addl=4, ii=14, cmt=\"depot\") %>%   et(0:240) # Add sampling"},{"path":"https://nlmixr2.github.io/rxode2/index.html","id":"solving-odes","dir":"","previous_headings":"","what":"Solving ODEs","title":"Facilities for Simulating from ODE-Based Models","text":"ODE can now solved calling model object’s run solve function. Simulation results variables model stored output matrix x. can also solve create rxode2 data frame: returns modified data frame. can see compartment values plot :  ,  Note labels automatically labeled units initial event table. rxode2 extracts units label plot (present).","code":"x <- mod1$solve(theta, ev, inits); knitr::kable(head(x)) x <- mod1 %>% rxSolve(theta, ev, inits); x #> ── Solved rxode2 object ── #> ── Parameters (x$params): ── #>      V2      V3      KA      CL       Q     Kin    Kout    EC50  #>  40.200 297.000   0.294  18.600  10.500   1.000   1.000 200.000  #> ── Initial Conditions (x$inits): ── #> depot centr  peri   eff  #>     0     0     0     1  #> ── First part of data (object): ── #> # A tibble: 241 × 7 #>   time    C2    C3  depot centr  peri   eff #>    [h] <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> #> 1    0   0   0     10000     0     0   1    #> 2    1  44.4 0.920  7453. 1784.  273.  1.08 #> 3    2  54.9 2.67   5554. 2206.  794.  1.18 #> 4    3  51.9 4.46   4140. 2087. 1324.  1.23 #> 5    4  44.5 5.98   3085. 1789. 1776.  1.23 #> 6    5  36.5 7.18   2299. 1467. 2132.  1.21 #> # … with 235 more rows library(ggplot2) plot(x,C2) + ylab(\"Central Concentration\") plot(x,eff)  + ylab(\"Effect\")"},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/index.html","id":"ode-solving","dir":"","previous_headings":"","what":"ODE solving","title":"Facilities for Simulating from ODE-Based Models","text":"brief comparison pharmacometric ODE solving R packages rxode2. several R packages differential equations. popular deSolve. However pharmacometrics-specific ODE solving, 2 packages rxode2 released CRAN. uses compiled code faster ODE solving. mrgsolve, uses C++ lsoda solver solve ODE systems. user required write hybrid R/C++ code create mrgsolve model translated C++ solving. contrast, rxode2 R-like mini-language parsed C code solves ODE system. Unlike rxode2, mrgsolve currently support symbolic manipulation ODE systems, like automatic Jacobian calculation forward sensitivity calculation (rxode2 currently supports basis nlmixr2’s FOCEi algorithm) dMod, uses unique syntax create “reactions”. reactions create underlying ODEs created c code compiled deSolve model. contrast rxode2 defines ODE systems lower level. rxode2’s parsing mini-language comes C, whereas dMod’s parsing comes R. Like rxode2, dMod supports symbolic manipulation ODE systems calculates forward sensitivities adjoint sensitivities systems. Unlike rxode2, dMod thread-safe since deSolve yet thread-safe. PKPDsim defines models R-like syntax converts system compiled code. Like mrgsolve, PKPDsim currently support symbolic manipulation ODE systems. PKPDsim thread-safe. open pharmacometrics open source community fairly friendly, rxode2 maintainers positive interactions ODE-solving pharmacometric projects listed.","code":""},{"path":"https://nlmixr2.github.io/rxode2/index.html","id":"pk-solved-systems","dir":"","previous_headings":"","what":"PK Solved systems","title":"Facilities for Simulating from ODE-Based Models","text":"rxode2 supports 1-3 compartment models gradients (using stan math’s auto-differentiation). currently uses equations PKADVAN allow time-varying covariates. rxode2 can mix ODEs solved systems.","code":""},{"path":"https://nlmixr2.github.io/rxode2/index.html","id":"the-following-packages-for-solved-pk-systems-are-on-cran","dir":"","previous_headings":"PK Solved systems","what":"The following packages for solved PK systems are on CRAN","title":"Facilities for Simulating from ODE-Based Models","text":"mrgsolve currently 1-2 compartment (poly-exponential models) models built-. solved systems ODEs currently mixed. pmxTools currently 1-3 compartment (super-positioning) models built-. R-implementation. PKPDsim uses 1-3 “ADVAN” solutions using non-superpositioning. PKPDmodels one-compartment model gradients.","code":""},{"path":"https://nlmixr2.github.io/rxode2/index.html","id":"non-cran-libraries","dir":"","previous_headings":"PK Solved systems","what":"Non-CRAN libraries:","title":"Facilities for Simulating from ODE-Based Models","text":"PKADVAN Provides 1-3 compartment models using non-superpositioning. allows time-varying covariates.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/add.dosing.html","id":null,"dir":"Reference","previous_headings":"","what":"Add dosing to eventTable — add.dosing","title":"Add dosing to eventTable — add.dosing","text":"adds dosing event event table.  provided piping syntax magrittr.  can also accessed eventTable$add.dosing(...)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/add.dosing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add dosing to eventTable — add.dosing","text":"","code":"add.dosing(   eventTable,   dose,   nbr.doses = 1L,   dosing.interval = 24,   dosing.to = 1L,   rate = NULL,   amount.units = NA_character_,   start.time = 0,   do.sampling = FALSE,   time.units = NA_character_,   ... )"},{"path":"https://nlmixr2.github.io/rxode2/reference/add.dosing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add dosing to eventTable — add.dosing","text":"eventTable eventTable object; accessed object eventTable$ dose numeric scalar, dose amount amount.units; nbr.doses integer, number doses; dosing.interval required numeric scalar, time doses time.units, defaults 24 time.units=\"hours\"; dosing.integer, compartment dose goes (first compartment default); rate infusions, rate infusion (default NULL, bolus dosing; amount.units optional string indicating dosing units. Defaults NA indicate per original EventTable definition. start.time required dosing start time; .sampling logical, observation sampling records added dosing times? Defaults FALSE. time.units optional string indicating time units. Defaults \"hours\" indicate per original EventTable definition. ... parameters passed et().","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/add.dosing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add dosing to eventTable — add.dosing","text":"eventTable updated dosing (note event table updated anyway)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/add.dosing.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add dosing to eventTable — add.dosing","text":"Wang W, Hallow K, James D (2015). \"Tutorial rxode2: Simulating Differential Equation Pharmacometric Models R.\" CPT: Pharmacometrics \\& Systems Pharmacology, 5(1), 3-10. ISSN 2163-8306, <URL: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4728294/>.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/add.dosing.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add dosing to eventTable — add.dosing","text":"Matthew L. Fidler Matthew L Fidler, Wenping Wang","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/add.dosing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add dosing to eventTable — add.dosing","text":"","code":"# \\donttest{  library(rxode2) library(units) #> udunits database from /usr/share/xml/udunits/udunits2.xml  ## Model from rxode2 tutorial mod1 <-rxode2({     KA=2.94E-01;     CL=1.86E+01;     V2=4.02E+01;     Q=1.05E+01;     V3=2.97E+02;     Kin=1;     Kout=1;     EC50=200;     C2 = centr/V2;     C3 = peri/V3;     d/dt(depot) =-KA*depot;     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;     d/dt(peri)  =                    Q*C2 - Q*C3;     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff; }); #>    ## These are making the more complex regimens of the rxode2 tutorial  ## bid for 5 days bid <- et(timeUnits=\"hr\") %>%        et(amt=10000,ii=12,until=set_units(5, \"days\"))  ## qd for 5 days qd <- et(timeUnits=\"hr\") %>%       et(amt=20000,ii=24,until=set_units(5, \"days\"))  ## bid for 5 days followed by qd for 5 days  et <- seq(bid,qd) %>% et(seq(0,11*24,length.out=100));  bidQd <- rxSolve(mod1, et)  plot(bidQd, C2)    ## Now Infusion for 5 days followed by oral for 5 days  ##  note you can dose to a named compartment instead of using the compartment number infusion <- et(timeUnits = \"hr\") %>%       et(amt=10000, rate=5000, ii=24, until=set_units(5, \"days\"), cmt=\"centr\")   qd <- et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(5, \"days\"), cmt=\"depot\")  et <- seq(infusion,qd)  infusionQd <- rxSolve(mod1, et)  plot(infusionQd, C2)   ## 2wk-on, 1wk-off  qd <- et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(2, \"weeks\"), cmt=\"depot\")  et <- seq(qd, set_units(1,\"weeks\"), qd) %>%      add.sampling(set_units(seq(0, 5.5,by=0.005),weeks))  wkOnOff <- rxSolve(mod1, et)  plot(wkOnOff, C2)   ## You can also repeat the cycle easily with the rep function  qd <-et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(2, \"weeks\"), cmt=\"depot\")  et <- etRep(qd, times=4, wait=set_units(1,\"weeks\")) %>%      add.sampling(set_units(seq(0, 12.5,by=0.005),weeks))  repCycle4 <- rxSolve(mod1, et)  plot(repCycle4, C2)   # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/add.sampling.html","id":null,"dir":"Reference","previous_headings":"","what":"Add sampling to eventTable — add.sampling","title":"Add sampling to eventTable — add.sampling","text":"adds dosing event event table.  provided piping syntax magrittr.  can also accessed eventTable$add.sampling()","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/add.sampling.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add sampling to eventTable — add.sampling","text":"","code":"add.sampling(eventTable, time, time.units = NA)"},{"path":"https://nlmixr2.github.io/rxode2/reference/add.sampling.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add sampling to eventTable — add.sampling","text":"eventTable eventTable object. accessed object eventTable$ time vector time values (time.units). time.units optional string specifying time units. Defaults units specified EventTable initialized.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/add.sampling.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add sampling to eventTable — add.sampling","text":"eventTable updated sampling.  (Note event table updated even reassign eventTable)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/add.sampling.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add sampling to eventTable — add.sampling","text":"Wang W, Hallow K, James D (2015). \"Tutorial rxode2: Simulating Differential Equation Pharmacometric Models R.\" CPT: Pharmacometrics \\& Systems Pharmacology, 5(1), 3-10. ISSN 2163-8306, <URL: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4728294/>.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/add.sampling.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add sampling to eventTable — add.sampling","text":"Matthew L Fidler, Wenping Wang","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/add.sampling.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add sampling to eventTable — add.sampling","text":"","code":"# \\donttest{  library(rxode2) library(units)  ## Model from rxode2 tutorial mod1 <-rxode2({     KA=2.94E-01;     CL=1.86E+01;     V2=4.02E+01;     Q=1.05E+01;     V3=2.97E+02;     Kin=1;     Kout=1;     EC50=200;     C2 = centr/V2;     C3 = peri/V3;     d/dt(depot) =-KA*depot;     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;     d/dt(peri)  =                    Q*C2 - Q*C3;     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff; }); #>    ## These are making the more complex regimens of the rxode2 tutorial  ## bid for 5 days bid <- et(timeUnits=\"hr\") %>%        et(amt=10000,ii=12,until=set_units(5, \"days\"))  ## qd for 5 days qd <- et(timeUnits=\"hr\") %>%       et(amt=20000,ii=24,until=set_units(5, \"days\"))  ## bid for 5 days followed by qd for 5 days  et <- seq(bid,qd) %>% et(seq(0,11*24,length.out=100));  bidQd <- rxSolve(mod1, et)  plot(bidQd, C2)    ## Now Infusion for 5 days followed by oral for 5 days  ##  note you can dose to a named compartment instead of using the compartment number infusion <- et(timeUnits = \"hr\") %>%       et(amt=10000, rate=5000, ii=24, until=set_units(5, \"days\"), cmt=\"centr\")   qd <- et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(5, \"days\"), cmt=\"depot\")  et <- seq(infusion,qd)  infusionQd <- rxSolve(mod1, et)  plot(infusionQd, C2)   ## 2wk-on, 1wk-off  qd <- et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(2, \"weeks\"), cmt=\"depot\")  et <- seq(qd, set_units(1,\"weeks\"), qd) %>%      add.sampling(set_units(seq(0, 5.5,by=0.005),weeks))  wkOnOff <- rxSolve(mod1, et)  plot(wkOnOff, C2)   ## You can also repeat the cycle easily with the rep function  qd <-et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(2, \"weeks\"), cmt=\"depot\")  et <- etRep(qd, times=4, wait=set_units(1,\"weeks\")) %>%      add.sampling(set_units(seq(0, 12.5,by=0.005),weeks))  repCycle4 <- rxSolve(mod1, et)  plot(repCycle4, C2)   # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/as.et.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce object to data.frame — as.et","title":"Coerce object to data.frame — as.et","text":"Coerce object data.frame","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/as.et.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce object to data.frame — as.et","text":"","code":"as.et(x, ...)  # S3 method for default as.et(x, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/as.et.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce object to data.frame — as.et","text":"x Object coerce et. ... parameters","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/as.et.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce object to data.frame — as.et","text":"event table","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/assertRxUi.html","id":null,"dir":"Reference","previous_headings":"","what":"Assert properties of the rxUi models — assertRxUi","title":"Assert properties of the rxUi models — assertRxUi","text":"Assert properties rxUi models","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/assertRxUi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assert properties of the rxUi models — assertRxUi","text":"","code":"assertRxUi(model, extra = \"\", .var.name = .vname(model))  assertRxUiPrediction(model, extra = \"\", .var.name = .vname(model))  assertRxUiSingleEndpoint(model, extra = \"\", .var.name = .vname(model))  assertRxUiTransformNormal(model, extra = \"\", .var.name = .vname(model))  assertRxUiNormal(model, extra = \"\", .var.name = .vname(model))  assertRxUiMuRefOnly(model, extra = \"\", .var.name = .vname(model))  assertRxUiEstimatedResiduals(model, extra = \"\", .var.name = .vname(model))  assertRxUiPopulationOnly(model, extra = \"\", .var.name = .vname(model))  assertRxUiMixedOnly(model, extra = \"\", .var.name = .vname(model))  assertRxUiRandomOnIdOnly(model, extra = \"\", .var.name = .vname(model))"},{"path":"https://nlmixr2.github.io/rxode2/reference/assertRxUi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assert properties of the rxUi models — assertRxUi","text":"model Model check extra Extra text append error message (like \"focei\") .var.name [character(1)] Name checked object print assertions. Defaults heuristic implemented vname.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/assertRxUi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assert properties of the rxUi models — assertRxUi","text":"rxUi model","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/assertRxUi.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assert properties of the rxUi models — assertRxUi","text":"functions different types assertions assertRxUi -- Make sure proper rxode2 model (throw error) assertRxUiSingleEndpoint -- Make sure rxode2 model single endpoint model (throw error) assertRxUiTransformNormal -- needs normal transformably normal residual distribution assertRxUiNormal -- needs normal residual distribution assertRxUiEstimatedResiduals -- makes sure residual error parameter estimated (modeled). assertRxUiPopulationOnly -- makes sure model population model (mixed effects) assertRxUiMixedOnly -- makes sure model mixed effect model (population effect) assertRxUiPrediction -- makes sure model predictions assertRxUiMuRefOnly -- make sure parameters mu-referenced assertRxUiRandomOnIdOnly -- makes sure random effects ID level","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/assertRxUi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assert properties of the rxUi models — assertRxUi","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/assertRxUi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assert properties of the rxUi models — assertRxUi","text":"","code":"one.cmt <- function() {  ini({    ## You may label each parameter with a comment    tka <- 0.45 # Ka    tcl <- log(c(0, 2.7, 100)) # Log Cl    ## This works with interactive models    ## You may also label the preceding line with label(\"label text\")    tv <- 3.45; label(\"log V\")    ## the label(\"Label name\") works with all models    eta.ka ~ 0.6    eta.cl ~ 0.3    eta.v ~ 0.1    add.sd <- 0.7  })  model({    ka <- exp(tka + eta.ka)    cl <- exp(tcl + eta.cl)    v <- exp(tv + eta.v)     linCmt() ~ add(add.sd)  }) }  assertRxUi(one.cmt) #>   #> ℹ parameter labels from comments will be replaced by 'label()' # assertRxUi(rnorm) # will fail  assertRxUiSingleEndpoint(one.cmt) #>   #> ℹ parameter labels from comments will be replaced by 'label()'"},{"path":"https://nlmixr2.github.io/rxode2/reference/coef.rxode2.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the rxode2 coefficients — coef.rxode2","title":"Return the rxode2 coefficients — coef.rxode2","text":"returns parameters , state variables","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/coef.rxode2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the rxode2 coefficients — coef.rxode2","text":"","code":"# S3 method for rxode2 coef(object, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/coef.rxode2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the rxode2 coefficients — coef.rxode2","text":"object rxode2 object ... ignored arguments","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/coef.rxode2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the rxode2 coefficients — coef.rxode2","text":"rxCoef object following params  list strings parameters rxode2 object state list strings names state rxode2 object. ini model specified default values parameters. rxode2 referring rxode2 object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/coef.rxode2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return the rxode2 coefficients — coef.rxode2","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/cvPost.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"Note Inverse wishart rescaled match original scale covariance matrix.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/cvPost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"","code":"cvPost(   nu,   omega,   n = 1L,   omegaIsChol = FALSE,   returnChol = FALSE,   type = c(\"invWishart\", \"lkj\", \"separation\"),   diagXformType = c(\"log\", \"identity\", \"variance\", \"nlmixrSqrt\", \"nlmixrLog\",     \"nlmixrIdentity\") )"},{"path":"https://nlmixr2.github.io/rxode2/reference/cvPost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"nu Degrees Freedom (Number Observations) covariance matrix simulation. omega Either estimate covariance matrix estimated standard deviations matrix form row forming standard deviation simulated values n Number Matrices sample.  default 1. useful omega matrix.  Otherwise determined number rows input omega matrix standard deviations omegaIsChol indicator omega matrix Cholesky decomposition. used codetype=\"invWishart\" returnChol Return Cholesky decomposition covariance matrix sample. used codetype=\"invWishart\" type type covariance posterior simulated.  can : invWishart posterior inverse wishart; allows correlations parameters modeled.  uncertainty parameter captured degrees freedom parameter. lkj posterior separates standard deviation estimates (modeled outside provided omega argument) correlation estimates. correlation estimate simulated rLKJ1().  simulation uses relationship eta=(nu-1)/2.  relationship based proof relationship restricted LKJ-distribution inverse wishart distribution (XXXXXX).  correlation posterior calculated, estimated standard deviations combined simulated correlation matrix create covariance matrix. separation Like lkj option, separates estimation correlation standard deviation.  Instead using LKJ distribution simulate correlation, simulates inverse wishart identity matrix converts result correlation matrix.  correlation matrix used standard deviation calculate simulated covariance matrix. diagXformType Diagonal transformation type.  : log standard deviations log transformed, actual standard deviations exp(omega) identity standard deviations transformed. standard deviations transformed;  positive. variance variances specified omega matrix; transformed standard deviations. nlmixrSqrt standard deviations come nlmixr omega matrix diag(chol(inv(omega))) = x^2 nlmixrLog standard deviations come nlmixr omega matrix omega matrix diag(chol(solve(omega))) = exp(x) nlmixrIdentity standard deviations come nlmixr omega matrix omega matrix diag(chol(solve(omega))) = x nlmixr transformations make sense -diagonal correlations modeled.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/cvPost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"matrix (n=1) list matrices  (n > 1)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/cvPost.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"covariance matrix 1x1 matrix, uses scaled inverse chi-squared equivalent Inverse Wishart distribution uni-directional case. general, separation strategy preferred diagonal matrices.  dimension matrix 10, lkj numerically faster separation method.  However, lkj method densities close zero (XXXX) dimension 10.  case, though computationally expensive separation method performs better. matrices modeled covariances, easiest method use inverse Wishart allows simulation correlation matrices (XXXX).  method well suited well behaved matrices, variance components low high.  modeling nonlinear mixed effects modeling matrices high low variances considered sub-optimal describing system.  rules mind, reasonable use inverse Wishart.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/cvPost.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"Alvarez , Niemi J Simpson M. (2014) Bayesian Inference Covariance Matrix. Conference Applied Statistics Agriculture. https://newprairiepress.org/cgi/viewcontent.cgi?article=1004&context=agstatconference Wang1 Z, Wu Y, Chu H. (2018) Equivalence LKJ distribution restricted Wishart distribution. arXiv:1809.04746","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/cvPost.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"Matthew L.Fidler & Wenping Wang","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/cvPost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample a covariance Matrix from the Posterior Inverse Wishart\ndistribution. — cvPost","text":"","code":"## Sample a single covariance. draw1 <- cvPost(3, matrix(c(1, .3, .3, 1), 2, 2))  ## Sample 3 covariances set.seed(42) draw3 <- cvPost(3, matrix(c(1, .3, .3, 1), 2, 2), n = 3)  ## Sample 3 covariances, but return the cholesky decomposition set.seed(42) draw3c <- cvPost(3, matrix(c(1, .3, .3, 1), 2, 2), n = 3, returnChol = TRUE)  ## Sample 3 covariances with lognormal standard deviations via LKJ ## correlation sample cvPost(3, sapply(1:3, function(...) {   rnorm(10) }), type = \"lkj\") #> [[1]] #>           [,1]      [,2]      [,3] #> [1,] 96.862339 0.7748630 -4.626203 #> [2,]  0.774863 0.0283645  0.119055 #> [3,] -4.626203 0.1190550  4.094623 #>  #> [[2]] #>             [,1]       [,2]       [,3] #> [1,]  0.06218003 0.05815138 -0.5246680 #> [2,]  0.05815138 0.70904612  0.3915278 #> [3,] -0.52466798 0.39152780  7.9264641 #>  #> [[3]] #>            [,1]       [,2]       [,3] #> [1,]  0.5725945 -0.7039115  0.3184467 #> [2,] -0.7039115 11.3514944 -0.9360070 #> [3,]  0.3184467 -0.9360070  0.2958648 #>  #> [[4]] #>            [,1]      [,2]       [,3] #> [1,]  0.7659467 -2.803861  0.3011139 #> [2,] -2.8038607 44.273527 -9.4665546 #> [3,]  0.3011139 -9.466555  2.7453546 #>  #> [[5]] #>            [,1]        [,2]        [,3] #> [1,] 3.56762745  0.07176028  0.13656513 #> [2,] 0.07176028  0.42276523 -0.02050365 #> [3,] 0.13656513 -0.02050365  0.03225709 #>  #> [[6]] #>           [,1]      [,2]      [,3] #> [1,] 0.5663711 0.0340262 0.1454173 #> [2,] 0.0340262 0.5977762 0.3269646 #> [3,] 0.1454173 0.3269646 0.2082704 #>  #> [[7]] #>              [,1]         [,2]         [,3] #> [1,]  0.004927562 -0.002843181  0.005520158 #> [2,] -0.002843181  0.029412775 -0.013463952 #> [3,]  0.005520158 -0.013463952  0.182352220 #>  #> [[8]] #>              [,1]        [,2]         [,3] #> [1,]  0.007589923 -0.06216448  0.002859140 #> [2,] -0.062164482  2.50977902 -0.118417072 #> [3,]  0.002859140 -0.11841707  0.007999188 #>  #> [[9]] #>            [,1]       [,2]       [,3] #> [1,] 14.0163806  1.2051675  0.8401261 #> [2,]  1.2051675  0.2780401 -0.1994978 #> [3,]  0.8401261 -0.1994978  1.0749189 #>  #> [[10]] #>            [,1]       [,2]       [,3] #> [1,]  0.5415731 -0.7109454  0.4040513 #> [2,] -0.7109454  2.4865600 -0.4319643 #> [3,]  0.4040513 -0.4319643  1.5098302 #>   ## or return cholesky decomposition cvPost(3, sapply(1:3, function(...) {   rnorm(10) }), type = \"lkj\", returnChol = TRUE ) #> [[1]] #>         [,1]      [,2]       [,3] #> [1,] 1.86548 0.9644577 -1.1377549 #> [2,] 0.00000 0.5131372  0.7633548 #> [3,] 0.00000 0.0000000  1.3396488 #>  #> [[2]] #>           [,1]       [,2]      [,3] #> [1,] 0.3853808 -0.2396288 0.2759888 #> [2,] 0.0000000  0.8531100 0.3904699 #> [3,] 0.0000000  0.0000000 3.9907672 #>  #> [[3]] #>           [,1]       [,2]        [,3] #> [1,] 0.5811021 0.02348261 0.040235833 #> [2,] 0.0000000 0.30199556 0.006542798 #> [3,] 0.0000000 0.00000000 0.326766208 #>  #> [[4]] #>          [,1]       [,2]       [,3] #> [1,] 1.787819 -0.5701632 0.02973627 #> [2,] 0.000000  1.7537550 0.16276115 #> [3,] 0.000000  0.0000000 0.38911063 #>  #> [[5]] #>          [,1]       [,2]        [,3] #> [1,] 2.155836 -0.1976721 -0.27043101 #> [2,] 0.000000  0.7801646  0.06882305 #> [3,] 0.000000  0.0000000  0.16161284 #>  #> [[6]] #>          [,1]       [,2]        [,3] #> [1,] 1.590053 0.07434835 -0.17317880 #> [2,] 0.000000 0.82964610  0.13403995 #> [3,] 0.000000 0.00000000  0.07785199 #>  #> [[7]] #>           [,1]      [,2]       [,3] #> [1,] 0.4123939 0.2062854 -0.8475394 #> [2,] 0.0000000 2.5346241  0.4594744 #> [3,] 0.0000000 0.0000000  0.4939941 #>  #> [[8]] #>          [,1]       [,2]         [,3] #> [1,] 0.332944 -0.6235242 -0.002281778 #> [2,] 0.000000  2.1873959  0.885067020 #> [3,] 0.000000  0.0000000  1.705736993 #>  #> [[9]] #>          [,1]      [,2]      [,3] #> [1,] 4.539001 0.4690774 -2.300368 #> [2,] 0.000000 3.9959179 -1.030652 #> [3,] 0.000000 0.0000000  2.165767 #>  #> [[10]] #>          [,1]         [,2]      [,3] #> [1,] 1.294237 2.545228e-05 -0.891757 #> [2,] 0.000000 6.211554e-01 -1.993399 #> [3,] 0.000000 0.000000e+00  1.819896 #>   ## Sample 3 covariances with lognormal standard deviations via separation ## strategy using inverse Wishart correlation sample cvPost(3, sapply(1:3, function(...) {   rnorm(10) }), type = \"separation\") #> [[1]] #>            [,1]       [,2]        [,3] #> [1,] 17.8091343 0.73461953 -1.39358522 #> [2,]  0.7346195 0.43703688  0.08246014 #> [3,] -1.3935852 0.08246014  0.39231482 #>  #> [[2]] #>             [,1]       [,2]        [,3] #> [1,]  0.11144462  0.2079765 -0.08551474 #> [2,]  0.20797652  9.2698949 -0.16544961 #> [3,] -0.08551474 -0.1654496  0.08403645 #>  #> [[3]] #>            [,1]       [,2]       [,3] #> [1,]  0.7908562 -0.5415399 -0.8590748 #> [2,] -0.5415399  0.3821333  0.5923616 #> [3,] -0.8590748  0.5923616  0.9845958 #>  #> [[4]] #>            [,1]        [,2]        [,3] #> [1,] 11.0562602  0.33123520  1.27030624 #> [2,]  0.3312352  0.42048853 -0.01175715 #> [3,]  1.2703062 -0.01175715  0.20178261 #>  #> [[5]] #>           [,1]     [,2]      [,3] #> [1,] 0.3908392 1.232200 0.3605851 #> [2,] 1.2321999 4.029834 1.1549621 #> [3,] 0.3605851 1.154962 0.3440444 #>  #> [[6]] #>           [,1]      [,2]       [,3] #> [1,] 0.9003795 0.2147410  3.1855956 #> [2,] 0.2147410 0.1209066  0.7990146 #> [3,] 3.1855956 0.7990146 13.1359204 #>  #> [[7]] #>            [,1]       [,2]       [,3] #> [1,]  0.8417985 -0.8216620 -0.7381474 #> [2,] -0.8216620  0.9218277  0.7890609 #> [3,] -0.7381474  0.7890609  0.7039473 #>  #> [[8]] #>             [,1]        [,2]        [,3] #> [1,]  0.16942278  0.01244557 -0.01024524 #> [2,]  0.01244557  0.04491023 -0.07210998 #> [3,] -0.01024524 -0.07210998  0.11723618 #>  #> [[9]] #>            [,1]      [,2]       [,3] #> [1,]  0.4109154 -1.842263 -0.7241764 #> [2,] -1.8422630 10.322635  3.4070393 #> [3,] -0.7241764  3.407039  1.3859887 #>  #> [[10]] #>            [,1]       [,2]       [,3] #> [1,]  0.9428107 -0.7354081  0.6621306 #> [2,] -0.7354081  0.5785147 -0.5232715 #> [3,]  0.6621306 -0.5232715  0.4840937 #>   ## or returning the cholesky decomposition cvPost(3, sapply(1:3, function(...) {   rnorm(10) }), type = \"separation\", returnChol = TRUE ) #> [[1]] #>           [,1]       [,2]       [,3] #> [1,] 0.5361344 -0.5646490 -1.2157714 #> [2,] 0.0000000  0.2706145  0.7833376 #> [3,] 0.0000000  0.0000000  1.4143150 #>  #> [[2]] #>           [,1]       [,2]       [,3] #> [1,] 0.4763222 -0.1686305 -0.2638639 #> [2,] 0.0000000  0.3953129  0.2370631 #> [3,] 0.0000000  0.0000000  0.2553825 #>  #> [[3]] #>          [,1]       [,2]        [,3] #> [1,] 1.457362 -0.1565739 0.003957496 #> [2,] 0.000000  0.2969488 0.004259446 #> [3,] 0.000000  0.0000000 0.034623292 #>  #> [[4]] #>           [,1]      [,2]       [,3] #> [1,] 0.2697727 0.1901255  0.1775689 #> [2,] 0.0000000 0.1863785 -0.4415488 #> [3,] 0.0000000 0.0000000  1.3256841 #>  #> [[5]] #>          [,1]       [,2]       [,3] #> [1,] 1.081252 -0.2458460 0.05591077 #> [2,] 0.000000  0.4958417 0.11182166 #> [3,] 0.000000  0.0000000 0.07342814 #>  #> [[6]] #>           [,1]      [,2]       [,3] #> [1,] 0.4513931 -1.555660  0.9059502 #> [2,] 0.0000000  1.430568 -0.3169197 #> [3,] 0.0000000  0.000000  0.7111382 #>  #> [[7]] #>          [,1]      [,2]       [,3] #> [1,] 5.850312 0.3103629 -3.1410818 #> [2,] 0.000000 0.3115511  0.2156489 #> [3,] 0.000000 0.0000000  2.5678462 #>  #> [[8]] #>           [,1]        [,2]        [,3] #> [1,] 0.3920281 -0.17091427  1.44657948 #> [2,] 0.0000000  0.01081568 -0.09688330 #> [3,] 0.0000000  0.00000000  0.08276372 #>  #> [[9]] #>          [,1]       [,2]       [,3] #> [1,] 2.021659 -0.6427884  0.8126606 #> [2,] 0.000000  0.2158093 -0.3291584 #> [3,] 0.000000  0.0000000  0.3722985 #>  #> [[10]] #>           [,1]      [,2]      [,3] #> [1,] 0.4696165 0.1467044 -1.908483 #> [2,] 0.0000000 0.4906213  3.952318 #> [3,] 0.0000000 0.0000000 10.894538 #>"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-clearPipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear/Set pipeline — .clearPipe","title":"Clear/Set pipeline — .clearPipe","text":"Clear/Set pipeline","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-clearPipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear/Set pipeline — .clearPipe","text":"","code":".clearPipe(   rx = NULL,   inits = NULL,   events = NULL,   params = NULL,   iCov = NULL,   keep = NULL,   thetaMat = NULL,   omega = NULL,   sigma = NULL,   dfObs = NULL,   dfSub = NULL,   nSub = NULL,   nStud = NULL )"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-clearPipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear/Set pipeline — .clearPipe","text":"rx rxode2 object inits vector initial values state variables (e.g., amounts compartment), order vector must state variables (e.g., PK/PD compartments); events eventTable object describing input (e.g., doses) dynamic system observation sampling time points (see eventTable()); params numeric named vector values every parameter ODE system; names must correspond parameter identifiers used ODE specification; iCov data frame individual non-time varying covariates combine events dataset merge. keep Columns keep either input dataset iCov dataset.  iCov dataset, column kept per line.  input dataset, records added data LOCF (Last Observation Carried forward) imputation performed. thetaMat Named theta matrix. omega Estimate Covariance matrix. omega list, assume block matrix convert full matrix simulations.  omega NA using rxode2 ui model, subject variability described omega matrix set zero. sigma Named sigma covariance Cholesky decomposition covariance matrix.  names columns indicate parameters simulated.  simulated every observation solved system. sigma NA using rxode2 ui model, unexplained variability described sigma matrix set zero. dfObs Degrees freedom sample unexplained variability matrix inverse Wishart distribution (scaled) scaled inverse chi squared distribution. dfSub Degrees freedom sample subject variability matrix inverse Wishart distribution (scaled) scaled inverse chi squared distribution. nSub Number subject variabilities (ETAs) simulated every realization parameters. nStud Number virtual studies characterize uncertainty estimated parameters.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-clearPipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear/Set pipeline — .clearPipe","text":"None, clears rxode2 pipeline","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-copyUi.html","id":null,"dir":"Reference","previous_headings":"","what":"This copies the rxode2 UI object so it can be modified — .copyUi","title":"This copies the rxode2 UI object so it can be modified — .copyUi","text":"copies rxode2 UI object can modified","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-copyUi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This copies the rxode2 UI object so it can be modified — .copyUi","text":"","code":".copyUi(ui)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-copyUi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This copies the rxode2 UI object so it can be modified — .copyUi","text":"ui Original UI object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-copyUi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This copies the rxode2 UI object so it can be modified — .copyUi","text":"Copied UI object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-copyUi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This copies the rxode2 UI object so it can be modified — .copyUi","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-getLastIdLvl.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the last idLvl — .getLastIdLvl","title":"Get the last idLvl — .getLastIdLvl","text":"Get last idLvl","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-getLastIdLvl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the last idLvl — .getLastIdLvl","text":"","code":".getLastIdLvl()"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-getLastIdLvl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the last idLvl — .getLastIdLvl","text":"Last idLvl","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-getLastIdLvl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the last idLvl — .getLastIdLvl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-getLastIdLvl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the last idLvl — .getLastIdLvl","text":"","code":".getLastIdLvl() #> NULL"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-handleSingleErrTypeNormOrTFoceiBase.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle the single error for normal or t distributions — .handleSingleErrTypeNormOrTFoceiBase","title":"Handle the single error for normal or t distributions — .handleSingleErrTypeNormOrTFoceiBase","text":"Handle single error normal t distributions","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-handleSingleErrTypeNormOrTFoceiBase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle the single error for normal or t distributions — .handleSingleErrTypeNormOrTFoceiBase","text":"","code":".handleSingleErrTypeNormOrTFoceiBase(env, pred1)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-handleSingleErrTypeNormOrTFoceiBase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle the single error for normal or t distributions — .handleSingleErrTypeNormOrTFoceiBase","text":"env Environment parsed model pred1 data.frame current error","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-handleSingleErrTypeNormOrTFoceiBase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle the single error for normal or t distributions — .handleSingleErrTypeNormOrTFoceiBase","text":"list lines added.  lines contain rx_yj_ integer corresponds transformation type. rx_lambda_ transformation lambda rx_low_ lower boundary transformation rx_hi_ upper boundary transformation rx_pred_f_ prediction function rx_pred_ transformed prediction function rx_r_ transformed variance","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-handleSingleErrTypeNormOrTFoceiBase.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Handle the single error for normal or t distributions — .handleSingleErrTypeNormOrTFoceiBase","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-iniHandleFixOrUnfix.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle Fix or Unfix an expression — .iniHandleFixOrUnfix","title":"Handle Fix or Unfix an expression — .iniHandleFixOrUnfix","text":"update iniDf data frame fixed/unfixed value","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-iniHandleFixOrUnfix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle Fix or Unfix an expression — .iniHandleFixOrUnfix","text":"","code":".iniHandleFixOrUnfix(expr, rxui, envir = parent.frame())"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-iniHandleFixOrUnfix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle Fix or Unfix an expression — .iniHandleFixOrUnfix","text":"expr Expression parsing rxui User interface function envir Environment parsing","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-iniHandleFixOrUnfix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle Fix or Unfix an expression — .iniHandleFixOrUnfix","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-iniHandleFixOrUnfix.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Handle Fix or Unfix an expression — .iniHandleFixOrUnfix","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-minfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal messaging statements — .minfo","title":"Internal messaging statements — .minfo","text":"Internal messaging statements","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-minfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal messaging statements — .minfo","text":"","code":".minfo(text, ..., .envir = parent.frame())  .malert(text, ..., .envir = parent.frame())  .mwarn(text, ..., .envir = parent.frame())  .msuccess(text, ..., .envir = parent.frame())"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-minfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal messaging statements — .minfo","text":"text Text ... arguments .envir Environment evaluate ","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-minfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal messaging statements — .minfo","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-minfo.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal messaging statements — .minfo","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-modelHandleModelLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle model lines — .modelHandleModelLines","title":"Handle model lines — .modelHandleModelLines","text":"Handle model lines","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-modelHandleModelLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle model lines — .modelHandleModelLines","text":"","code":".modelHandleModelLines(   modelLines,   rxui,   modifyIni = FALSE,   append = FALSE,   auto = TRUE,   envir )"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-modelHandleModelLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle model lines — .modelHandleModelLines","text":"modelLines model lines considered rxui rxode2 UI object modifyIni ini() considered append boolean determine lines appended piping.  possible values : TRUE lines appended model instead replaced (default) FALSE lines replaced model NA lines pre-pended model instead replaced auto boolean tells piping automatically selects parameters characterized population parameter, subject variability, covariate.  TRUE automatic selection occurs.  FALSE automatic selection turned everything added covariate (can promoted parameter ini statement). default TRUE, can changed options(rxode2.autoVarPiping=FALSE). envir Environment evaluation","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-modelHandleModelLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle model lines — .modelHandleModelLines","text":"New UI","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-modelHandleModelLines.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Handle model lines — .modelHandleModelLines","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-quoteCallInfoLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns quoted call information — .quoteCallInfoLines","title":"Returns quoted call information — .quoteCallInfoLines","text":"Returns quoted call information","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-quoteCallInfoLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns quoted call information — .quoteCallInfoLines","text":"","code":".quoteCallInfoLines(callInfo, envir = parent.frame())"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-quoteCallInfoLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns quoted call information — .quoteCallInfoLines","text":"callInfo Call information envir Environment evaluation (needed)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-quoteCallInfoLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns quoted call information — .quoteCallInfoLines","text":"Quote call information.  name=expression, change name<-expression quoted call list. expressions within brackets ie {}, unlist brackets called one single sequence.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-quoteCallInfoLines.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Returns quoted call information — .quoteCallInfoLines","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetHiBoundaryPred1AndIni.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the upper boundary condition when the transformation it — .rxGetHiBoundaryPred1AndIni","title":"Get the upper boundary condition when the transformation it — .rxGetHiBoundaryPred1AndIni","text":"Get upper boundary condition transformation ","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetHiBoundaryPred1AndIni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the upper boundary condition when the transformation it — .rxGetHiBoundaryPred1AndIni","text":"","code":".rxGetHiBoundaryPred1AndIni(env, pred1)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetHiBoundaryPred1AndIni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the upper boundary condition when the transformation it — .rxGetHiBoundaryPred1AndIni","text":"env Environment parsed model pred1 data.frame current error","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetHiBoundaryPred1AndIni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the upper boundary condition when the transformation it — .rxGetHiBoundaryPred1AndIni","text":"Upper Boundary","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetHiBoundaryPred1AndIni.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the upper boundary condition when the transformation it — .rxGetHiBoundaryPred1AndIni","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetLambdaFromPred1AndIni.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the lambda value based on the pred information — .rxGetLambdaFromPred1AndIni","title":"Get the lambda value based on the pred information — .rxGetLambdaFromPred1AndIni","text":"Get lambda value based pred information","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetLambdaFromPred1AndIni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the lambda value based on the pred information — .rxGetLambdaFromPred1AndIni","text":"","code":".rxGetLambdaFromPred1AndIni(env, pred1)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetLambdaFromPred1AndIni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the lambda value based on the pred information — .rxGetLambdaFromPred1AndIni","text":"env Environment environment pred1 Single error data frame","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetLambdaFromPred1AndIni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the lambda value based on the pred information — .rxGetLambdaFromPred1AndIni","text":"Lambda expression","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetLambdaFromPred1AndIni.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the lambda value based on the pred information — .rxGetLambdaFromPred1AndIni","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetLowBoundaryPred1AndIni.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the lower boundary condition when the transformation requires it — .rxGetLowBoundaryPred1AndIni","title":"Get the lower boundary condition when the transformation requires it — .rxGetLowBoundaryPred1AndIni","text":"Get lower boundary condition transformation requires ","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetLowBoundaryPred1AndIni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the lower boundary condition when the transformation requires it — .rxGetLowBoundaryPred1AndIni","text":"","code":".rxGetLowBoundaryPred1AndIni(env, pred1)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetLowBoundaryPred1AndIni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the lower boundary condition when the transformation requires it — .rxGetLowBoundaryPred1AndIni","text":"env Environment parsed model pred1 data.frame current error","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetLowBoundaryPred1AndIni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the lower boundary condition when the transformation requires it — .rxGetLowBoundaryPred1AndIni","text":"Lower Boundary","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetLowBoundaryPred1AndIni.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the lower boundary condition when the transformation requires it — .rxGetLowBoundaryPred1AndIni","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetPredictionF.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the prediction name — .rxGetPredictionF","title":"Get the prediction name — .rxGetPredictionF","text":"Get prediction name","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetPredictionF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the prediction name — .rxGetPredictionF","text":"","code":".rxGetPredictionF(env, pred1)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetPredictionF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the prediction name — .rxGetPredictionF","text":"env Environment parsed model pred1 data.frame current error","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetPredictionF.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the prediction name — .rxGetPredictionF","text":"prediction symbol","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetPredictionF.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the prediction name — .rxGetPredictionF","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetPredictionFTransform.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the prediction transformation — .rxGetPredictionFTransform","title":"Get the prediction transformation — .rxGetPredictionFTransform","text":"Get prediction transformation","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetPredictionFTransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the prediction transformation — .rxGetPredictionFTransform","text":"","code":".rxGetPredictionFTransform(env, pred1, yj)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetPredictionFTransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the prediction transformation — .rxGetPredictionFTransform","text":"env Environment parsed model pred1 data.frame current error yj transformation number current error","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetPredictionFTransform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the prediction transformation — .rxGetPredictionFTransform","text":"transformation expression","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetPredictionFTransform.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the prediction transformation — .rxGetPredictionFTransform","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetVarianceForErrorType.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Variance for error type — .rxGetVarianceForErrorType","title":"Get Variance for error type — .rxGetVarianceForErrorType","text":"Get Variance error type","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetVarianceForErrorType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Variance for error type — .rxGetVarianceForErrorType","text":"","code":".rxGetVarianceForErrorType(env, pred1)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetVarianceForErrorType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Variance for error type — .rxGetVarianceForErrorType","text":"env Environment pred1 Pred one end-point","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetVarianceForErrorType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Variance for error type — .rxGetVarianceForErrorType","text":"Variance error type","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxGetVarianceForErrorType.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Variance for error type — .rxGetVarianceForErrorType","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxIsLinCmt.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to tell if the linCmt() is the model variables — .rxIsLinCmt","title":"Internal function to tell if the linCmt() is the model variables — .rxIsLinCmt","text":"Internal function tell linCmt() model variables","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxIsLinCmt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to tell if the linCmt() is the model variables — .rxIsLinCmt","text":"","code":".rxIsLinCmt()"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxIsLinCmt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to tell if the linCmt() is the model variables — .rxIsLinCmt","text":"0 1","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxIsLinCmt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal function to tell if the linCmt() is the model variables — .rxIsLinCmt","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxJacobian.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function for calculating the Jacobian — .rxJacobian","title":"Internal function for calculating the Jacobian — .rxJacobian","text":"Internal function calculating Jacobian","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxJacobian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function for calculating the Jacobian — .rxJacobian","text":"","code":".rxJacobian(model, vars = TRUE)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxJacobian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function for calculating the Jacobian — .rxJacobian","text":"model symengine environment vars Variables","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxJacobian.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function for calculating the Jacobian — .rxJacobian","text":"Jacobian informat","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxJacobian.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal function for calculating the Jacobian — .rxJacobian","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxLinCmtGen.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to generate the model variables for a linCmt() model — .rxLinCmtGen","title":"Internal function to generate the model variables for a linCmt() model — .rxLinCmtGen","text":"Internal function generate model variables linCmt() model","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxLinCmtGen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to generate the model variables for a linCmt() model — .rxLinCmtGen","text":"","code":".rxLinCmtGen(lenState, vars)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxLinCmtGen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal function to generate the model variables for a linCmt() model — .rxLinCmtGen","text":"lenState Length state vars Variables model","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxLinCmtGen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to generate the model variables for a linCmt() model — .rxLinCmtGen","text":"Model variables expanded linCmt model","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxLinCmtGen.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal function to generate the model variables for a linCmt() model — .rxLinCmtGen","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxPrune.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal Pruning function — .rxPrune","title":"Internal Pruning function — .rxPrune","text":"Internal Pruning function","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxPrune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal Pruning function — .rxPrune","text":"","code":".rxPrune(x, envir = parent.frame())"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxPrune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal Pruning function — .rxPrune","text":"x List quoted lines envir Environment information stored","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxPrune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal Pruning function — .rxPrune","text":"Pruned model code","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxPrune.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Internal Pruning function — .rxPrune","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxSens.html","id":null,"dir":"Reference","previous_headings":"","what":"Sensitivity for model — .rxSens","title":"Sensitivity for model — .rxSens","text":"Sensitivity model","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxSens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sensitivity for model — .rxSens","text":"","code":".rxSens(model, vars, vars2)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxSens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sensitivity for model — .rxSens","text":"model symengine model environment vars Variables single sensitivity vars2 present, 2 parameter sensitivity","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxSens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sensitivity for model — .rxSens","text":"Sensitivity","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxSens.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sensitivity for model — .rxSens","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporarily set options then restore them while running code — .rxWithOptions","title":"Temporarily set options then restore them while running code — .rxWithOptions","text":"Temporarily set options restore running code","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporarily set options then restore them while running code — .rxWithOptions","text":"","code":".rxWithOptions(ops, code)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporarily set options then restore them while running code — .rxWithOptions","text":"ops list options temporarily set code code code run sink","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithOptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporarily set options then restore them while running code — .rxWithOptions","text":"value code","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithOptions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporarily set options then restore them while running code — .rxWithOptions","text":"","code":".rxWithOptions(list(digits = 21), {   print(pi) }) #> [1] 3.141592653589793116  print(pi) #> [1] 3.141593"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithSink.html","id":null,"dir":"Reference","previous_headings":"","what":"With one sink, then release — .rxWithSink","title":"With one sink, then release — .rxWithSink","text":"one sink, release","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithSink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"With one sink, then release — .rxWithSink","text":"","code":".rxWithSink(file, code)  .rxWithSinkBoth(file, code)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithSink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"With one sink, then release — .rxWithSink","text":"file path file sink running code code code run sink","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithSink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"With one sink, then release — .rxWithSink","text":"return results code section","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithSink.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"With one sink, then release — .rxWithSink","text":".rxWithSink captures output cat .rxWithSinkBoth captures output cat message","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithSink.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"With one sink, then release — .rxWithSink","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithSink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"With one sink, then release — .rxWithSink","text":"","code":"t <- tempfile() .rxWithSink(t, cat(\"message\\n\")) cat(\"cat2\\n\") # now you can see the cat2 #> cat2 lines <- readLines(t) unlink(t)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithWd.html","id":null,"dir":"Reference","previous_headings":"","what":"Temporarily set options then restore them while running code — .rxWithWd","title":"Temporarily set options then restore them while running code — .rxWithWd","text":"Temporarily set options restore running code","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithWd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temporarily set options then restore them while running code — .rxWithWd","text":"","code":".rxWithWd(wd, code)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithWd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Temporarily set options then restore them while running code — .rxWithWd","text":"wd working directory temporarily set system evaluating code code code run sink","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithWd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Temporarily set options then restore them while running code — .rxWithWd","text":"value code","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-rxWithWd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Temporarily set options then restore them while running code — .rxWithWd","text":"","code":".rxWithWd(tempdir(), {   getwd() }) #> [1] \"/tmp/RtmpJxPcm1\"  getwd() #> [1] \"/tmp/RtmpJxPcm1/file382565b40742/reference\""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-s3register.html","id":null,"dir":"Reference","previous_headings":"","what":"Register a method for a suggested dependency — .s3register","title":"Register a method for a suggested dependency — .s3register","text":"Generally, recommend way register S3 method use S3Method() namespace directive (often generated automatically @export roxygen2 tag). However, technique requires generic imported package, sometimes want suggest package, provide method package loaded. s3_register() can called package's .onLoad() dynamically register method generic's package loaded. (avoid taking dependency vctrs one function, please feel free copy paste function source package.)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-s3register.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Register a method for a suggested dependency — .s3register","text":"","code":".s3register(generic, class, method = NULL)"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-s3register.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Register a method for a suggested dependency — .s3register","text":"generic Name generic form pkg::generic. class Name class method Optionally, implementation method. default, found looking function called generic.class package environment. Note providing method can dangerous use devtools. namespace method reloaded devtools::load_all(), function keep inheriting old namespace. might cause crashes dangling .Call() pointers.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-s3register.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Register a method for a suggested dependency — .s3register","text":"nothing; called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-s3register.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Register a method for a suggested dependency — .s3register","text":"R 3.5.0 later, s3_register() also useful demonstrating class creation vignette, since method lookup longer always involves lexical scope. R 3.6.0 later, can achieve similar effect using \"delayed method registration\", .e. placing following NAMESPACE file:","code":"if (getRversion() >= \"3.6.0\") {   S3method(package::generic, class) }"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-s3register.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Register a method for a suggested dependency — .s3register","text":"","code":"# A typical use case is to dynamically register tibble/pillar methods # for your class. That way you avoid creating a hard dependency on packages # that are not essential, while still providing finer control over # printing when they are used.  .onLoad <- function(...) {   s3_register(\"pillar::pillar_shaft\", \"vctrs_vctr\")   s3_register(\"tibble::type_sum\", \"vctrs_vctr\") }"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-useUtf.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal function to figure out if this session supports Unicode — .useUtf","title":"Internal function to figure out if this session supports Unicode — .useUtf","text":"Internal function figure session supports Unicode","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-useUtf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal function to figure out if this session supports Unicode — .useUtf","text":"","code":".useUtf()"},{"path":"https://nlmixr2.github.io/rxode2/reference/dot-useUtf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Internal function to figure out if this session supports Unicode — .useUtf","text":"boolean indicating session supports Unicode","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/erf.html","id":null,"dir":"Reference","previous_headings":"","what":"Error function — erf","title":"Error function — erf","text":"Error function","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/erf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Error function — erf","text":"","code":"erf(x)"},{"path":"https://nlmixr2.github.io/rxode2/reference/erf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Error function — erf","text":"x vector real values","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/erf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Error function — erf","text":"erf x","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/erf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Error function — erf","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/erf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Error function — erf","text":"","code":"erf(1.0) #> [1] 0.8427008"},{"path":"https://nlmixr2.github.io/rxode2/reference/et.html","id":null,"dir":"Reference","previous_headings":"","what":"Event Table Function — et","title":"Event Table Function — et","text":"Event Table Function","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/et.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event Table Function — et","text":"","code":"et(x, ..., envir = parent.frame())  # S3 method for rxode2 et(x, ..., envir = parent.frame())  # S3 method for rxSolve et(x, ..., envir = parent.frame())  # S3 method for rxParams et(x, ..., envir = parent.frame())  # S3 method for default et(   x,   ...,   time,   amt,   evid,   cmt,   ii,   addl,   ss,   rate,   dur,   until,   id,   amountUnits,   timeUnits,   addSampling,   envir = parent.frame(),   by = NULL,   length.out = NULL )"},{"path":"https://nlmixr2.github.io/rxode2/reference/et.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Event Table Function — et","text":"x first argument supplied event table. named allow et used pipe-line arbitrary objects. ... Times event tables.  can also one named arguments . envir environment expr     evaluated.  May also NULL, list, data frame,     pairlist integer specified sys.call. time Time time dose sampling times. can also unspecified determined object type (list numeric/integer). amt Amount dose. specified, assumes dosing record, instead sampling record. evid Event ID; can : Note reset event resets compartment values zero turns infusions. cmt Compartment name number.  number, integer starting 1.  Negative compartments turn compartment. compartment name, compartment name changed correct state/compartment number running simulation.  compartment named \"-cmt\" compartment turned . ii specifying dose, inter-dose interval ss, addl options (described ). addl number additional doses inter-dose interval one dose. ss Steady state flag;  can one : ss=2 steady state dose uses super-position principle allow complex steady states, like 10 mg morning 20 mg night, dosing 8 12 pm 8 pm instead every 12 hours.  Since uses super positioning principle, makes sense know kinetics linear. values SS currently invalid. rate positive, rate infusion.  Otherwise: modeled bioavailability applied positive rates (rate > 0), duration infusion changed. data specify rate amount, think modeled bioavailability can affect duration. instead want modeled bioavailability increase rate infusion instead duration infusion, specify dur instead model duration rate=2. dur Duration infusion.  amt dur specified rate calculated two data items. dur specified instead rate, bioavailability changes increase rate instead duration. time dosing end.  can easier way figure many additional doses needed sampling period. id integer vector IDs add remove event table.  event table identical ID, may expand include IDs vector.  negative IDs vector removed. amountUnits units dosing records (amt) timeUnits units time records (time) addSampling boolean indicating sampling time added time dosing time.  default FALSE. observations event table, amount increment observations . length.number observations create observations event table. default 200.","code":"Can also specify `cmt` as `dosing.to`, `dose.to`, `doseTo`, `dosingTo`, and `state`."},{"path":"https://nlmixr2.github.io/rxode2/reference/et.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Event Table Function — et","text":"new event table","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/et.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Event Table Function — et","text":"Wang W, Hallow K, James D (2015). \"Tutorial rxode2: Simulating Differential Equation Pharmacometric Models R.\" CPT: Pharmacometrics \\& Systems Pharmacology, 5(1), 3-10. ISSN 2163-8306, <URL: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4728294/>.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/et.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Event Table Function — et","text":"Matthew L Fidler, Wenping Wang","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/et.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Event Table Function — et","text":"","code":"# \\donttest{  library(rxode2) library(units)  ## Model from rxode2 tutorial mod1 <-rxode2({     KA=2.94E-01;     CL=1.86E+01;     V2=4.02E+01;     Q=1.05E+01;     V3=2.97E+02;     Kin=1;     Kout=1;     EC50=200;     C2 = centr/V2;     C3 = peri/V3;     d/dt(depot) =-KA*depot;     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;     d/dt(peri)  =                    Q*C2 - Q*C3;     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff; }); #>    ## These are making the more complex regimens of the rxode2 tutorial  ## bid for 5 days bid <- et(timeUnits=\"hr\") %>%        et(amt=10000,ii=12,until=set_units(5, \"days\"))  ## qd for 5 days qd <- et(timeUnits=\"hr\") %>%       et(amt=20000,ii=24,until=set_units(5, \"days\"))  ## bid for 5 days followed by qd for 5 days  et <- seq(bid,qd) %>% et(seq(0,11*24,length.out=100));  bidQd <- rxSolve(mod1, et)  plot(bidQd, C2)    ## Now Infusion for 5 days followed by oral for 5 days  ##  note you can dose to a named compartment instead of using the compartment number infusion <- et(timeUnits = \"hr\") %>%       et(amt=10000, rate=5000, ii=24, until=set_units(5, \"days\"), cmt=\"centr\")   qd <- et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(5, \"days\"), cmt=\"depot\")  et <- seq(infusion,qd)  infusionQd <- rxSolve(mod1, et)  plot(infusionQd, C2)   ## 2wk-on, 1wk-off  qd <- et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(2, \"weeks\"), cmt=\"depot\")  et <- seq(qd, set_units(1,\"weeks\"), qd) %>%      add.sampling(set_units(seq(0, 5.5,by=0.005),weeks))  wkOnOff <- rxSolve(mod1, et)  plot(wkOnOff, C2)   ## You can also repeat the cycle easily with the rep function  qd <-et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(2, \"weeks\"), cmt=\"depot\")  et <- etRep(qd, times=4, wait=set_units(1,\"weeks\")) %>%      add.sampling(set_units(seq(0, 12.5,by=0.005),weeks))  repCycle4 <- rxSolve(mod1, et)  plot(repCycle4, C2)   # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/etExpand.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand additional doses — etExpand","title":"Expand additional doses — etExpand","text":"Expand additional doses","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etExpand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand additional doses — etExpand","text":"","code":"etExpand(et)"},{"path":"https://nlmixr2.github.io/rxode2/reference/etExpand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand additional doses — etExpand","text":"et Event table expand additional doses .","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etExpand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand additional doses — etExpand","text":"New event table addl doses expanded","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etExpand.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Expand additional doses — etExpand","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etExpand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand additional doses — etExpand","text":"","code":"ev <- et(amt = 3, ii = 24, until = 240) print(ev) #> ── EventTable with 1 records ── #> 1 dosing records (see $get.dosing(); add with add.dosing or et) #> 0 observation times (see $get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with $expand(); or etExpand() #> ── First part of : ── #> # A tibble: 1 × 5 #>    time   amt    ii  addl evid         #>   <dbl> <dbl> <dbl> <int> <evid>       #> 1     0     3    24    10 1:Dose (Add) etExpand(ev) # expands event table, but doesn't modify it #> ── EventTable with 11 records ── #> 11 dosing records (see $get.dosing(); add with add.dosing or et) #> 0 observation times (see $get.sampling(); add with add.sampling or et) #> ── First part of : ── #> # A tibble: 11 × 4 #>     time   amt    ii evid         #>    <dbl> <dbl> <dbl> <evid>       #>  1     0     3     0 1:Dose (Add) #>  2    24     3     0 1:Dose (Add) #>  3    48     3     0 1:Dose (Add) #>  4    72     3     0 1:Dose (Add) #>  5    96     3     0 1:Dose (Add) #>  6   120     3     0 1:Dose (Add) #>  7   144     3     0 1:Dose (Add) #>  8   168     3     0 1:Dose (Add) #>  9   192     3     0 1:Dose (Add) #> 10   216     3     0 1:Dose (Add) #> 11   240     3     0 1:Dose (Add)  print(ev) #> ── EventTable with 1 records ── #> 1 dosing records (see $get.dosing(); add with add.dosing or et) #> 0 observation times (see $get.sampling(); add with add.sampling or et) #> multiple doses in `addl` columns, expand with $expand(); or etExpand() #> ── First part of : ── #> # A tibble: 1 × 5 #>    time   amt    ii  addl evid         #>   <dbl> <dbl> <dbl> <int> <evid>       #> 1     0     3    24    10 1:Dose (Add)  ev$expand() ## Expands the current event table and saves it in ev"},{"path":"https://nlmixr2.github.io/rxode2/reference/etRbind.html","id":null,"dir":"Reference","previous_headings":"","what":"Combining event tables — etRbind","title":"Combining event tables — etRbind","text":"Combining event tables","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etRbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combining event tables — etRbind","text":"","code":"etRbind(   ...,   samples = c(\"use\", \"clear\"),   waitII = c(\"smart\", \"+ii\"),   id = c(\"merge\", \"unique\") )  # S3 method for rxEt rbind(..., deparse.level = 1)"},{"path":"https://nlmixr2.github.io/rxode2/reference/etRbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combining event tables — etRbind","text":"... event tables optionally time event tables, called waiting times help document. samples handle samples repeating event table.  options : \"clear\" Clear sampling records combining datasets \"use\" Use sampling records combining datasets waitII determines waiting times events handled. options : \"smart\" \"smart\" handling waiting times default option.  case, waiting time last observed inter-dose interval first combined event table, actual time doses given wait time.  smaller last observed inter-dose interval, time event tables given inter-dose interval + waiting time event tables. \"+ii\" case, wait time added inter-dose interval matter length wait time inter-dose interval id rbind handle IDs.  two different types options: merge id=\"merge\", IDs merged together, overlapping IDs merged single event table. unique id=\"unique\", IDs renumbered IDs event tables overlapping. deparse.level deparse.level traditional rbind ignored.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etRbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combining event tables — etRbind","text":"event table","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etRbind.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Combining event tables — etRbind","text":"Wang W, Hallow K, James D (2015). \"Tutorial rxode2: Simulating Differential Equation Pharmacometric Models R.\" CPT: Pharmacometrics \\& Systems Pharmacology, 5(1), 3-10. ISSN 2163-8306, <URL: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4728294/>.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/etRbind.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combining event tables — etRbind","text":"Matthew L Fidler Matthew L Fidler, Wenping Wang","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etRbind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combining event tables — etRbind","text":"","code":"# \\donttest{  library(rxode2) library(units)  ## Model from rxode2 tutorial mod1 <-rxode2({     KA=2.94E-01;     CL=1.86E+01;     V2=4.02E+01;     Q=1.05E+01;     V3=2.97E+02;     Kin=1;     Kout=1;     EC50=200;     C2 = centr/V2;     C3 = peri/V3;     d/dt(depot) =-KA*depot;     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;     d/dt(peri)  =                    Q*C2 - Q*C3;     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff; }); #>    ## These are making the more complex regimens of the rxode2 tutorial  ## bid for 5 days bid <- et(timeUnits=\"hr\") %>%        et(amt=10000,ii=12,until=set_units(5, \"days\"))  ## qd for 5 days qd <- et(timeUnits=\"hr\") %>%       et(amt=20000,ii=24,until=set_units(5, \"days\"))  ## bid for 5 days followed by qd for 5 days  et <- seq(bid,qd) %>% et(seq(0,11*24,length.out=100));  bidQd <- rxSolve(mod1, et)  plot(bidQd, C2)    ## Now Infusion for 5 days followed by oral for 5 days  ##  note you can dose to a named compartment instead of using the compartment number infusion <- et(timeUnits = \"hr\") %>%       et(amt=10000, rate=5000, ii=24, until=set_units(5, \"days\"), cmt=\"centr\")   qd <- et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(5, \"days\"), cmt=\"depot\")  et <- seq(infusion,qd)  infusionQd <- rxSolve(mod1, et)  plot(infusionQd, C2)   ## 2wk-on, 1wk-off  qd <- et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(2, \"weeks\"), cmt=\"depot\")  et <- seq(qd, set_units(1,\"weeks\"), qd) %>%      add.sampling(set_units(seq(0, 5.5,by=0.005),weeks))  wkOnOff <- rxSolve(mod1, et)  plot(wkOnOff, C2)   ## You can also repeat the cycle easily with the rep function  qd <-et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(2, \"weeks\"), cmt=\"depot\")  et <- etRep(qd, times=4, wait=set_units(1,\"weeks\")) %>%      add.sampling(set_units(seq(0, 12.5,by=0.005),weeks))  repCycle4 <- rxSolve(mod1, et)  plot(repCycle4, C2)   # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/etRep.html","id":null,"dir":"Reference","previous_headings":"","what":"Repeat an rxode2 event table — etRep","title":"Repeat an rxode2 event table — etRep","text":"Repeat rxode2 event table","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etRep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Repeat an rxode2 event table — etRep","text":"","code":"etRep(   x,   times = 1,   length.out = NA,   each = NA,   n = NULL,   wait = 0,   id = integer(0),   samples = c(\"clear\", \"use\"),   waitII = c(\"smart\", \"+ii\"),   ii = 24 )  # S3 method for rxEt rep(x, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/etRep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Repeat an rxode2 event table — etRep","text":"x rxode2 event table times Number times repeat event table length.Invalid rxode2 event tables, throw error used. Invalid rxode2 event tables, throw error used. n number times repeat event table.  Overrides times. wait Waiting time repeated event table.  default waiting, wait=0 id integer vector IDs add remove event table.  event table identical ID, may expand include IDs vector.  negative IDs vector removed. samples handle samples repeating event table.  options : \"clear\" Clear sampling records combining datasets \"use\" Use sampling records combining datasets waitII determines waiting times events handled. options : \"smart\" \"smart\" handling waiting times default option.  case, waiting time last observed inter-dose interval first combined event table, actual time doses given wait time.  smaller last observed inter-dose interval, time event tables given inter-dose interval + waiting time event tables. \"+ii\" case, wait time added inter-dose interval matter length wait time inter-dose interval ii specifying dose, inter-dose interval ss, addl options (described ). ... Times event tables.  can also one named arguments .","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etRep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Repeat an rxode2 event table — etRep","text":"event table","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etRep.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Repeat an rxode2 event table — etRep","text":"Wang W, Hallow K, James D (2015). \"Tutorial rxode2: Simulating Differential Equation Pharmacometric Models R.\" CPT: Pharmacometrics \\& Systems Pharmacology, 5(1), 3-10. ISSN 2163-8306, <URL: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4728294/>.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/etRep.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Repeat an rxode2 event table — etRep","text":"Matthew L Fidler, Wenping Wang","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etRep.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Repeat an rxode2 event table — etRep","text":"","code":"# \\donttest{  library(rxode2) library(units)  ## Model from rxode2 tutorial mod1 <-rxode2({     KA=2.94E-01;     CL=1.86E+01;     V2=4.02E+01;     Q=1.05E+01;     V3=2.97E+02;     Kin=1;     Kout=1;     EC50=200;     C2 = centr/V2;     C3 = peri/V3;     d/dt(depot) =-KA*depot;     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;     d/dt(peri)  =                    Q*C2 - Q*C3;     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff; }); #>    ## These are making the more complex regimens of the rxode2 tutorial  ## bid for 5 days bid <- et(timeUnits=\"hr\") %>%        et(amt=10000,ii=12,until=set_units(5, \"days\"))  ## qd for 5 days qd <- et(timeUnits=\"hr\") %>%       et(amt=20000,ii=24,until=set_units(5, \"days\"))  ## bid for 5 days followed by qd for 5 days  et <- seq(bid,qd) %>% et(seq(0,11*24,length.out=100));  bidQd <- rxSolve(mod1, et)  plot(bidQd, C2)    ## Now Infusion for 5 days followed by oral for 5 days  ##  note you can dose to a named compartment instead of using the compartment number infusion <- et(timeUnits = \"hr\") %>%       et(amt=10000, rate=5000, ii=24, until=set_units(5, \"days\"), cmt=\"centr\")   qd <- et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(5, \"days\"), cmt=\"depot\")  et <- seq(infusion,qd)  infusionQd <- rxSolve(mod1, et)  plot(infusionQd, C2)   ## 2wk-on, 1wk-off  qd <- et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(2, \"weeks\"), cmt=\"depot\")  et <- seq(qd, set_units(1,\"weeks\"), qd) %>%      add.sampling(set_units(seq(0, 5.5,by=0.005),weeks))  wkOnOff <- rxSolve(mod1, et)  plot(wkOnOff, C2)   ## You can also repeat the cycle easily with the rep function  qd <-et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(2, \"weeks\"), cmt=\"depot\")  et <- etRep(qd, times=4, wait=set_units(1,\"weeks\")) %>%      add.sampling(set_units(seq(0, 12.5,by=0.005),weeks))  repCycle4 <- rxSolve(mod1, et)  plot(repCycle4, C2)   # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/etSeq.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence of event tables — etSeq","title":"Sequence of event tables — etSeq","text":"combines sequence event tables.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etSeq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence of event tables — etSeq","text":"","code":"etSeq(..., samples = c(\"clear\", \"use\"), waitII = c(\"smart\", \"+ii\"), ii = 24)  # S3 method for rxEt seq(...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/etSeq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence of event tables — etSeq","text":"... event tables optionally time event tables, called waiting times help document. samples handle samples repeating event table.  options : \"clear\" Clear sampling records combining datasets \"use\" Use sampling records combining datasets waitII determines waiting times events handled. options : \"smart\" \"smart\" handling waiting times default option.  case, waiting time last observed inter-dose interval first combined event table, actual time doses given wait time.  smaller last observed inter-dose interval, time event tables given inter-dose interval + waiting time event tables. \"+ii\" case, wait time added inter-dose interval matter length wait time inter-dose interval ii inter-dose intervals found event table, assume interdose interval given ii value.  default 24.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etSeq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequence of event tables — etSeq","text":"event table","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etSeq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sequence of event tables — etSeq","text":"sequences event tables added argument list ....  default combining event tables offset least last inter-dose interval prior event table (ii).  separate event tables number, event tables separated least wait time defined number last inter-dose interval.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etSeq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sequence of event tables — etSeq","text":"Wang W, Hallow K, James D (2015). \"Tutorial rxode2: Simulating Differential Equation Pharmacometric Models R.\" CPT: Pharmacometrics \\& Systems Pharmacology, 5(1), 3-10. ISSN 2163-8306, <URL: https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4728294/>.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/etSeq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sequence of event tables — etSeq","text":"Matthew L Fidler, Wenping Wang","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etSeq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence of event tables — etSeq","text":"","code":"# \\donttest{  library(rxode2) library(units)  ## Model from rxode2 tutorial mod1 <-rxode2({     KA=2.94E-01;     CL=1.86E+01;     V2=4.02E+01;     Q=1.05E+01;     V3=2.97E+02;     Kin=1;     Kout=1;     EC50=200;     C2 = centr/V2;     C3 = peri/V3;     d/dt(depot) =-KA*depot;     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;     d/dt(peri)  =                    Q*C2 - Q*C3;     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff; }); #>    ## These are making the more complex regimens of the rxode2 tutorial  ## bid for 5 days bid <- et(timeUnits=\"hr\") %>%        et(amt=10000,ii=12,until=set_units(5, \"days\"))  ## qd for 5 days qd <- et(timeUnits=\"hr\") %>%       et(amt=20000,ii=24,until=set_units(5, \"days\"))  ## bid for 5 days followed by qd for 5 days  et <- seq(bid,qd) %>% et(seq(0,11*24,length.out=100));  bidQd <- rxSolve(mod1, et)  plot(bidQd, C2)    ## Now Infusion for 5 days followed by oral for 5 days  ##  note you can dose to a named compartment instead of using the compartment number infusion <- et(timeUnits = \"hr\") %>%       et(amt=10000, rate=5000, ii=24, until=set_units(5, \"days\"), cmt=\"centr\")   qd <- et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(5, \"days\"), cmt=\"depot\")  et <- seq(infusion,qd)  infusionQd <- rxSolve(mod1, et)  plot(infusionQd, C2)   ## 2wk-on, 1wk-off  qd <- et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(2, \"weeks\"), cmt=\"depot\")  et <- seq(qd, set_units(1,\"weeks\"), qd) %>%      add.sampling(set_units(seq(0, 5.5,by=0.005),weeks))  wkOnOff <- rxSolve(mod1, et)  plot(wkOnOff, C2)   ## You can also repeat the cycle easily with the rep function  qd <-et(timeUnits = \"hr\") %>% et(amt=10000, ii=24, until=set_units(2, \"weeks\"), cmt=\"depot\")  et <- etRep(qd, times=4, wait=set_units(1,\"weeks\")) %>%      add.sampling(set_units(seq(0, 12.5,by=0.005),weeks))  repCycle4 <- rxSolve(mod1, et)  plot(repCycle4, C2)   # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/etTrans.html","id":null,"dir":"Reference","previous_headings":"","what":"Event translation for rxode2 — etTrans","title":"Event translation for rxode2 — etTrans","text":"Event translation rxode2","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etTrans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Event translation for rxode2 — etTrans","text":"","code":"etTrans(   inData,   obj,   addCmt = FALSE,   dropUnits = FALSE,   allTimeVar = FALSE,   keepDosingOnly = FALSE,   combineDvid = NULL,   keep = character(0) )"},{"path":"https://nlmixr2.github.io/rxode2/reference/etTrans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Event translation for rxode2 — etTrans","text":"inData Data frame translate obj Model translate data addCmt Add compartment data frame (default FALSE). dropUnits Boolean drop units (default FALSE). allTimeVar Treat covariates time-varying keepDosingOnly keep individuals dosing records trailing dosing records last observation. combineDvid boolean indicating rxode2 use DVID observation records change cmt value; Useful multiple-endpoint nlmixr models.  default determined option(\"rxode2.combine.dvid\") option set, TRUE. typically affect rxode2 simulations. keepF named vector items want keep final rxode2 dataset. added rxode2 event records (seen), last observation carried forward used.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/etTrans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Event translation for rxode2 — etTrans","text":"Object solving rxode2","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/eventTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an event table object — eventTable","title":"Create an event table object — eventTable","text":"Initializes object class ‘EventTable’ methods adding querying dosing observation records","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/eventTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an event table object — eventTable","text":"","code":"eventTable(amount.units = NA, time.units = NA)"},{"path":"https://nlmixr2.github.io/rxode2/reference/eventTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an event table object — eventTable","text":"amount.units string denoting amount dosing units, e.g., “mg”, “ug”. Default NA denote unspecified units.  also solved rxode2 object.  case, eventTable(obj) returns eventTable used solve rxode2 object. time.units string denoting time units, e.g., “hours”, “days”. Default \"hours\". eventTable object consists data.frame storing ordered time-stamped events (unspecified) PK/PD dynamic system, units (strings) dosing time records, plus list functions add extract event records. Currently, events can two types: dosing events represent inputs system sampling time events represent observations system ‘amount.units’ ‘time.units’, respectively.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/eventTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an event table object — eventTable","text":"modified data.frame following accessible functions: get.EventTable() returns current event table add.dosing()  adds dosing records event table. get.dosing() returns data.frame dosing records. clear.dosing() clears deletes dosing event table `add.sampling() adds sampling time observation records event table. get.sampling()returns data.frame sampled observation records. clear.sampling() removes sampling event table. get.obs.rec() returns logical vector indicating whether event record represents observation . get.nobs() returns number observation (dosing) records. get.units() returns two-element character vector dosing time units, respectively copy() makes copy current event table. create copy event table object use qd2 <- qd$copy() expand() Expands event table multi-subject solving. done qd$expand(400) 400 subject data expansion","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/eventTable.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create an event table object — eventTable","text":"Matthew Fidler, Melissa Hallow Wenping Wang","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/eventTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an event table object — eventTable","text":"","code":"# create dosing and observation (sampling) events # QD 50mg dosing, 5 days followed by 25mg 5 days # qd <- eventTable(amount.units = \"mg\", time.units = \"days\") # qd$add.dosing(dose = 50, nbr.doses = 5, dosing.interval = 1, do.sampling = FALSE) # # sample the system's drug amounts hourly the first day, then every 12 hours # for the next 4 days qd$add.sampling(seq(from = 0, to = 1, by = 1 / 24)) qd$add.sampling(seq(from = 1, to = 5, by = 12 / 24)) # # print(qd$get.dosing())     # table of dosing records print(qd$get.nobs()) # number of observation (not dosing) records #> [1] 34 # # BID dosing, 5 days bid <- eventTable(\"mg\", \"days\") # only dosing bid$add.dosing(   dose = 10000, nbr.doses = 2 * 5,   dosing.interval = 12, do.sampling = FALSE ) # # Use the copy() method to create a copy (clone) of an existing # event table (simple assignments just create a new reference to # the same event table object (closure)). # bid.ext <- bid$copy() # three-day extension for a 2nd cohort bid.ext$add.dosing(   dose = 5000, nbr.doses = 2 * 3,   start.time = 120, dosing.interval = 12, do.sampling = FALSE )  # You can also use the Piping operator to create a table  qd2 <- eventTable(amount.units = \"mg\", time.units = \"days\") %>%   add.dosing(dose = 50, nbr.doses = 5, dosing.interval = 1, do.sampling = FALSE) %>%   add.sampling(seq(from = 0, to = 1, by = 1 / 24)) %>%   add.sampling(seq(from = 1, to = 5, by = 12 / 24)) # print(qd2$get.dosing())     # table of dosing records print(qd2$get.nobs()) # number of observation (not dosing) records #> [1] 34  # Note that piping with %>% will update the original table.  qd3 <- qd2 %>% add.sampling(seq(from = 5, to = 10, by = 6 / 24)) print(qd2$get.nobs()) #> [1] 34 print(qd3$get.nobs()) #> [1] 55"},{"path":"https://nlmixr2.github.io/rxode2/reference/findLhs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the assignments in R expression — findLhs","title":"Find the assignments in R expression — findLhs","text":"Find assignments R expression","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/findLhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the assignments in R expression — findLhs","text":"","code":"findLhs(x)"},{"path":"https://nlmixr2.github.io/rxode2/reference/findLhs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the assignments in R expression — findLhs","text":"x R expression","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/findLhs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the assignments in R expression — findLhs","text":"list assigned parameters","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/findLhs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Find the assignments in R expression — findLhs","text":"Hadley Wickham Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/forderForceBase.html","id":null,"dir":"Reference","previous_headings":"","what":"Force using base order for rxode2 radix sorting — forderForceBase","title":"Force using base order for rxode2 radix sorting — forderForceBase","text":"Force using base order rxode2 radix sorting","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/forderForceBase.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Force using base order for rxode2 radix sorting — forderForceBase","text":"","code":"forderForceBase(forceBase = FALSE)"},{"path":"https://nlmixr2.github.io/rxode2/reference/forderForceBase.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Force using base order for rxode2 radix sorting — forderForceBase","text":"forceBase boolean indicating rxode2 use R's order() radix sorting instead data.table's parallel radix sorting.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/forderForceBase.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Force using base order for rxode2 radix sorting — forderForceBase","text":"NILL; called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/forderForceBase.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Force using base order for rxode2 radix sorting — forderForceBase","text":"","code":"# \\donttest{ forderForceBase(TRUE) # Use base `order` for rxode2 sorts #> NULL forderForceBase(FALSE) # Use `data.table` for rxode2 sorts #> NULL # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/gammap.html","id":null,"dir":"Reference","previous_headings":"","what":"Gammap: normalized lower incomplete gamma function — gammap","title":"Gammap: normalized lower incomplete gamma function — gammap","text":"gamma_p boost library","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gammap: normalized lower incomplete gamma function — gammap","text":"","code":"gammap(a, z)"},{"path":"https://nlmixr2.github.io/rxode2/reference/gammap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gammap: normalized lower incomplete gamma function — gammap","text":"numeric '' parameter normalized lower incomplete gamma z numeric 'z' parameter normalized lower incomplete gamma","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gammap: normalized lower incomplete gamma function — gammap","text":"gammap results","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammap.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gammap: normalized lower incomplete gamma function — gammap","text":"gamma p function given : gammap = lowergamma(, z)/gamma()","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammap.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gammap: normalized lower incomplete gamma function — gammap","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gammap: normalized lower incomplete gamma function — gammap","text":"","code":"gammap(1, 3) #> [1] 0.9502129 gammap(1:3, 3) #> [1] 0.9502129 0.8008517 0.5768099 gammap(1, 1:3) #> [1] 0.6321206 0.8646647 0.9502129"},{"path":"https://nlmixr2.github.io/rxode2/reference/gammapDer.html","id":null,"dir":"Reference","previous_headings":"","what":"gammapDer:  derivative of gammap — gammapDer","title":"gammapDer:  derivative of gammap — gammapDer","text":"gamma_p_derivative boost library","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammapDer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gammapDer:  derivative of gammap — gammapDer","text":"","code":"gammapDer(a, z)"},{"path":"https://nlmixr2.github.io/rxode2/reference/gammapDer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gammapDer:  derivative of gammap — gammapDer","text":"numeric '' parameter upper incomplete gamma z numeric 'z' parameter upper incomplete gamma","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammapDer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gammapDer:  derivative of gammap — gammapDer","text":"lowergamma results","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammapDer.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gammapDer:  derivative of gammap — gammapDer","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammapDer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"gammapDer:  derivative of gammap — gammapDer","text":"","code":"gammapDer(1:3, 3) #> [1] 0.04978707 0.14936121 0.22404181  gammapDer(1, 1:3) #> [1] 0.36787944 0.13533528 0.04978707"},{"path":"https://nlmixr2.github.io/rxode2/reference/gammapInv.html","id":null,"dir":"Reference","previous_headings":"","what":"gammapInv and gammapInva:  Inverses of normalized gammap function — gammapInv","title":"gammapInv and gammapInva:  Inverses of normalized gammap function — gammapInv","text":"gammapInv gammapInva:  Inverses normalized gammap function","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammapInv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gammapInv and gammapInva:  Inverses of normalized gammap function — gammapInv","text":"","code":"gammapInv(a, p)  gammapInva(x, p)"},{"path":"https://nlmixr2.github.io/rxode2/reference/gammapInv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gammapInv and gammapInva:  Inverses of normalized gammap function — gammapInv","text":"numeric '' parameter upper incomplete gamma p numeric 'p' parameter upper incomplete gamma x numeric 'x' parameter upper incomplete gamma","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammapInv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gammapInv and gammapInva:  Inverses of normalized gammap function — gammapInv","text":"inverse gammap results","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammapInv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"gammapInv and gammapInva:  Inverses of normalized gammap function — gammapInv","text":"equation: p = gammap(, x) 'gammapInv' function returns value 'x' satisfies equation 'gammapInva' function returns value 'q' satisfies equation NOTE: gammapInva slow","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammapInv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gammapInv and gammapInva:  Inverses of normalized gammap function — gammapInv","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammapInv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"gammapInv and gammapInva:  Inverses of normalized gammap function — gammapInv","text":"","code":"gammapInv(1:3, 0.5) #> [1] 0.6931472 1.6783470 2.6740603  gammapInv(1, 1:3 / 3.1) #> [1] 0.3894648 1.0360919 3.4339872  gammapInv(1:3, 1:3 / 3.1) #> [1] 0.3894648 2.1988984 6.8872929  gammapInva(1:3, 1:3 / 3.1) #> [1] 0.3894648 2.1988984 6.8872929"},{"path":"https://nlmixr2.github.io/rxode2/reference/gammaq.html","id":null,"dir":"Reference","previous_headings":"","what":"Gammaq: normalized upper incomplete gamma function — gammaq","title":"Gammaq: normalized upper incomplete gamma function — gammaq","text":"gamma_q boost library","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammaq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gammaq: normalized upper incomplete gamma function — gammaq","text":"","code":"gammaq(a, z)"},{"path":"https://nlmixr2.github.io/rxode2/reference/gammaq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gammaq: normalized upper incomplete gamma function — gammaq","text":"numeric '' parameter normalized upper incomplete gamma z numeric 'z' parameter normalized upper incomplete gamma","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammaq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gammaq: normalized upper incomplete gamma function — gammaq","text":"gammaq results","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammaq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gammaq: normalized upper incomplete gamma function — gammaq","text":"gamma q function given : gammaq = uppergamma(, z)/gamma()","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammaq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Gammaq: normalized upper incomplete gamma function — gammaq","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammaq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gammaq: normalized upper incomplete gamma function — gammaq","text":"","code":"gammaq(1, 3) #> [1] 0.04978707 gammaq(1:3, 3) #> [1] 0.04978707 0.19914827 0.42319008 gammaq(1, 1:3) #> [1] 0.36787944 0.13533528 0.04978707"},{"path":"https://nlmixr2.github.io/rxode2/reference/gammaqInv.html","id":null,"dir":"Reference","previous_headings":"","what":"gammaqInv and gammaqInva:  Inverses of normalized gammaq function — gammaqInv","title":"gammaqInv and gammaqInva:  Inverses of normalized gammaq function — gammaqInv","text":"gammaqInv gammaqInva:  Inverses normalized gammaq function","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammaqInv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gammaqInv and gammaqInva:  Inverses of normalized gammaq function — gammaqInv","text":"","code":"gammaqInv(a, q)  gammaqInva(x, q)"},{"path":"https://nlmixr2.github.io/rxode2/reference/gammaqInv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"gammaqInv and gammaqInva:  Inverses of normalized gammaq function — gammaqInv","text":"numeric '' parameter upper incomplete gamma q numeric 'q' parameter upper incomplete gamma x numeric 'x' parameter upper incomplete gamma","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammaqInv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"gammaqInv and gammaqInva:  Inverses of normalized gammaq function — gammaqInv","text":"inverse gammaq results","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammaqInv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"gammaqInv and gammaqInva:  Inverses of normalized gammaq function — gammaqInv","text":"equation: q = gammaq(, x) 'gammaqInv' function returns value 'x' satisfies equation 'gammaqInva' function returns value '' satisfies equation NOTE: gammaqInva slow","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammaqInv.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"gammaqInv and gammaqInva:  Inverses of normalized gammaq function — gammaqInv","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/gammaqInv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"gammaqInv and gammaqInva:  Inverses of normalized gammaq function — gammaqInv","text":"","code":"gammaqInv(1:3, 0.5) #> [1] 0.6931472 1.6783470 2.6740603  gammaqInv(1, 1:3 / 3) #> [1] 1.0986123 0.4054651 0.0000000  gammaqInv(1:3, 1:3 / 3.1) #> [1] 1.131402 1.248533 0.684289  gammaqInva(1:3, 1:3 / 3.1) #> [1] 1.131402 1.248533 0.684289"},{"path":"https://nlmixr2.github.io/rxode2/reference/genShinyApp.template.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate an example (template) of a dosing regimen shiny app — genShinyApp.template","title":"Generate an example (template) of a dosing regimen shiny app — genShinyApp.template","text":"Create complete shiny application exploring dosing regimens given (hardcoded) PK/PD model.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/genShinyApp.template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate an example (template) of a dosing regimen shiny app — genShinyApp.template","text":"","code":"genShinyApp.template(   appDir = \"shinyExample\",   verbose = TRUE,   ODE.config = list(ode = \"model\", params = c(KA = 0.294), inits = c(eff = 1), method =     \"lsoda\", atol = 1e-08, rtol = 1e-06) )  write.template.server(appDir)  write.template.ui(appDir, statevars)"},{"path":"https://nlmixr2.github.io/rxode2/reference/genShinyApp.template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate an example (template) of a dosing regimen shiny app — genShinyApp.template","text":"appDir string directory store shiny app, default \"shinyExample\". directory appDir created exist. verbose logical specifying whether write messages shiny app generated. Defaults TRUE. ODE.config model name compiled list parameters sent rxSolve(). statevars List statevars passed write.template.ui() function.  usually called directly. PK/PD model defined using rxode2(), set parameters initial values defined.  appropriate R scripts shiny's user interface ui.R server logic server.R created directory appDir. function evaluates following PK/PD model default: can changed ODE.config parameter. launch shiny app, simply issue runApp(appDir) R command.","code":"C2 = centr/V2;     C3 = peri/V3;     d/dt(depot) =-KA*depot;     d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;     d/dt(peri)  =                    Q*C2 - Q*C3;     d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff;"},{"path":"https://nlmixr2.github.io/rxode2/reference/genShinyApp.template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate an example (template) of a dosing regimen shiny app — genShinyApp.template","text":"None, functions used side effects.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/genShinyApp.template.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate an example (template) of a dosing regimen shiny app — genShinyApp.template","text":"functions create simple, working example dosing regimen simulation web application. Users may want modify code experiment creating shiny applications specific rxode2 models.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/genShinyApp.template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate an example (template) of a dosing regimen shiny app — genShinyApp.template","text":"","code":"# \\donttest{ # remove myapp when the example is complete on.exit(unlink(\"myapp\", recursive = TRUE, force = TRUE)) # create the shiny app example (template) genShinyApp.template(appDir = \"myapp\") #>  #> Generating an example (template) for a dosing regimen shiny app #>  #> Using the following PK/PD model: #>    C2 = centr/V2; #>    C3 = peri/V3; #>    d/dt(depot) =-KA*depot; #>    d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3; #>    d/dt(peri)  =                    Q*C2 - Q*C3; #>    d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff; #>      #> Translating the PK/PD ODE model into C, compiling, etc. #>  #>   #>  #> Parameters and their values: #>      KA      CL      V2       Q      V3     Kin    Kout    EC50  #>   0.294  18.600  40.200  10.500 297.000   1.000   1.000 200.000  #>  #> Initial values in each compartment: #> depot centr  pari   eff  #>     0     0     0     1  #>  #> Warning: 2 arguments not used by format ' #>       # #>       # Dosing regimen template generated by rxode2::genShinyApp.template() #>       # #>  #>       debug = TRUE #>       #wd = sprintf(\"%%s/../\", getwd()) #>       #setwd(wd) #>  #>       # Server inputs: Dose, dosing regimen, dosing frequency, #>       # dosing cycle definition, number of dosing cycles #>  #>       library(shiny) #>       library(rxode2) #>  #>       # read objects from \"rx_shiny_data.rda\" in the  AppDir folder, #>       # objects include, mod1, params, inits, method, atol, rtol.] #>  #>       load(\"./rx_shiny_data.rda\") #>       if (!rxDynLoad(mod1)) mod1 <- rxode2(mod1, modName=\"mod1\") #>       # Define server logic #>       shinyServer(function(input, output) { #>  #>         get.cp <- reactive({ #>           ds <- input$Dose #>           reg <- switch(input$regimen, \"QD\"=1, \"BID\"=2) #>           cyc <- switch(input$cycle, #>               \"continous\"=c(7,0), #>               \"1wkon 1wkoff\"=c(7,7), #>               \"2wkon 1wkoff\"=c(14,7), #>               \"3wkon 1wkoff\"=c(21,7) #>           ) #>           cyc <- [... truncated] #> Shiny files (ui.R, server.R) plus R data saved. #>  #> To launch the Shiny app, type the following two R commands: #>  #> \tlibrary(shiny) #> \trunApp(\"myapp\") #>  # run the shiny app if (requireNamespace(\"shiny\", quietly=TRUE)) {   library(shiny)   # runApp(\"myapp\") # Won't launch in environments without browsers } # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/getRxThreads.html","id":null,"dir":"Reference","previous_headings":"","what":"Get/Set the number of threads that rxode2 uses — getRxThreads","title":"Get/Set the number of threads that rxode2 uses — getRxThreads","text":"Get/Set number threads rxode2 uses","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/getRxThreads.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get/Set the number of threads that rxode2 uses — getRxThreads","text":"","code":"getRxThreads(verbose = FALSE)  setRxThreads(threads = NULL, percent = NULL, throttle = NULL)  rxCores(verbose = FALSE)"},{"path":"https://nlmixr2.github.io/rxode2/reference/getRxThreads.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get/Set the number of threads that rxode2 uses — getRxThreads","text":"verbose Display value relevant OpenMP settings threads NULL (default) rereads environment variables. 0 means use logical CPUs available. Otherwise number >= 1 percent provided number 2 100; percentage logical CPUs use. default startup, 50 percent. throttle 2 (default) means , roughly speaking, single thread used number subjects solved <=2, 2 threads number points <=4, etc. throttle speed small data tasks (especially repeated many times) incurring overhead managing multiple threads. throttle also suppress sorting ID solved first (nsubject solved)*throttle <= nthreads.  rxode2 sorting occurs minimize time waiting another thread finish. last item solved long solving time, solving wait last costly solving occur. items likely take time solved first, wait less likely impact overall solving time. rxode2 IDs sorted individual number solving points (largest first). also C interface allows IDs resorted total time spent solving equation.  allows packages like nlmixr sort solving time needed. Overall number threads throttled (restricted) small tasks sorting IDs suppressed.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/getRxThreads.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get/Set the number of threads that rxode2 uses — getRxThreads","text":"number threads rxode2 uses","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/guide_none.html","id":null,"dir":"Reference","previous_headings":"","what":"Empty Guide — guide_none","title":"Empty Guide — guide_none","text":"empty guide draws nothing; included rxode2 compatibility ggplot 3.2","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/guide_none.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Empty Guide — guide_none","text":"","code":"guide_none(title = waiver(), position = waiver())"},{"path":"https://nlmixr2.github.io/rxode2/reference/guide_none.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Empty Guide — guide_none","text":"title character string expression indicating title guide. NULL, title shown. default (waiver()), name scale object name specified labs() used title. position guide drawn: one top, bottom, left, right.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/guide_none.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Empty Guide — guide_none","text":"nothing, simply included compatible ggplot 3.2","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/ini.html","id":null,"dir":"Reference","previous_headings":"","what":"Ini block for rxode2/nlmixr models — ini.rxUi","title":"Ini block for rxode2/nlmixr models — ini.rxUi","text":"ini block controls initial conditions 'theta' (fixed effects), 'omega' (random effects), 'sigma' (residual error) elements model.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/ini.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ini block for rxode2/nlmixr models — ini.rxUi","text":"","code":"# S3 method for rxUi ini(x, ..., envir = parent.frame())  # S3 method for `function` ini(x, ..., envir = parent.frame())  ini(x, ..., envir = parent.frame())  # S3 method for default ini(x, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/ini.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ini block for rxode2/nlmixr models — ini.rxUi","text":"x expression ... expressions ini() function envir environment unevaluated model expressions evaluated.  May also NULL, list, data frame, pairlist integer specified sys.call.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/ini.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ini block for rxode2/nlmixr models — ini.rxUi","text":"Ini block","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/ini.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ini block for rxode2/nlmixr models — ini.rxUi","text":"'theta' 'sigma' can set using either <- = tvCL <- 1 equivalently tvCL = 1.  'omega' can set ~. Parameters can named unnamed (though named parameters preferred). named parameter set using name left assignment unnamed parameters set without assignment operator.  tvCL <- 1 set named parameter tvCL 1.  Unnamed parameters set using just value, 1. estimation methods, lower upper bounds can set 'theta' 'sigma' values.  set lower /upper bound, use vector values.  vector c(lower, estimate, upper).  vector may given just estimate (c(estimate)), lower bound estimate (c(lower, estimate)), three (c(lower, estimate, upper)).  set estimate upper bound without lower bound, set lower bound -Inf, c(-Inf, estimate, upper).  estimation method support bounds, bounds ignored warning. 'omega' values can set single value values lower-triangular matrix.  values may set either variance-covariance matrix (default) correlation matrix -diagonals standard deviations diagonals.  Names may set left side ~.  set variance-covariance matrix variance values 2 3 covariance -2.5 use ~c(2, 2.5, 3).  set matrix names iivKa iivCL, use iivKa + iivCL~c(2, 2.5, 3).  set correlation matrix standard deviations diagonal, use cor() like iivKa + iivCL~cor(2, -0.5, 3). Values may fixed (therefore estimated) using either name fixed end assignment calling fixed() function value fix.  'theta' 'sigma', either estimate full definition (including lower upper bounds) may included fixed setting.  example, following effectively equivalent set 'theta' 'sigma' fixed value (lower upper bounds ignored fixed value): tvCL <- fixed(1), tvCL <- fixed(0, 1), tvCL <- fixed(0, 1, 2), tvCL <- c(0, fixed(1), 2), tvCL <- c(0, 1, fixed).  'omega' assignment, full block none block must set fixed.  Examples setting 'omega' value fixed : iivKa~fixed(1), iivKa + iivCL~fixed(1, 2, 3), iivKa + iivCL~c(1, 2, 3, fixed).  Anywhere fixed used, FIX, FIXED, fix may used equivalently. value, standard mathematical operators functions may used define value.  example, exp(2) 24*30 may used define value anywhere number can used (e.g. lower bound, estimate, upper bound, variance, etc.). Values may labeled using label() function assignment. Labels used make reporting easier giving human-readable description parameter, labels effect estimation.  typical way set label parameter tvCL label \"Typical Value Clearance (L/hr)\" tvCL <- 1; label(\"Typical Value Clearance (L/hr)\"). rxode2/nlmixr2 attempt determine back-transformations user.  example, CL <- exp(tvCL) detect tvCL must back-transformed exp() easier interpretation.  want control back-transformation, can specify back-transformation using backTransform() assignment.  example, set back-transformation exp(), can use tvCL <- 1; backTransform(exp()).","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/ini.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ini block for rxode2/nlmixr models — ini.rxUi","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/invWR1d.html","id":null,"dir":"Reference","previous_headings":"","what":"One correlation sample from the Inverse Wishart distribution — invWR1d","title":"One correlation sample from the Inverse Wishart distribution — invWR1d","text":"correlation constructed transformation Inverse Wishart random covariate correlation.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/invWR1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One correlation sample from the Inverse Wishart distribution — invWR1d","text":"","code":"invWR1d(d, nu, omegaIsChol = FALSE)"},{"path":"https://nlmixr2.github.io/rxode2/reference/invWR1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One correlation sample from the Inverse Wishart distribution — invWR1d","text":"d dimension correlation matrix nu Degrees freedom Wishart distribution omegaIsChol indicator omega matrix Cholesky decomposition. used codetype=\"invWishart\"","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/invWR1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One correlation sample from the Inverse Wishart distribution — invWR1d","text":"One correlation sample inverse wishart","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/invWR1d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"One correlation sample from the Inverse Wishart distribution — invWR1d","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/is.rxEt.html","id":null,"dir":"Reference","previous_headings":"","what":"Check to see if this is an rxEt object. — is.rxEt","title":"Check to see if this is an rxEt object. — is.rxEt","text":"Check see rxEt object.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/is.rxEt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check to see if this is an rxEt object. — is.rxEt","text":"","code":"is.rxEt(x)"},{"path":"https://nlmixr2.github.io/rxode2/reference/is.rxEt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check to see if this is an rxEt object. — is.rxEt","text":"x object check see rxEt rxEt object expired strip rxEt information.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/is.rxEt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check to see if this is an rxEt object. — is.rxEt","text":"Boolean indicating rxode2 event table","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/is.rxEt.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check to see if this is an rxEt object. — is.rxEt","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/is.rxSolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Check to see if this is an rxSolve object. — is.rxSolve","title":"Check to see if this is an rxSolve object. — is.rxSolve","text":"Check see rxSolve object.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/is.rxSolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check to see if this is an rxSolve object. — is.rxSolve","text":"","code":"is.rxSolve(x)"},{"path":"https://nlmixr2.github.io/rxode2/reference/is.rxSolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check to see if this is an rxSolve object. — is.rxSolve","text":"x object check see rxSolve rxSolve object expired strip rxSolve information.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/is.rxSolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check to see if this is an rxSolve object. — is.rxSolve","text":"boolean indicating rxSolve object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/is.rxSolve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check to see if this is an rxSolve object. — is.rxSolve","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/logit.html","id":null,"dir":"Reference","previous_headings":"","what":"logit and inverse logit (expit) functions — logit","title":"logit and inverse logit (expit) functions — logit","text":"logit inverse logit (expit) functions","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/logit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"logit and inverse logit (expit) functions — logit","text":"","code":"logit(x, low = 0, high = 1)  expit(alpha, low = 0, high = 1)  logitNormInfo(mean = 0, sd = 1, low = 0, high = 1, abs.tol = 1e-06, ...)  probitNormInfo(mean = 0, sd = 1, low = 0, high = 1, abs.tol = 1e-06, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/logit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"logit and inverse logit (expit) functions — logit","text":"x Input value(s) range [low,high] translate -Inf Inf low Lowest value range high Highest value range alpha Infinite value(s) translate range [low, high] mean logit-scale mean sd logit-scale standard deviation abs.tol absolute accuracy requested. ... parameters passed integrate()","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/logit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"logit and inverse logit (expit) functions — logit","text":"values logit expit","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/logit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"logit and inverse logit (expit) functions — logit","text":"logit given : logit(p) = -log(1/p-1) : p = x-low/high-low expit given : expit(p, low, high) = (high-low)/(1+exp(-alpha)) + low logitNormInfo() gives mean, variance coefficient variability untransformed scale.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/logit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"logit and inverse logit (expit) functions — logit","text":"","code":"logit(0.25) #> [1] -1.098612  expit(-1.09) #> [1] 0.2516183  logitNormInfo(logit(0.25), sd = 0.1) #>         mean          var           cv  #> 0.2504672899 0.0003515538 0.0748591440   logitNormInfo(logit(1, 0, 10), sd = 1, low = 0, high = 10) #>      mean       var        cv  #> 1.3386966 1.2662276 0.8405697"},{"path":"https://nlmixr2.github.io/rxode2/reference/lowergamma.html","id":null,"dir":"Reference","previous_headings":"","what":"lowergamma:  upper incomplete gamma function — lowergamma","title":"lowergamma:  upper incomplete gamma function — lowergamma","text":"tgamma_lower boost library","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/lowergamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"lowergamma:  upper incomplete gamma function — lowergamma","text":"","code":"lowergamma(a, z)"},{"path":"https://nlmixr2.github.io/rxode2/reference/lowergamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"lowergamma:  upper incomplete gamma function — lowergamma","text":"numeric '' parameter upper incomplete gamma z numeric 'z' parameter upper incomplete gamma","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/lowergamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"lowergamma:  upper incomplete gamma function — lowergamma","text":"lowergamma results","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/lowergamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"lowergamma:  upper incomplete gamma function — lowergamma","text":"lowergamma function given : $$lowergamma(, z) = \\int_{0}^{z}t^{-1}\\cdot e^{-t} dt$$","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/lowergamma.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"lowergamma:  upper incomplete gamma function — lowergamma","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/lowergamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"lowergamma:  upper incomplete gamma function — lowergamma","text":"","code":"lowergamma(1, 3) #> [1] 0.9502129  lowergamma(1:3, 3) #> [1] 0.9502129 0.8008517 1.1536198  lowergamma(1, 1:3) #> [1] 0.6321206 0.8646647 0.9502129"},{"path":"https://nlmixr2.github.io/rxode2/reference/model.html","id":null,"dir":"Reference","previous_headings":"","what":"Model block for rxode2/nlmixr models — model.function","title":"Model block for rxode2/nlmixr models — model.function","text":"Model block rxode2/nlmixr models","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model block for rxode2/nlmixr models — model.function","text":"","code":"# S3 method for `function` model(x, ..., append = FALSE, auto = TRUE, envir = parent.frame())  # S3 method for rxUi model(x, ..., append = FALSE, auto = TRUE, envir = parent.frame())  model(   x,   ...,   append = FALSE,   auto = getOption(\"rxode2.autoVarPiping\", TRUE),   envir = parent.frame() )  # S3 method for default model(x, ..., append = FALSE, envir = parent.frame())"},{"path":"https://nlmixr2.github.io/rxode2/reference/model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model block for rxode2/nlmixr models — model.function","text":"x model expression ... arguments append boolean determine lines appended piping.  possible values : TRUE lines appended model instead replaced (default) FALSE lines replaced model NA lines pre-pended model instead replaced auto boolean tells piping automatically selects parameters characterized population parameter, subject variability, covariate.  TRUE automatic selection occurs.  FALSE automatic selection turned everything added covariate (can promoted parameter ini statement). default TRUE, can changed options(rxode2.autoVarPiping=FALSE). envir environment unevaluated model expressions evaluated.  May also NULL, list, data frame, pairlist integer specified sys.call.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model block for rxode2/nlmixr models — model.function","text":"Model block ini information included.  ini must called model block","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/model.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Model block for rxode2/nlmixr models — model.function","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/phi.html","id":null,"dir":"Reference","previous_headings":"","what":"Cumulative distribution of standard normal — phi","title":"Cumulative distribution of standard normal — phi","text":"Cumulative distribution standard normal","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/phi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cumulative distribution of standard normal — phi","text":"","code":"phi(q)"},{"path":"https://nlmixr2.github.io/rxode2/reference/phi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cumulative distribution of standard normal — phi","text":"q vector quantiles.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/phi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cumulative distribution of standard normal — phi","text":"cumulative distribution standard normal distribution","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/phi.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cumulative distribution of standard normal — phi","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/phi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cumulative distribution of standard normal — phi","text":"","code":"# phi is equivalent to pnorm(x) phi(3) #> [1] 0.9986501  # See pnorm(3) #> [1] 0.9986501  # This is provided for NONMEM-like compatibility in rxode2 models"},{"path":"https://nlmixr2.github.io/rxode2/reference/plot.rxSolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot rxode2 objects — plot.rxSolve","title":"Plot rxode2 objects — plot.rxSolve","text":"Plot rxode2 objects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/plot.rxSolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot rxode2 objects — plot.rxSolve","text":"","code":"# S3 method for rxSolve plot(x, y, ..., log = \"\", xlab = \"Time\", ylab = \"\")  # S3 method for rxSolveConfint1 plot(x, y, ..., xlab = \"Time\", ylab = \"\", log = \"\")  # S3 method for rxSolveConfint2 plot(x, y, ..., xlab = \"Time\", ylab = \"\", log = \"\")"},{"path":"https://nlmixr2.github.io/rxode2/reference/plot.rxSolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot rxode2 objects — plot.rxSolve","text":"x rxode2 object plot y Compartments left-hand-side values plot either bare name character vector ... Ignored log \"\" (neither x y), \"x\", \"y\", \"xy\" (\"yx\") log-scale? xlab, ylab x y axis labels","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/plot.rxSolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot rxode2 objects — plot.rxSolve","text":"ggplot2 object","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/plus-.rxSolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Update Solved object with '+' — +.rxSolve","title":"Update Solved object with '+' — +.rxSolve","text":"Update Solved object '+'","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/plus-.rxSolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update Solved object with '+' — +.rxSolve","text":"","code":"# S3 method for rxSolve +(solved, new)"},{"path":"https://nlmixr2.github.io/rxode2/reference/plus-.rxSolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update Solved object with '+' — +.rxSolve","text":"solved Solved object new New information added table.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/plus-.rxSolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update Solved object with '+' — +.rxSolve","text":"new solved object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/plus-.rxSolve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Update Solved object with '+' — +.rxSolve","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/print.rxCoef.html","id":null,"dir":"Reference","previous_headings":"","what":"Print the rxCoef object — print.rxCoef","title":"Print the rxCoef object — print.rxCoef","text":"prints user supplied arguments rxCoef object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/print.rxCoef.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print the rxCoef object — print.rxCoef","text":"","code":"# S3 method for rxCoef print(x, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/print.rxCoef.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print the rxCoef object — print.rxCoef","text":"x rxCoef object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/print.rxCoef.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print the rxCoef object — print.rxCoef","text":"original object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/print.rxCoef.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print the rxCoef object — print.rxCoef","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/print.rxDll.html","id":null,"dir":"Reference","previous_headings":"","what":"Print rxDll object — print.rxDll","title":"Print rxDll object — print.rxDll","text":"tells rxDll loaded, ready /deleted.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/print.rxDll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print rxDll object — print.rxDll","text":"","code":"# S3 method for rxDll print(x, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/print.rxDll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print rxDll object — print.rxDll","text":"original object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/print.rxDll.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print rxDll object — print.rxDll","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/print.rxode2.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information about the rxode2 object. — print.rxode2","title":"Print information about the rxode2 object. — print.rxode2","text":"prints model name status able solved","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/print.rxode2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information about the rxode2 object. — print.rxode2","text":"","code":"# S3 method for rxode2 print(x, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/print.rxode2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print information about the rxode2 object. — print.rxode2","text":"x rxode2 object ... Ignored parameters","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/print.rxode2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print information about the rxode2 object. — print.rxode2","text":"original object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/print.rxode2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print information about the rxode2 object. — print.rxode2","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/probit.html","id":null,"dir":"Reference","previous_headings":"","what":"probit and inverse probit functions — probit","title":"probit and inverse probit functions — probit","text":"probit inverse probit functions","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/probit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"probit and inverse probit functions — probit","text":"","code":"probit(x, low = 0, high = 1)  probitInv(x, low = 0, high = 1)"},{"path":"https://nlmixr2.github.io/rxode2/reference/probit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"probit and inverse probit functions — probit","text":"x Input value(s) range [low,high] translate -Inf Inf low Lowest value range high Highest value range","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/probit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"probit and inverse probit functions — probit","text":"values probit, probitInv probitNormInfo","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/probit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"probit and inverse probit functions — probit","text":"","code":"probit(0.25) #> [1] -0.6744898  probitInv(-0.674) #> [1] 0.2501557  probitNormInfo(probit(0.25), sd = 0.1) #>       mean        var         cv  #> 0.25106491 0.00100658 0.12636827   probitNormInfo(probit(1, 0, 10), sd = 1, low = 0, high = 10) #>     mean      var       cv  #> 1.824166 4.307824 1.137796"},{"path":"https://nlmixr2.github.io/rxode2/reference/rLKJ1.html","id":null,"dir":"Reference","previous_headings":"","what":"One correlation sample from the LKJ distribution — rLKJ1","title":"One correlation sample from the LKJ distribution — rLKJ1","text":"One correlation sample LKJ distribution","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rLKJ1.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"One correlation sample from the LKJ distribution — rLKJ1","text":"","code":"rLKJ1(d, eta = 1, cholesky = FALSE)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rLKJ1.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"One correlation sample from the LKJ distribution — rLKJ1","text":"d dimension correlation matrix eta scaling parameter LKJ distribution. Must > 1.  Also related degrees freedom nu. eta = (nu-1)/2. cholesky boolean; TRUE return cholesky decomposition.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rLKJ1.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"One correlation sample from the LKJ distribution — rLKJ1","text":"correlation sample LKJ distribution","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rLKJ1.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"One correlation sample from the LKJ distribution — rLKJ1","text":"Matthew Fidler (translated RcppArmadillo) Emma Schwager","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. ggplot2 aes, expand_limits, facet_wrap, geom_line, ggplot, label_both, label_context, label_context, label_value, label_wrap_gen, scale_type, scale_x_continuous, scale_x_date, scale_x_discrete, scale_y_continuous, scale_y_date, scale_y_discrete, waiver, xlab, ylab lotri lotri magrittr %>%","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/reexports.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Objects exported from other packages — reexports","text":"Inherited parent routine","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rinvchisq.html","id":null,"dir":"Reference","previous_headings":"","what":"Scaled Inverse Chi Squared distribution — rinvchisq","title":"Scaled Inverse Chi Squared distribution — rinvchisq","text":"Scaled Inverse Chi Squared distribution","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rinvchisq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scaled Inverse Chi Squared distribution — rinvchisq","text":"","code":"rinvchisq(n = 1L, nu = 1, scale = 1)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rinvchisq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scaled Inverse Chi Squared distribution — rinvchisq","text":"n Number random samples nu degrees freedom inverse chi square scale Scale inverse chi squared distribution (default 1).","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rinvchisq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scaled Inverse Chi Squared distribution — rinvchisq","text":"vector inverse chi squared deviates.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rinvchisq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scaled Inverse Chi Squared distribution — rinvchisq","text":"","code":"rinvchisq(3, 4, 1) ## Scale = 1, degrees of freedom = 4 #> [1] 1.751169 1.694131 2.473799 rinvchisq(2, 4, 2) ## Scale = 2, degrees of freedom = 4 #> [1] 0.8921713 0.6741667"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAllowUnload.html","id":null,"dir":"Reference","previous_headings":"","what":"Allow unloading of dlls — rxAllowUnload","title":"Allow unloading of dlls — rxAllowUnload","text":"Allow unloading dlls","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAllowUnload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allow unloading of dlls — rxAllowUnload","text":"","code":"rxAllowUnload(allow)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAllowUnload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allow unloading of dlls — rxAllowUnload","text":"allow boolean indicating garbage collection unload rxode2 dlls.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAllowUnload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allow unloading of dlls — rxAllowUnload","text":"Boolean allow; called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAllowUnload.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Allow unloading of dlls — rxAllowUnload","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAllowUnload.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allow unloading of dlls — rxAllowUnload","text":"","code":"# Garbage collection will not unload un-used rxode2 dlls rxAllowUnload(FALSE); #> [1] FALSE  # Garbage collection will unload unused rxode2 dlls rxAllowUnload(TRUE); #> [1] TRUE"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAppendModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Append two rxui models together — rxAppendModel","title":"Append two rxui models together — rxAppendModel","text":"Append two rxui models together","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAppendModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Append two rxui models together — rxAppendModel","text":"","code":"rxAppendModel(model1, model2)  # S3 method for rxUi c(...)  # S3 method for rxUi rbind(..., deparse.level = 1)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAppendModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Append two rxui models together — rxAppendModel","text":"model1 rxUi model 1 model2 rxUi model 2 ... Models sent (order) rxAppendModel concatenate/bind models together deparse.level ignored parameter used rbind()","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAppendModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Append two rxui models together — rxAppendModel","text":"New model models appended together","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAppendModel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Append two rxui models together — rxAppendModel","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAppendModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Append two rxui models together — rxAppendModel","text":"","code":"ocmt <- function() {    ini({      tka <- exp(0.45) # Ka      tcl <- exp(1) # Cl      tv <- exp(3.45); # log V      ## the label(\"Label name\") works with all models      add.sd <- 0.7    })    model({      ka <- tka      cl <- tcl      v <- tv      d/dt(depot) = -ka * depot      d/dt(center) = ka * depot - cl / v * center      cp = center / v      cp ~ add(add.sd)    })  }  idr <- function() {   ini({      tkin <- log(1)      tkout <- log(1)      tic50 <- log(10)      gamma <- fix(1)      idr.sd <- 1    })   model({      kin <- exp(tkin)      kout <- exp(tkout)      ic50 <- exp(tic50)      d/dt(eff) <- kin - kout*(1-ceff^gamma/(ic50^gamma+ceff^gamma))      eff ~ add(idr.sd)   }) }  rxAppendModel(ocmt %>% model(ceff=cp,append=TRUE), idr) #>   #> ℹ parameter labels from comments will be replaced by 'label()' #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>       tka       tcl        tv    add.sd      tkin     tkout     tic50     gamma  #>  1.568312  2.718282 31.500392  0.700000  0.000000  0.000000  2.302585  1.000000  #>    idr.sd  #>  1.000000  #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>   variable                cmt                dvid* #> 1   cp ~ …  cmt='cp' or cmt=4  dvid='cp' or dvid=1 #> 2  eff ~ … cmt='eff' or cmt=3 dvid='eff' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         tka <- 1.56831218549017 #>         label(\"Ka\") #>         tcl <- 2.71828182845905 #>         label(\"Cl\") #>         tv <- 31.5003923087479 #>         label(\"log V\") #>         add.sd <- c(0, 0.7) #>         tkin <- 0 #>         tkout <- 0 #>         tic50 <- 2.30258509299405 #>         gamma <- fix(1) #>         idr.sd <- c(0, 1) #>     }) #>     model({ #>         ka <- tka #>         cl <- tcl #>         v <- tv #>         d/dt(depot) = -ka * depot #>         d/dt(center) = ka * depot - cl/v * center #>         cp = center/v #>         cp ~ add(add.sd) #>         ceff <- cp #>         kin <- exp(tkin) #>         kout <- exp(tkout) #>         ic50 <- exp(tic50) #>         d/dt(eff) <- kin - kout * (1 - ceff^gamma/(ic50^gamma +  #>             ceff^gamma)) #>         eff ~ add(idr.sd) #>     }) #> }  # You may also use c(...) or rbind(...) but this requires the first # argument to be an compiled/evaluated rxode2 model.  This can be # done by calling the function like 'ocmt()', or evaluating within # rxode2 ('rxode2(ocmt)') or piping /modifying it  c(ocmt %>% model(ceff=cp,append=TRUE), idr) #>   #> ℹ parameter labels from comments will be replaced by 'label()' #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>       tka       tcl        tv    add.sd      tkin     tkout     tic50     gamma  #>  1.568312  2.718282 31.500392  0.700000  0.000000  0.000000  2.302585  1.000000  #>    idr.sd  #>  1.000000  #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>   variable                cmt                dvid* #> 1   cp ~ …  cmt='cp' or cmt=4  dvid='cp' or dvid=1 #> 2  eff ~ … cmt='eff' or cmt=3 dvid='eff' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         tka <- 1.56831218549017 #>         label(\"Ka\") #>         tcl <- 2.71828182845905 #>         label(\"Cl\") #>         tv <- 31.5003923087479 #>         label(\"log V\") #>         add.sd <- c(0, 0.7) #>         tkin <- 0 #>         tkout <- 0 #>         tic50 <- 2.30258509299405 #>         gamma <- fix(1) #>         idr.sd <- c(0, 1) #>     }) #>     model({ #>         ka <- tka #>         cl <- tcl #>         v <- tv #>         d/dt(depot) = -ka * depot #>         d/dt(center) = ka * depot - cl/v * center #>         cp = center/v #>         cp ~ add(add.sd) #>         ceff <- cp #>         kin <- exp(tkin) #>         kout <- exp(tkout) #>         ic50 <- exp(tic50) #>         d/dt(eff) <- kin - kout * (1 - ceff^gamma/(ic50^gamma +  #>             ceff^gamma)) #>         eff ~ add(idr.sd) #>     }) #> }  rbind(ocmt %>% model(ceff=cp,append=TRUE), idr) #>   #> ℹ parameter labels from comments will be replaced by 'label()' #>   #>  ── rxode2-based free-form 3-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>       tka       tcl        tv    add.sd      tkin     tkout     tic50     gamma  #>  1.568312  2.718282 31.500392  0.700000  0.000000  0.000000  2.302585  1.000000  #>    idr.sd  #>  1.000000  #>  ── Multiple Endpoint Model ($multipleEndpoint): ──   #>   variable                cmt                dvid* #> 1   cp ~ …  cmt='cp' or cmt=4  dvid='cp' or dvid=1 #> 2  eff ~ … cmt='eff' or cmt=3 dvid='eff' or dvid=2 #>   * If dvids are outside this range, all dvids are re-numered sequentially, ie 1,7, 10 becomes 1,2,3 etc #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         tka <- 1.56831218549017 #>         label(\"Ka\") #>         tcl <- 2.71828182845905 #>         label(\"Cl\") #>         tv <- 31.5003923087479 #>         label(\"log V\") #>         add.sd <- c(0, 0.7) #>         tkin <- 0 #>         tkout <- 0 #>         tic50 <- 2.30258509299405 #>         gamma <- fix(1) #>         idr.sd <- c(0, 1) #>     }) #>     model({ #>         ka <- tka #>         cl <- tcl #>         v <- tv #>         d/dt(depot) = -ka * depot #>         d/dt(center) = ka * depot - cl/v * center #>         cp = center/v #>         cp ~ add(add.sd) #>         ceff <- cp #>         kin <- exp(tkin) #>         kout <- exp(tkout) #>         ic50 <- exp(tic50) #>         d/dt(eff) <- kin - kout * (1 - ceff^gamma/(ic50^gamma +  #>             ceff^gamma)) #>         eff ~ add(idr.sd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAssignControlValue.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign Control Variable — rxAssignControlValue","title":"Assign Control Variable — rxAssignControlValue","text":"Assign Control Variable","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAssignControlValue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign Control Variable — rxAssignControlValue","text":"","code":"rxAssignControlValue(ui, option, value)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAssignControlValue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign Control Variable — rxAssignControlValue","text":"ui rxode2 ui function option Option name control modify value Value control modify","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAssignControlValue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign Control Variable — rxAssignControlValue","text":"Nothing; called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAssignControlValue.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assign Control Variable — rxAssignControlValue","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAssignPtr.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign pointer based on model variables — rxAssignPtr","title":"Assign pointer based on model variables — rxAssignPtr","text":"Assign pointer based model variables","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAssignPtr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign pointer based on model variables — rxAssignPtr","text":"","code":"rxAssignPtr(object = NULL)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAssignPtr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign pointer based on model variables — rxAssignPtr","text":"object rxode2 family objects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxAssignPtr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign pointer based on model variables — rxAssignPtr","text":"nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxBlockZeros.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a logical matrix for block matrixes. — rxBlockZeros","title":"Creates a logical matrix for block matrixes. — rxBlockZeros","text":"Creates logical matrix block matrixes.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxBlockZeros.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a logical matrix for block matrixes. — rxBlockZeros","text":"","code":"rxBlockZeros(mat, i)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxBlockZeros.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a logical matrix for block matrixes. — rxBlockZeros","text":"mat Matrix Row/column block matrix setup.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxBlockZeros.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a logical matrix for block matrixes. — rxBlockZeros","text":"logical matrix returning elements zero.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxC.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the C file associated with the rxode2 object — rxC","title":"Return the C file associated with the rxode2 object — rxC","text":"return C code generating rxode2 DLL.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the C file associated with the rxode2 object — rxC","text":"","code":"rxC(obj)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the C file associated with the rxode2 object — rxC","text":"obj rxode2 family objects character string model specification location file model specification.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the C file associated with the rxode2 object — rxC","text":"path library","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return the C file associated with the rxode2 object — rxC","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCat.html","id":null,"dir":"Reference","previous_headings":"","what":"Use cat when rxode2.verbose is TRUE — rxCat","title":"Use cat when rxode2.verbose is TRUE — rxCat","text":"Use cat rxode2.verbose TRUE","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use cat when rxode2.verbose is TRUE — rxCat","text":"","code":"rxCat(a, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use cat when rxode2.verbose is TRUE — rxCat","text":"... Parameters sent cat","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use cat when rxode2.verbose is TRUE — rxCat","text":"nothing","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCat.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Use cat when rxode2.verbose is TRUE — rxCat","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCbindStudyIndividual.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind the study parameters and individual parameters — rxCbindStudyIndividual","title":"Bind the study parameters and individual parameters — rxCbindStudyIndividual","text":"Bind study parameters individual parameters","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCbindStudyIndividual.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind the study parameters and individual parameters — rxCbindStudyIndividual","text":"","code":"rxCbindStudyIndividual(studyParameters, individualParameters)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCbindStudyIndividual.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind the study parameters and individual parameters — rxCbindStudyIndividual","text":"studyParameters study parameters, often can generated sampling population.  can either matrix data frame individualParameters data frame individual parameters","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCbindStudyIndividual.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind the study parameters and individual parameters — rxCbindStudyIndividual","text":"Data frame can used rxode2 simulations","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCbindStudyIndividual.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Bind the study parameters and individual parameters — rxCbindStudyIndividual","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCbindStudyIndividual.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind the study parameters and individual parameters — rxCbindStudyIndividual","text":"","code":"# Function for coverting coefficient of covariance into a variance lognCv <- function(x){log((x/100)^2+1)}  set.seed(32)  nSub  <-  100 nStud  <-  10  #define theta theta <- c(lka=log(0.5), # log ka           lCl=log(5), # log Cl           lV=log(300) # log V           )  #define theta Matrix thetaMat <- lotri(lCl ~ lognCv(5),                  lV  ~ lognCv(5),                  lka ~ lognCv(5))   nev <- nSub*nStud  ev1 <- data.frame(COV1=rnorm(nev,50,30),COV2=rnorm(nev,75,10),                   COV3=sample(c(1.0,2.0),nev,replace=TRUE))   tmat <-rxRmvn(nStud, theta[dimnames(thetaMat)[[1]]], thetaMat)  rxCbindStudyIndividual(tmat, ev1) #>           lCl       lV        lka        COV1      COV2 COV3 #> 1    1.607304 5.719771 -0.6839015  50.4392162  70.66196    1 #> 2    1.607304 5.719771 -0.6839015  76.1986612  51.54621    1 #> 3    1.607304 5.719771 -0.6839015  19.1616139  71.83376    1 #> 4    1.607304 5.719771 -0.6839015  70.5699388  97.78351    2 #> 5    1.607304 5.719771 -0.6839015  63.4831094  66.85695    1 #> 6    1.607304 5.719771 -0.6839015  62.2105292  82.55363    2 #> 7    1.607304 5.719771 -0.6839015  58.5419410  62.74875    1 #> 8    1.607304 5.719771 -0.6839015  31.2707182  57.10467    1 #> 9    1.607304 5.719771 -0.6839015  75.1896803  71.51357    2 #> 10   1.607304 5.719771 -0.6839015  59.3383758  82.29588    1 #> 11   1.607304 5.719771 -0.6839015  64.2576042  72.52852    1 #> 12   1.607304 5.719771 -0.6839015  46.9972989  90.49283    2 #> 13   1.607304 5.719771 -0.6839015  56.1053755  70.40540    2 #> 14   1.607304 5.719771 -0.6839015  47.1769492  74.99919    1 #> 15   1.607304 5.719771 -0.6839015  53.0070458  71.85786    1 #> 16   1.607304 5.719771 -0.6839015  41.9531819  85.10154    2 #> 17   1.607304 5.719771 -0.6839015  90.3817524  68.09919    2 #> 18   1.607304 5.719771 -0.6839015  45.6069772  87.68332    2 #> 19   1.607304 5.719771 -0.6839015  51.4929710  78.54242    2 #> 20   1.607304 5.719771 -0.6839015  75.0119850  70.62079    1 #> 21   1.607304 5.719771 -0.6839015  41.2732735  62.85309    1 #> 22   1.607304 5.719771 -0.6839015  17.4579412  60.01102    1 #> 23   1.607304 5.719771 -0.6839015  78.1798965  71.00092    2 #> 24   1.607304 5.719771 -0.6839015  60.8240586  88.18910    1 #> 25   1.607304 5.719771 -0.6839015  72.2097805  67.26544    2 #> 26   1.607304 5.719771 -0.6839015  76.4570517  77.65842    2 #> 27   1.607304 5.719771 -0.6839015  65.8597676  77.46590    1 #> 28   1.607304 5.719771 -0.6839015 -11.5093946  73.63090    2 #> 29   1.607304 5.719771 -0.6839015  79.4650077  70.90530    2 #> 30   1.607304 5.719771 -0.6839015  64.2040257  65.38198    2 #> 31   1.607304 5.719771 -0.6839015  74.6127558  64.79464    1 #> 32   1.607304 5.719771 -0.6839015  67.6996446  88.98030    2 #> 33   1.607304 5.719771 -0.6839015  25.6399993  77.62073    2 #> 34   1.607304 5.719771 -0.6839015  80.6050221  65.78672    2 #> 35   1.607304 5.719771 -0.6839015  96.5733053  90.61418    1 #> 36   1.607304 5.719771 -0.6839015  79.5213975  78.61057    1 #> 37   1.607304 5.719771 -0.6839015  46.4445863  61.66917    1 #> 38   1.607304 5.719771 -0.6839015  13.6205265  75.75972    1 #> 39   1.607304 5.719771 -0.6839015  69.8343811  82.37549    2 #> 40   1.607304 5.719771 -0.6839015  40.8148886  94.50969    2 #> 41   1.607304 5.719771 -0.6839015  52.4049003  78.14845    1 #> 42   1.607304 5.719771 -0.6839015  52.4778514  57.68410    1 #> 43   1.607304 5.719771 -0.6839015  22.1783261  77.09679    1 #> 44   1.607304 5.719771 -0.6839015  46.3933207  77.77013    1 #> 45   1.607304 5.719771 -0.6839015  23.7368451  62.37419    1 #> 46   1.607304 5.719771 -0.6839015   1.9459432  79.16596    2 #> 47   1.607304 5.719771 -0.6839015  15.5076749  60.22776    1 #> 48   1.607304 5.719771 -0.6839015  31.5512208  74.52360    1 #> 49   1.607304 5.719771 -0.6839015  30.7194479  64.36655    2 #> 50   1.607304 5.719771 -0.6839015  12.5473169  56.33737    2 #> 51   1.607304 5.719771 -0.6839015  61.2498142  67.93173    1 #> 52   1.607304 5.719771 -0.6839015  44.1575132  75.64240    2 #> 53   1.607304 5.719771 -0.6839015  35.8231965  79.73345    2 #> 54   1.607304 5.719771 -0.6839015  48.1079451  81.25286    1 #> 55   1.607304 5.719771 -0.6839015   4.1550156  65.35836    1 #> 56   1.607304 5.719771 -0.6839015  27.8538742  87.86854    2 #> 57   1.607304 5.719771 -0.6839015  73.1211941  63.44239    1 #> 58   1.607304 5.719771 -0.6839015  44.3472840  85.53331    1 #> 59   1.607304 5.719771 -0.6839015  76.4857002  80.78371    2 #> 60   1.607304 5.719771 -0.6839015  32.0178192  80.28942    1 #> 61   1.607304 5.719771 -0.6839015  19.4646945  79.86622    1 #> 62   1.607304 5.719771 -0.6839015 -12.3783975  70.20201    2 #> 63   1.607304 5.719771 -0.6839015  41.0473400  63.11725    1 #> 64   1.607304 5.719771 -0.6839015  56.5048458  89.52226    2 #> 65   1.607304 5.719771 -0.6839015  53.7772297  84.53200    1 #> 66   1.607304 5.719771 -0.6839015  22.0830914  84.80086    1 #> 67   1.607304 5.719771 -0.6839015  26.4159793  94.95606    2 #> 68   1.607304 5.719771 -0.6839015  62.2241433  78.84814    2 #> 69   1.607304 5.719771 -0.6839015  61.7576517  60.34825    1 #> 70   1.607304 5.719771 -0.6839015  48.8577715  61.99353    1 #> 71   1.607304 5.719771 -0.6839015  16.3926620  55.24774    1 #> 72   1.607304 5.719771 -0.6839015  59.5427284  80.22367    2 #> 73   1.607304 5.719771 -0.6839015  60.5463528  83.25528    1 #> 74   1.607304 5.719771 -0.6839015  34.4879944  80.15938    2 #> 75   1.607304 5.719771 -0.6839015  23.6753215  77.25946    2 #> 76   1.607304 5.719771 -0.6839015  39.3029386  88.03693    2 #> 77   1.607304 5.719771 -0.6839015  91.7359360  90.93438    1 #> 78   1.607304 5.719771 -0.6839015 -30.9112428  48.23557    2 #> 79   1.607304 5.719771 -0.6839015  60.1236161  78.04262    2 #> 80   1.607304 5.719771 -0.6839015  37.7844671  96.99041    2 #> 81   1.607304 5.719771 -0.6839015  90.8042884  82.76736    2 #> 82   1.607304 5.719771 -0.6839015  13.8889632  77.14949    2 #> 83   1.607304 5.719771 -0.6839015  14.2401454  84.27253    1 #> 84   1.607304 5.719771 -0.6839015  -7.8223194  70.25095    2 #> 85   1.607304 5.719771 -0.6839015  57.9146416  87.04522    2 #> 86   1.607304 5.719771 -0.6839015  82.9157470  78.87614    2 #> 87   1.607304 5.719771 -0.6839015  78.1119804  79.40393    2 #> 88   1.607304 5.719771 -0.6839015  55.0322709  85.68824    2 #> 89   1.607304 5.719771 -0.6839015  74.7709478  66.44219    1 #> 90   1.607304 5.719771 -0.6839015  27.3116099  73.97360    1 #> 91   1.607304 5.719771 -0.6839015  34.1575424  72.03973    2 #> 92   1.607304 5.719771 -0.6839015  53.3668520  68.57956    1 #> 93   1.607304 5.719771 -0.6839015  89.2950340  75.21063    2 #> 94   1.607304 5.719771 -0.6839015  90.2010652  85.99426    1 #> 95   1.607304 5.719771 -0.6839015  67.7957424  71.51220    2 #> 96   1.607304 5.719771 -0.6839015  57.1605881  69.57692    1 #> 97   1.607304 5.719771 -0.6839015  27.0744964  74.41100    1 #> 98   1.607304 5.719771 -0.6839015  34.5612722  71.28752    1 #> 99   1.607304 5.719771 -0.6839015  29.1971409  83.80223    2 #> 100  1.607304 5.719771 -0.6839015  49.6872370  69.33945    2 #> 101  1.725806 5.748221 -0.7011048  32.6009902  67.30618    1 #> 102  1.725806 5.748221 -0.7011048  63.6353581  71.67337    2 #> 103  1.725806 5.748221 -0.7011048  43.9290434  78.97433    1 #> 104  1.725806 5.748221 -0.7011048  42.2490048  82.43933    2 #> 105  1.725806 5.748221 -0.7011048  53.0755018  61.52006    1 #> 106  1.725806 5.748221 -0.7011048  33.6951552  67.92496    1 #> 107  1.725806 5.748221 -0.7011048  51.9056000  82.44938    2 #> 108  1.725806 5.748221 -0.7011048  62.3551777  72.35504    2 #> 109  1.725806 5.748221 -0.7011048  52.2855212  68.81158    1 #> 110  1.725806 5.748221 -0.7011048  57.1403145  82.54662    2 #> 111  1.725806 5.748221 -0.7011048  30.2370673  67.40756    2 #> 112  1.725806 5.748221 -0.7011048  17.5741031  68.07342    2 #> 113  1.725806 5.748221 -0.7011048 103.4040015  77.90186    1 #> 114  1.725806 5.748221 -0.7011048  17.1038275  73.91354    2 #> 115  1.725806 5.748221 -0.7011048  49.8027185  81.48599    1 #> 116  1.725806 5.748221 -0.7011048 -11.4692481  64.76781    1 #> 117  1.725806 5.748221 -0.7011048  98.9071450  64.83333    1 #> 118  1.725806 5.748221 -0.7011048  37.6980931  70.31285    2 #> 119  1.725806 5.748221 -0.7011048  19.2868862  66.63816    1 #> 120  1.725806 5.748221 -0.7011048  51.0225062  83.88089    1 #> 121  1.725806 5.748221 -0.7011048  40.5382319  72.10914    1 #> 122  1.725806 5.748221 -0.7011048 101.5279207  80.94546    2 #> 123  1.725806 5.748221 -0.7011048  39.5403917  61.69040    2 #> 124  1.725806 5.748221 -0.7011048  70.0177582  73.65824    2 #> 125  1.725806 5.748221 -0.7011048  68.4393667  60.60936    2 #> 126  1.725806 5.748221 -0.7011048  95.4758801  76.48798    2 #> 127  1.725806 5.748221 -0.7011048 100.7280319  83.84368    1 #> 128  1.725806 5.748221 -0.7011048  31.1387506  84.25006    2 #> 129  1.725806 5.748221 -0.7011048  82.6307951  62.72472    1 #> 130  1.725806 5.748221 -0.7011048  73.1841931  81.63374    1 #> 131  1.725806 5.748221 -0.7011048  61.9958164  62.05448    1 #> 132  1.725806 5.748221 -0.7011048  91.3427083  86.26454    1 #> 133  1.725806 5.748221 -0.7011048  33.2167104  67.23963    2 #> 134  1.725806 5.748221 -0.7011048  11.7911197  67.49478    2 #> 135  1.725806 5.748221 -0.7011048  22.8650443  87.65617    1 #> 136  1.725806 5.748221 -0.7011048  22.4124998  71.17249    1 #> 137  1.725806 5.748221 -0.7011048  53.8564393  47.10541    2 #> 138  1.725806 5.748221 -0.7011048  44.8924890  73.24976    1 #> 139  1.725806 5.748221 -0.7011048  31.0650744  65.49308    1 #> 140  1.725806 5.748221 -0.7011048  17.8982324  73.66385    2 #> 141  1.725806 5.748221 -0.7011048  62.6270864  80.81898    2 #> 142  1.725806 5.748221 -0.7011048  53.5904127  70.59717    2 #> 143  1.725806 5.748221 -0.7011048  70.4837507  56.87197    1 #> 144  1.725806 5.748221 -0.7011048  42.5116968  67.28455    2 #> 145  1.725806 5.748221 -0.7011048  48.7878958  78.56057    2 #> 146  1.725806 5.748221 -0.7011048   0.9279941  85.57283    1 #> 147  1.725806 5.748221 -0.7011048 -18.3507952  86.95583    2 #> 148  1.725806 5.748221 -0.7011048 101.7579054  54.42115    2 #> 149  1.725806 5.748221 -0.7011048  24.6569588  75.49368    2 #> 150  1.725806 5.748221 -0.7011048  -7.9259128  77.66407    1 #> 151  1.725806 5.748221 -0.7011048  43.0784489  79.64376    1 #> 152  1.725806 5.748221 -0.7011048  36.1701133  82.19816    1 #> 153  1.725806 5.748221 -0.7011048  69.1335142  71.72814    2 #> 154  1.725806 5.748221 -0.7011048  33.6016215  70.27974    1 #> 155  1.725806 5.748221 -0.7011048  70.9239936  79.51531    1 #> 156  1.725806 5.748221 -0.7011048  87.7203229  72.59223    2 #> 157  1.725806 5.748221 -0.7011048  57.1156306  72.77681    2 #> 158  1.725806 5.748221 -0.7011048  60.4126793  82.76394    1 #> 159  1.725806 5.748221 -0.7011048  92.8375220  68.19552    1 #> 160  1.725806 5.748221 -0.7011048  63.2372782  72.24436    1 #> 161  1.725806 5.748221 -0.7011048  33.9613589  75.23715    1 #> 162  1.725806 5.748221 -0.7011048  81.6248543  76.55037    2 #> 163  1.725806 5.748221 -0.7011048  19.1811051  63.10995    2 #> 164  1.725806 5.748221 -0.7011048  75.3831810  69.18568    2 #> 165  1.725806 5.748221 -0.7011048 102.6843377  77.56710    2 #> 166  1.725806 5.748221 -0.7011048   4.1677784  85.11736    1 #> 167  1.725806 5.748221 -0.7011048  54.6184949  78.90585    1 #> 168  1.725806 5.748221 -0.7011048  76.6307625  77.20472    1 #> 169  1.725806 5.748221 -0.7011048 -15.0363003  88.79087    2 #> 170  1.725806 5.748221 -0.7011048  34.1118242  67.00169    1 #> 171  1.725806 5.748221 -0.7011048  35.2179067  79.35038    1 #> 172  1.725806 5.748221 -0.7011048  64.3295332  61.19219    2 #> 173  1.725806 5.748221 -0.7011048  40.4356811  74.68001    2 #> 174  1.725806 5.748221 -0.7011048  53.1522189  79.54962    1 #> 175  1.725806 5.748221 -0.7011048  70.2934969  63.31328    1 #> 176  1.725806 5.748221 -0.7011048  59.3989841  60.12108    1 #> 177  1.725806 5.748221 -0.7011048  46.6562879  83.05199    2 #> 178  1.725806 5.748221 -0.7011048  31.2214418  66.17985    1 #> 179  1.725806 5.748221 -0.7011048  58.0454805  67.40731    1 #> 180  1.725806 5.748221 -0.7011048   8.5442654  60.64299    2 #> 181  1.725806 5.748221 -0.7011048  -8.6994540  67.61161    2 #> 182  1.725806 5.748221 -0.7011048  61.9941352  56.18405    2 #> 183  1.725806 5.748221 -0.7011048  30.1262921  76.65569    2 #> 184  1.725806 5.748221 -0.7011048  24.5441908  69.14319    2 #> 185  1.725806 5.748221 -0.7011048  50.9208933  88.10101    2 #> 186  1.725806 5.748221 -0.7011048  69.7603735  87.51329    1 #> 187  1.725806 5.748221 -0.7011048  31.0769298  57.86124    1 #> 188  1.725806 5.748221 -0.7011048  90.5089258  90.74690    2 #> 189  1.725806 5.748221 -0.7011048  21.6640120  80.99970    1 #> 190  1.725806 5.748221 -0.7011048  47.6529746  78.80285    1 #> 191  1.725806 5.748221 -0.7011048 100.8414400  87.18736    1 #> 192  1.725806 5.748221 -0.7011048  73.7435691  67.51377    2 #> 193  1.725806 5.748221 -0.7011048  82.2576758  67.84921    2 #> 194  1.725806 5.748221 -0.7011048  29.5939114  86.13265    2 #> 195  1.725806 5.748221 -0.7011048  55.1984696  83.14714    1 #> 196  1.725806 5.748221 -0.7011048  84.6325985  61.39152    1 #> 197  1.725806 5.748221 -0.7011048  31.4798259  82.13564    2 #> 198  1.725806 5.748221 -0.7011048  38.3235350  81.68327    2 #> 199  1.725806 5.748221 -0.7011048  -8.4598097  70.31626    2 #> 200  1.725806 5.748221 -0.7011048  22.6554638  91.57896    1 #> 201  1.612201 5.776903 -0.6499896 -33.4003934  69.48843    1 #> 202  1.612201 5.776903 -0.6499896  52.2460410  75.97223    1 #> 203  1.612201 5.776903 -0.6499896  50.5880517  55.38187    1 #> 204  1.612201 5.776903 -0.6499896   8.7755868  74.53357    2 #> 205  1.612201 5.776903 -0.6499896 -10.6399840  89.02478    1 #> 206  1.612201 5.776903 -0.6499896  77.9804152  69.63404    1 #> 207  1.612201 5.776903 -0.6499896 111.9523274  63.11713    1 #> 208  1.612201 5.776903 -0.6499896 124.7472852  63.77779    2 #> 209  1.612201 5.776903 -0.6499896  41.0472614 109.19664    1 #> 210  1.612201 5.776903 -0.6499896  64.0597410  77.51251    1 #> 211  1.612201 5.776903 -0.6499896  61.8963879  67.56591    2 #> 212  1.612201 5.776903 -0.6499896  37.5018346  82.30857    2 #> 213  1.612201 5.776903 -0.6499896  61.5478787  64.67103    1 #> 214  1.612201 5.776903 -0.6499896  83.1943400  82.83273    1 #> 215  1.612201 5.776903 -0.6499896  17.7022001  82.39610    2 #> 216  1.612201 5.776903 -0.6499896 -14.2484933  69.37045    2 #> 217  1.612201 5.776903 -0.6499896  53.8941794  78.87093    2 #> 218  1.612201 5.776903 -0.6499896 103.5306147  72.10062    1 #> 219  1.612201 5.776903 -0.6499896  42.7939220  65.36429    2 #> 220  1.612201 5.776903 -0.6499896  73.7937437  61.97888    2 #> 221  1.612201 5.776903 -0.6499896  48.8117668  55.55597    1 #> 222  1.612201 5.776903 -0.6499896  28.1380983  69.42380    1 #> 223  1.612201 5.776903 -0.6499896  39.3779860  80.40495    2 #> 224  1.612201 5.776903 -0.6499896  62.8854692  77.64617    2 #> 225  1.612201 5.776903 -0.6499896  72.7218939  92.21864    1 #> 226  1.612201 5.776903 -0.6499896  66.5973495  78.22719    2 #> 227  1.612201 5.776903 -0.6499896  73.8570482  62.72534    2 #> 228  1.612201 5.776903 -0.6499896  18.5894635  67.62931    1 #> 229  1.612201 5.776903 -0.6499896  68.5556038  86.50493    1 #> 230  1.612201 5.776903 -0.6499896  30.1182224  71.89803    1 #> 231  1.612201 5.776903 -0.6499896  78.3971169  69.50827    2 #> 232  1.612201 5.776903 -0.6499896  73.5007234  69.40116    1 #> 233  1.612201 5.776903 -0.6499896  28.3210675  70.92010    1 #> 234  1.612201 5.776903 -0.6499896  46.6133629  77.06448    2 #> 235  1.612201 5.776903 -0.6499896  53.2401976  85.49854    2 #> 236  1.612201 5.776903 -0.6499896  63.4793431  58.30338    2 #> 237  1.612201 5.776903 -0.6499896  59.0269030  78.85214    1 #> 238  1.612201 5.776903 -0.6499896  93.5334639  72.54020    2 #> 239  1.612201 5.776903 -0.6499896  63.8996826  77.72598    2 #> 240  1.612201 5.776903 -0.6499896  68.8411703  70.86692    1 #> 241  1.612201 5.776903 -0.6499896  46.6390668  78.55434    1 #> 242  1.612201 5.776903 -0.6499896  68.5895359  60.86947    2 #> 243  1.612201 5.776903 -0.6499896  53.9343358  93.15884    2 #> 244  1.612201 5.776903 -0.6499896 101.7444338  98.30442    2 #> 245  1.612201 5.776903 -0.6499896  27.6387148  66.01310    1 #> 246  1.612201 5.776903 -0.6499896  22.1740324  75.26732    1 #> 247  1.612201 5.776903 -0.6499896  54.3124668  67.99166    2 #> 248  1.612201 5.776903 -0.6499896  68.6880503  84.26854    1 #> 249  1.612201 5.776903 -0.6499896  32.9912889  73.10049    1 #> 250  1.612201 5.776903 -0.6499896  37.0764193  60.87192    1 #> 251  1.612201 5.776903 -0.6499896  70.3974993  77.76398    1 #> 252  1.612201 5.776903 -0.6499896  37.2197366  76.65401    2 #> 253  1.612201 5.776903 -0.6499896  14.4365256  77.64115    2 #> 254  1.612201 5.776903 -0.6499896  29.9881040  53.00732    2 #> 255  1.612201 5.776903 -0.6499896  32.7384157  72.68504    1 #> 256  1.612201 5.776903 -0.6499896 115.5606580  67.00864    1 #> 257  1.612201 5.776903 -0.6499896  13.1778779  64.47407    2 #> 258  1.612201 5.776903 -0.6499896  43.9159381  75.48144    2 #> 259  1.612201 5.776903 -0.6499896  57.4438694  82.49917    1 #> 260  1.612201 5.776903 -0.6499896  35.3357869  67.90399    1 #> 261  1.612201 5.776903 -0.6499896  93.3877659  64.53529    1 #> 262  1.612201 5.776903 -0.6499896  55.8988571  69.94468    1 #> 263  1.612201 5.776903 -0.6499896 100.8071811  73.59461    1 #> 264  1.612201 5.776903 -0.6499896  58.2207959  91.20699    1 #> 265  1.612201 5.776903 -0.6499896  76.8416269  78.71474    2 #> 266  1.612201 5.776903 -0.6499896  47.2898040  79.51328    2 #> 267  1.612201 5.776903 -0.6499896  21.6059507  74.03412    1 #> 268  1.612201 5.776903 -0.6499896  64.0007893  55.95205    1 #> 269  1.612201 5.776903 -0.6499896  45.8709065  88.91552    1 #> 270  1.612201 5.776903 -0.6499896 107.1590022  57.55893    1 #> 271  1.612201 5.776903 -0.6499896  65.0859265  65.90542    2 #> 272  1.612201 5.776903 -0.6499896 119.1018283  75.01579    1 #> 273  1.612201 5.776903 -0.6499896  55.4592815  78.29274    2 #> 274  1.612201 5.776903 -0.6499896  31.8241194  65.68231    2 #> 275  1.612201 5.776903 -0.6499896  69.6482017  68.30628    2 #> 276  1.612201 5.776903 -0.6499896  57.9246085  75.74779    1 #> 277  1.612201 5.776903 -0.6499896  22.6963639  89.12890    2 #> 278  1.612201 5.776903 -0.6499896  86.2301450  91.36398    2 #> 279  1.612201 5.776903 -0.6499896 119.0278886  72.84194    2 #> 280  1.612201 5.776903 -0.6499896  59.1657062  68.30592    2 #> 281  1.612201 5.776903 -0.6499896  11.9152188  79.51124    1 #> 282  1.612201 5.776903 -0.6499896  -5.3716411  74.44313    1 #> 283  1.612201 5.776903 -0.6499896  57.4626697  63.37160    2 #> 284  1.612201 5.776903 -0.6499896  18.2516164  80.85700    1 #> 285  1.612201 5.776903 -0.6499896  35.8143158  81.09371    1 #> 286  1.612201 5.776903 -0.6499896  40.8566944  76.68455    1 #> 287  1.612201 5.776903 -0.6499896  11.9086877  79.05337    1 #> 288  1.612201 5.776903 -0.6499896  41.5697738  71.20915    1 #> 289  1.612201 5.776903 -0.6499896  61.1172570  68.21870    1 #> 290  1.612201 5.776903 -0.6499896  53.9569722  79.28401    2 #> 291  1.612201 5.776903 -0.6499896  70.1390883  79.39509    2 #> 292  1.612201 5.776903 -0.6499896  50.2440058  78.13196    1 #> 293  1.612201 5.776903 -0.6499896  29.3641415  61.43075    1 #> 294  1.612201 5.776903 -0.6499896  43.4205986  68.31340    2 #> 295  1.612201 5.776903 -0.6499896  11.9649051  59.88530    2 #> 296  1.612201 5.776903 -0.6499896  48.1018591  45.74281    1 #> 297  1.612201 5.776903 -0.6499896  60.3230568  74.24123    2 #> 298  1.612201 5.776903 -0.6499896  49.2737025  94.60425    1 #> 299  1.612201 5.776903 -0.6499896  89.2126057  65.93396    1 #> 300  1.612201 5.776903 -0.6499896  84.6711995  55.00520    2 #> 301  1.559204 5.686155 -0.6440680  16.2966677  68.34929    2 #> 302  1.559204 5.686155 -0.6440680 -23.8738375  81.29663    1 #> 303  1.559204 5.686155 -0.6440680  37.5517212  76.96609    1 #> 304  1.559204 5.686155 -0.6440680  61.7803372  57.67100    2 #> 305  1.559204 5.686155 -0.6440680  31.7448921  74.50269    1 #> 306  1.559204 5.686155 -0.6440680 103.7553019  76.50833    2 #> 307  1.559204 5.686155 -0.6440680  68.3064419  78.66488    1 #> 308  1.559204 5.686155 -0.6440680  46.3723587  72.80769    2 #> 309  1.559204 5.686155 -0.6440680  44.2082165  88.52164    2 #> 310  1.559204 5.686155 -0.6440680  16.7410057  71.31052    1 #> 311  1.559204 5.686155 -0.6440680   4.8366902  66.14520    2 #> 312  1.559204 5.686155 -0.6440680  40.7731288  60.79451    2 #> 313  1.559204 5.686155 -0.6440680  45.5423139  81.48294    2 #> 314  1.559204 5.686155 -0.6440680  34.5441864  83.36918    1 #> 315  1.559204 5.686155 -0.6440680  80.6230295  76.44552    1 #> 316  1.559204 5.686155 -0.6440680  41.0777626  66.61761    1 #> 317  1.559204 5.686155 -0.6440680  67.2442111  62.97680    1 #> 318  1.559204 5.686155 -0.6440680  55.7534751  71.47254    1 #> 319  1.559204 5.686155 -0.6440680  23.0419496  75.92260    2 #> 320  1.559204 5.686155 -0.6440680  50.5344811  60.99439    1 #> 321  1.559204 5.686155 -0.6440680  56.6442255  70.42003    1 #> 322  1.559204 5.686155 -0.6440680  49.6816955  78.48606    2 #> 323  1.559204 5.686155 -0.6440680  42.5396571  70.92581    1 #> 324  1.559204 5.686155 -0.6440680  85.4587299  71.81209    1 #> 325  1.559204 5.686155 -0.6440680  49.7048695  71.80567    2 #> 326  1.559204 5.686155 -0.6440680  43.7052724  71.15110    1 #> 327  1.559204 5.686155 -0.6440680  25.6587367  73.88314    1 #> 328  1.559204 5.686155 -0.6440680  38.0842682  68.11214    2 #> 329  1.559204 5.686155 -0.6440680  58.0814658  79.02879    2 #> 330  1.559204 5.686155 -0.6440680  47.0620228  78.75508    2 #> 331  1.559204 5.686155 -0.6440680  75.2547281  61.06943    1 #> 332  1.559204 5.686155 -0.6440680  59.1631641  70.49261    2 #> 333  1.559204 5.686155 -0.6440680  64.8077362  75.55531    1 #> 334  1.559204 5.686155 -0.6440680  70.2267571  85.75407    2 #> 335  1.559204 5.686155 -0.6440680  78.1350880  87.25513    2 #> 336  1.559204 5.686155 -0.6440680  99.9391549  73.21560    2 #> 337  1.559204 5.686155 -0.6440680  26.8114696  69.27603    1 #> 338  1.559204 5.686155 -0.6440680  42.2920693  73.35812    1 #> 339  1.559204 5.686155 -0.6440680  11.5777747  66.92449    1 #> 340  1.559204 5.686155 -0.6440680   7.2326812  76.23257    2 #> 341  1.559204 5.686155 -0.6440680  32.0251435  64.28934    2 #> 342  1.559204 5.686155 -0.6440680   5.6848147  84.06207    2 #> 343  1.559204 5.686155 -0.6440680  17.8630157  83.72065    1 #> 344  1.559204 5.686155 -0.6440680  39.2471861  71.08365    1 #> 345  1.559204 5.686155 -0.6440680  42.3913534  78.36272    2 #> 346  1.559204 5.686155 -0.6440680  37.1359731  80.05851    1 #> 347  1.559204 5.686155 -0.6440680  70.3095886  85.66656    1 #> 348  1.559204 5.686155 -0.6440680  73.1411037  84.16674    1 #> 349  1.559204 5.686155 -0.6440680  72.2027827  67.90291    2 #> 350  1.559204 5.686155 -0.6440680  89.0892997  69.01875    1 #> 351  1.559204 5.686155 -0.6440680  38.3062060  87.58053    2 #> 352  1.559204 5.686155 -0.6440680  94.6363923  69.93447    2 #> 353  1.559204 5.686155 -0.6440680  22.1603083  70.25841    1 #> 354  1.559204 5.686155 -0.6440680  86.6445941  58.44013    1 #> 355  1.559204 5.686155 -0.6440680  63.6328470  68.47071    1 #> 356  1.559204 5.686155 -0.6440680  47.4000258  79.02593    2 #> 357  1.559204 5.686155 -0.6440680  56.8906269  78.73618    1 #> 358  1.559204 5.686155 -0.6440680 138.4604907  91.03089    2 #> 359  1.559204 5.686155 -0.6440680  34.2312321  70.08259    1 #> 360  1.559204 5.686155 -0.6440680  28.7816357  68.35925    1 #> 361  1.559204 5.686155 -0.6440680  63.6295615  74.22550    1 #> 362  1.559204 5.686155 -0.6440680  17.8966286  75.69102    1 #> 363  1.559204 5.686155 -0.6440680  65.2934670  78.64505    1 #> 364  1.559204 5.686155 -0.6440680  63.4292942  67.34958    1 #> 365  1.559204 5.686155 -0.6440680  62.0240976  72.98431    2 #> 366  1.559204 5.686155 -0.6440680 -18.8146117  71.94563    2 #> 367  1.559204 5.686155 -0.6440680  50.0382446  60.28001    2 #> 368  1.559204 5.686155 -0.6440680  38.9153391  69.05125    2 #> 369  1.559204 5.686155 -0.6440680  34.9527197  90.92124    1 #> 370  1.559204 5.686155 -0.6440680  57.3564028  81.09840    2 #> 371  1.559204 5.686155 -0.6440680   5.6676726  82.55833    2 #> 372  1.559204 5.686155 -0.6440680  -2.4178148  76.20637    2 #> 373  1.559204 5.686155 -0.6440680  35.7885424  69.99939    2 #> 374  1.559204 5.686155 -0.6440680  47.7368090  80.19972    2 #> 375  1.559204 5.686155 -0.6440680 101.4735251  69.22624    2 #> 376  1.559204 5.686155 -0.6440680  -2.2779624  71.66347    2 #> 377  1.559204 5.686155 -0.6440680  20.0816173  80.03776    1 #> 378  1.559204 5.686155 -0.6440680  86.7090448  66.93729    2 #> 379  1.559204 5.686155 -0.6440680 113.6281574  87.99688    1 #> 380  1.559204 5.686155 -0.6440680  60.5466001  73.51926    2 #> 381  1.559204 5.686155 -0.6440680  77.7692487  91.64848    1 #> 382  1.559204 5.686155 -0.6440680  53.8636442  74.24403    1 #> 383  1.559204 5.686155 -0.6440680  48.1572877  59.35281    1 #> 384  1.559204 5.686155 -0.6440680  74.3395680  71.52724    1 #> 385  1.559204 5.686155 -0.6440680  82.6948844  78.87735    2 #> 386  1.559204 5.686155 -0.6440680  46.4934373  82.17691    2 #> 387  1.559204 5.686155 -0.6440680  25.6491388  77.72397    1 #> 388  1.559204 5.686155 -0.6440680  64.7947383  65.57023    1 #> 389  1.559204 5.686155 -0.6440680  87.6883038  89.76483    2 #> 390  1.559204 5.686155 -0.6440680  36.3328494  75.40819    2 #> 391  1.559204 5.686155 -0.6440680  26.4426459  73.85141    2 #> 392  1.559204 5.686155 -0.6440680  90.8342567  66.25896    2 #> 393  1.559204 5.686155 -0.6440680  93.6867760  57.91092    2 #> 394  1.559204 5.686155 -0.6440680  36.2778295  82.04241    2 #> 395  1.559204 5.686155 -0.6440680  56.8188275  73.16254    2 #> 396  1.559204 5.686155 -0.6440680  26.4980424  85.67589    1 #> 397  1.559204 5.686155 -0.6440680  25.4763875  70.98675    1 #> 398  1.559204 5.686155 -0.6440680  83.1803210  66.45085    1 #> 399  1.559204 5.686155 -0.6440680   1.7994674  59.17247    1 #> 400  1.559204 5.686155 -0.6440680  64.4949075  76.40213    2 #> 401  1.573205 5.714690 -0.7134309  48.8215960  68.12087    2 #> 402  1.573205 5.714690 -0.7134309  77.2970093  86.06118    2 #> 403  1.573205 5.714690 -0.7134309  67.4089724  65.71332    2 #> 404  1.573205 5.714690 -0.7134309  10.3769795  73.37489    1 #> 405  1.573205 5.714690 -0.7134309  79.1553290  85.74435    1 #> 406  1.573205 5.714690 -0.7134309   7.4670103  78.70518    2 #> 407  1.573205 5.714690 -0.7134309  56.0394847  65.44270    1 #> 408  1.573205 5.714690 -0.7134309  97.3603339  84.75567    1 #> 409  1.573205 5.714690 -0.7134309  64.1091315  69.81431    1 #> 410  1.573205 5.714690 -0.7134309   5.4828970  69.17843    2 #> 411  1.573205 5.714690 -0.7134309  -1.0365617  77.92836    1 #> 412  1.573205 5.714690 -0.7134309 105.1530363  58.76622    2 #> 413  1.573205 5.714690 -0.7134309  36.2081348  86.51888    1 #> 414  1.573205 5.714690 -0.7134309 100.7910554  72.30377    2 #> 415  1.573205 5.714690 -0.7134309 121.8033519  64.49824    2 #> 416  1.573205 5.714690 -0.7134309  80.7673520  79.15892    2 #> 417  1.573205 5.714690 -0.7134309  37.8666953  81.64906    2 #> 418  1.573205 5.714690 -0.7134309 115.5883876  72.47664    2 #> 419  1.573205 5.714690 -0.7134309  35.2369749  70.77398    1 #> 420  1.573205 5.714690 -0.7134309  64.1711223  81.17435    1 #> 421  1.573205 5.714690 -0.7134309  80.7895090  83.24437    1 #> 422  1.573205 5.714690 -0.7134309  21.7869881  66.29985    1 #> 423  1.573205 5.714690 -0.7134309  12.4926991  85.17995    2 #> 424  1.573205 5.714690 -0.7134309 100.3907484  63.01031    2 #> 425  1.573205 5.714690 -0.7134309  87.0887229  78.85374    1 #> 426  1.573205 5.714690 -0.7134309  25.1379799  73.96496    2 #> 427  1.573205 5.714690 -0.7134309  49.5239715  67.28242    1 #> 428  1.573205 5.714690 -0.7134309  88.7792321  79.57532    1 #> 429  1.573205 5.714690 -0.7134309  27.6786417  50.07289    2 #> 430  1.573205 5.714690 -0.7134309  39.2307194  71.84089    1 #> 431  1.573205 5.714690 -0.7134309  24.7497391  59.53040    1 #> 432  1.573205 5.714690 -0.7134309  41.3796076  91.30726    1 #> 433  1.573205 5.714690 -0.7134309  15.7437413  60.97164    1 #> 434  1.573205 5.714690 -0.7134309  49.3700152  87.90514    2 #> 435  1.573205 5.714690 -0.7134309  85.1566041  70.45287    2 #> 436  1.573205 5.714690 -0.7134309  40.6560199  71.09065    2 #> 437  1.573205 5.714690 -0.7134309  51.7926315  80.52528    1 #> 438  1.573205 5.714690 -0.7134309  21.9143343  90.76348    2 #> 439  1.573205 5.714690 -0.7134309  51.8020419  67.59027    1 #> 440  1.573205 5.714690 -0.7134309  16.6322957  68.55139    2 #> 441  1.573205 5.714690 -0.7134309  83.6203837  70.68124    1 #> 442  1.573205 5.714690 -0.7134309   0.5211994  77.24136    2 #> 443  1.573205 5.714690 -0.7134309  68.5951856  91.48323    1 #> 444  1.573205 5.714690 -0.7134309  43.1520866  76.30536    1 #> 445  1.573205 5.714690 -0.7134309  50.3386316  65.44094    2 #> 446  1.573205 5.714690 -0.7134309  -5.5620422  66.74062    2 #> 447  1.573205 5.714690 -0.7134309  36.6958235  75.55218    1 #> 448  1.573205 5.714690 -0.7134309  50.5999862  70.92480    1 #> 449  1.573205 5.714690 -0.7134309  33.7248448  63.47388    1 #> 450  1.573205 5.714690 -0.7134309  56.8412586  69.62838    1 #> 451  1.573205 5.714690 -0.7134309  41.5039976  42.87558    2 #> 452  1.573205 5.714690 -0.7134309  34.6840120  94.67629    2 #> 453  1.573205 5.714690 -0.7134309  66.7908719  85.49509    2 #> 454  1.573205 5.714690 -0.7134309  61.4085644  60.53623    1 #> 455  1.573205 5.714690 -0.7134309  20.3101447  63.61028    2 #> 456  1.573205 5.714690 -0.7134309  23.9141255  63.56250    1 #> 457  1.573205 5.714690 -0.7134309  33.5839449  52.95806    1 #> 458  1.573205 5.714690 -0.7134309  84.6397334  78.41237    2 #> 459  1.573205 5.714690 -0.7134309  44.8334456  71.30109    1 #> 460  1.573205 5.714690 -0.7134309  27.2349995  72.89661    2 #> 461  1.573205 5.714690 -0.7134309  91.2514376  91.89839    2 #> 462  1.573205 5.714690 -0.7134309  37.6097072  81.34729    1 #> 463  1.573205 5.714690 -0.7134309  68.5254907  72.04929    2 #> 464  1.573205 5.714690 -0.7134309  38.5642150  69.13123    1 #> 465  1.573205 5.714690 -0.7134309  44.1594360  77.51596    2 #> 466  1.573205 5.714690 -0.7134309  57.0717274  80.17189    2 #> 467  1.573205 5.714690 -0.7134309  95.9455509  74.75328    2 #> 468  1.573205 5.714690 -0.7134309  42.9920799  92.50767    1 #> 469  1.573205 5.714690 -0.7134309  55.7102276  75.72940    2 #> 470  1.573205 5.714690 -0.7134309  60.8177462  69.03698    2 #> 471  1.573205 5.714690 -0.7134309  55.3605893  66.34895    1 #> 472  1.573205 5.714690 -0.7134309  56.7559825  75.28003    2 #> 473  1.573205 5.714690 -0.7134309  25.4328185  73.75857    1 #> 474  1.573205 5.714690 -0.7134309  -6.8916878  88.03803    2 #> 475  1.573205 5.714690 -0.7134309  33.4832529  75.73123    2 #> 476  1.573205 5.714690 -0.7134309  52.0521677  80.03295    1 #> 477  1.573205 5.714690 -0.7134309  25.4914503  82.94275    1 #> 478  1.573205 5.714690 -0.7134309 100.9890496  77.45985    1 #> 479  1.573205 5.714690 -0.7134309  25.5156151  91.88302    1 #> 480  1.573205 5.714690 -0.7134309  43.6078125  57.43117    1 #> 481  1.573205 5.714690 -0.7134309  37.0091877  79.48740    2 #> 482  1.573205 5.714690 -0.7134309  11.8107388  64.78770    1 #> 483  1.573205 5.714690 -0.7134309  44.3389759  71.14324    2 #> 484  1.573205 5.714690 -0.7134309  54.9898805  73.64347    1 #> 485  1.573205 5.714690 -0.7134309  71.7998793  69.11348    1 #> 486  1.573205 5.714690 -0.7134309  -5.6880456  71.73435    2 #> 487  1.573205 5.714690 -0.7134309  79.1445668  69.27310    1 #> 488  1.573205 5.714690 -0.7134309  12.9249574  78.46686    2 #> 489  1.573205 5.714690 -0.7134309  27.5346015  67.62387    1 #> 490  1.573205 5.714690 -0.7134309  62.8966610  76.51829    2 #> 491  1.573205 5.714690 -0.7134309  32.0787529  68.94991    2 #> 492  1.573205 5.714690 -0.7134309  25.1917260  70.99306    2 #> 493  1.573205 5.714690 -0.7134309  54.4621512  70.62260    2 #> 494  1.573205 5.714690 -0.7134309  -2.2871236  80.68376    1 #> 495  1.573205 5.714690 -0.7134309  27.2894531  58.62351    1 #> 496  1.573205 5.714690 -0.7134309  74.5977013  88.26263    2 #> 497  1.573205 5.714690 -0.7134309  92.4308992  74.24270    2 #> 498  1.573205 5.714690 -0.7134309  55.8268794  89.50048    1 #> 499  1.573205 5.714690 -0.7134309  89.4983796  61.30342    2 #> 500  1.573205 5.714690 -0.7134309  79.8213569  76.81988    1 #> 501  1.672940 5.828768 -0.6695402  38.1678563  67.56115    2 #> 502  1.672940 5.828768 -0.6695402  61.0698769  58.17179    1 #> 503  1.672940 5.828768 -0.6695402  41.7382042  64.26612    1 #> 504  1.672940 5.828768 -0.6695402  33.8740280  69.33690    1 #> 505  1.672940 5.828768 -0.6695402  23.5953740  61.72238    1 #> 506  1.672940 5.828768 -0.6695402  13.3422225  52.87255    2 #> 507  1.672940 5.828768 -0.6695402  74.0383804  62.03574    1 #> 508  1.672940 5.828768 -0.6695402  93.0192305  70.91276    2 #> 509  1.672940 5.828768 -0.6695402  89.0049567  70.15547    2 #> 510  1.672940 5.828768 -0.6695402  43.5291243  91.50177    1 #> 511  1.672940 5.828768 -0.6695402  23.5393253  81.96101    2 #> 512  1.672940 5.828768 -0.6695402  40.9925587  57.60091    2 #> 513  1.672940 5.828768 -0.6695402  34.9704160  60.84323    2 #> 514  1.672940 5.828768 -0.6695402  59.9235702  88.99702    2 #> 515  1.672940 5.828768 -0.6695402  98.3658578  86.42595    1 #> 516  1.672940 5.828768 -0.6695402  50.7422608  92.09375    2 #> 517  1.672940 5.828768 -0.6695402  41.9356043  65.47800    1 #> 518  1.672940 5.828768 -0.6695402  69.2871008  72.68478    1 #> 519  1.672940 5.828768 -0.6695402  49.4730857  66.81432    2 #> 520  1.672940 5.828768 -0.6695402  44.8791520  70.87674    2 #> 521  1.672940 5.828768 -0.6695402  20.4638474  95.53771    2 #> 522  1.672940 5.828768 -0.6695402  32.3751288  83.15449    2 #> 523  1.672940 5.828768 -0.6695402  77.5845632  65.59434    1 #> 524  1.672940 5.828768 -0.6695402  56.7236110  85.66398    1 #> 525  1.672940 5.828768 -0.6695402  32.1085930  79.47297    1 #> 526  1.672940 5.828768 -0.6695402  46.5107080  75.75487    2 #> 527  1.672940 5.828768 -0.6695402  78.9429857  66.73803    1 #> 528  1.672940 5.828768 -0.6695402  31.0490558  83.34998    2 #> 529  1.672940 5.828768 -0.6695402  40.9829803  90.16081    2 #> 530  1.672940 5.828768 -0.6695402  43.9492312  80.31310    1 #> 531  1.672940 5.828768 -0.6695402  65.5490888  88.77697    2 #> 532  1.672940 5.828768 -0.6695402  56.2680938  90.90554    2 #> 533  1.672940 5.828768 -0.6695402  14.4686365  80.42169    1 #> 534  1.672940 5.828768 -0.6695402  70.2907813  80.47309    1 #> 535  1.672940 5.828768 -0.6695402  57.4804485  75.33315    1 #> 536  1.672940 5.828768 -0.6695402  66.0948896  89.54032    1 #> 537  1.672940 5.828768 -0.6695402   3.1032846  87.89076    2 #> 538  1.672940 5.828768 -0.6695402  44.2139073  84.02920    1 #> 539  1.672940 5.828768 -0.6695402  48.2643368  78.79437    2 #> 540  1.672940 5.828768 -0.6695402  74.8756724  61.15289    1 #> 541  1.672940 5.828768 -0.6695402   8.1327649  71.72132    2 #> 542  1.672940 5.828768 -0.6695402  16.5980966  64.94069    1 #> 543  1.672940 5.828768 -0.6695402  43.9312413  51.69354    1 #> 544  1.672940 5.828768 -0.6695402 -17.1351407  94.42809    1 #> 545  1.672940 5.828768 -0.6695402  53.1464554  83.92699    1 #> 546  1.672940 5.828768 -0.6695402  81.4527982  74.55878    2 #> 547  1.672940 5.828768 -0.6695402  10.1989198  87.76708    2 #> 548  1.672940 5.828768 -0.6695402  21.5496443  83.67005    2 #> 549  1.672940 5.828768 -0.6695402  34.7187279  81.54692    1 #> 550  1.672940 5.828768 -0.6695402  27.5386247  57.54349    2 #> 551  1.672940 5.828768 -0.6695402  14.6024354  78.74788    2 #> 552  1.672940 5.828768 -0.6695402  27.5903823  56.68944    1 #> 553  1.672940 5.828768 -0.6695402  72.5185564  91.10584    1 #> 554  1.672940 5.828768 -0.6695402  44.3002781  81.56935    2 #> 555  1.672940 5.828768 -0.6695402 139.1363422  82.74588    2 #> 556  1.672940 5.828768 -0.6695402  65.8100955  81.94809    1 #> 557  1.672940 5.828768 -0.6695402  50.6868391  72.21063    1 #> 558  1.672940 5.828768 -0.6695402  39.6543078  77.29151    2 #> 559  1.672940 5.828768 -0.6695402  83.1524478  55.31793    2 #> 560  1.672940 5.828768 -0.6695402  28.9030084  66.02987    1 #> 561  1.672940 5.828768 -0.6695402  74.8964861  81.14713    2 #> 562  1.672940 5.828768 -0.6695402  59.0149196  65.04019    1 #> 563  1.672940 5.828768 -0.6695402  30.3298336  79.68335    2 #> 564  1.672940 5.828768 -0.6695402  57.7948403  75.82379    1 #> 565  1.672940 5.828768 -0.6695402  34.2990000  86.36872    2 #> 566  1.672940 5.828768 -0.6695402   2.6535279  87.72225    2 #> 567  1.672940 5.828768 -0.6695402  37.6268290  74.39190    2 #> 568  1.672940 5.828768 -0.6695402  63.9340344  65.42419    2 #> 569  1.672940 5.828768 -0.6695402  58.9164769  45.08214    2 #> 570  1.672940 5.828768 -0.6695402  92.0016020  83.70186    1 #> 571  1.672940 5.828768 -0.6695402  61.7224060  79.23864    2 #> 572  1.672940 5.828768 -0.6695402  96.1235032  83.73479    2 #> 573  1.672940 5.828768 -0.6695402  68.5533210  59.05651    1 #> 574  1.672940 5.828768 -0.6695402  -3.6102436  50.09141    1 #> 575  1.672940 5.828768 -0.6695402  76.0941103  72.03348    2 #> 576  1.672940 5.828768 -0.6695402 104.4106457  75.32516    2 #> 577  1.672940 5.828768 -0.6695402  41.2928074  69.04815    1 #> 578  1.672940 5.828768 -0.6695402  65.2797569  74.49533    1 #> 579  1.672940 5.828768 -0.6695402  26.3265850  81.18398    2 #> 580  1.672940 5.828768 -0.6695402  65.5588529  68.91393    2 #> 581  1.672940 5.828768 -0.6695402  47.0697497  74.72187    1 #> 582  1.672940 5.828768 -0.6695402  87.2450727  94.10999    1 #> 583  1.672940 5.828768 -0.6695402  61.2502113  80.00009    2 #> 584  1.672940 5.828768 -0.6695402  89.2007650  58.09223    1 #> 585  1.672940 5.828768 -0.6695402   9.9740886  80.09600    1 #> 586  1.672940 5.828768 -0.6695402  73.9157460  74.08366    2 #> 587  1.672940 5.828768 -0.6695402  14.4160082  89.42311    1 #> 588  1.672940 5.828768 -0.6695402  64.4259505  63.68825    2 #> 589  1.672940 5.828768 -0.6695402 107.6692892  70.25459    1 #> 590  1.672940 5.828768 -0.6695402  97.0398311  75.44392    2 #> 591  1.672940 5.828768 -0.6695402 -18.6333110  58.40089    1 #> 592  1.672940 5.828768 -0.6695402  39.5946897  84.11830    2 #> 593  1.672940 5.828768 -0.6695402  20.6417920  73.83552    2 #> 594  1.672940 5.828768 -0.6695402  56.4086735  68.10451    1 #> 595  1.672940 5.828768 -0.6695402  85.1042630  66.95012    1 #> 596  1.672940 5.828768 -0.6695402  50.6295988  87.69661    1 #> 597  1.672940 5.828768 -0.6695402  36.9343237  68.84028    1 #> 598  1.672940 5.828768 -0.6695402  71.1503605  87.67769    1 #> 599  1.672940 5.828768 -0.6695402  56.5924449  81.06348    1 #> 600  1.672940 5.828768 -0.6695402  93.5501107  88.95669    1 #> 601  1.563159 5.731669 -0.7790685  18.9083599  82.84332    1 #> 602  1.563159 5.731669 -0.7790685  82.7940905  69.87248    2 #> 603  1.563159 5.731669 -0.7790685  45.9641247  69.22075    2 #> 604  1.563159 5.731669 -0.7790685  54.6802925  78.95279    1 #> 605  1.563159 5.731669 -0.7790685 107.1581579  62.13559    2 #> 606  1.563159 5.731669 -0.7790685  53.1915408  62.58662    1 #> 607  1.563159 5.731669 -0.7790685  53.7586208  57.37826    2 #> 608  1.563159 5.731669 -0.7790685  11.4903880  76.88262    1 #> 609  1.563159 5.731669 -0.7790685  42.9730652  76.14662    2 #> 610  1.563159 5.731669 -0.7790685  49.4591203  61.76904    2 #> 611  1.563159 5.731669 -0.7790685  78.8073818  79.18351    1 #> 612  1.563159 5.731669 -0.7790685  50.8429855  84.85734    2 #> 613  1.563159 5.731669 -0.7790685  49.4230911  80.54065    2 #> 614  1.563159 5.731669 -0.7790685  35.8725616  73.61357    2 #> 615  1.563159 5.731669 -0.7790685  73.8953130  87.20300    1 #> 616  1.563159 5.731669 -0.7790685  48.5112541  78.58745    1 #> 617  1.563159 5.731669 -0.7790685  41.2691503  77.56750    1 #> 618  1.563159 5.731669 -0.7790685  -2.5952400  52.72300    1 #> 619  1.563159 5.731669 -0.7790685  37.7309015  82.54988    1 #> 620  1.563159 5.731669 -0.7790685  30.3568403  73.26848    2 #> 621  1.563159 5.731669 -0.7790685  74.6840163  69.20581    2 #> 622  1.563159 5.731669 -0.7790685  57.2935950  59.50570    1 #> 623  1.563159 5.731669 -0.7790685  46.0448889  76.42029    2 #> 624  1.563159 5.731669 -0.7790685  26.0374982  88.97144    1 #> 625  1.563159 5.731669 -0.7790685 107.5539884  73.40860    1 #> 626  1.563159 5.731669 -0.7790685  76.0932271  64.01009    2 #> 627  1.563159 5.731669 -0.7790685  15.2618979  85.87639    1 #> 628  1.563159 5.731669 -0.7790685  26.9130546  81.09287    1 #> 629  1.563159 5.731669 -0.7790685  19.6257044  66.16867    1 #> 630  1.563159 5.731669 -0.7790685  27.6237559  83.07571    1 #> 631  1.563159 5.731669 -0.7790685   3.0788206  72.64991    1 #> 632  1.563159 5.731669 -0.7790685  83.9619254  70.62216    2 #> 633  1.563159 5.731669 -0.7790685  27.2919447  69.19040    1 #> 634  1.563159 5.731669 -0.7790685  70.9313798  85.46613    2 #> 635  1.563159 5.731669 -0.7790685  23.8187421  80.40937    2 #> 636  1.563159 5.731669 -0.7790685  59.3970342  79.11208    1 #> 637  1.563159 5.731669 -0.7790685  42.5267742  87.02663    2 #> 638  1.563159 5.731669 -0.7790685 109.4385054  73.75556    2 #> 639  1.563159 5.731669 -0.7790685  68.4397881  76.30425    1 #> 640  1.563159 5.731669 -0.7790685  75.7222837  82.39713    2 #> 641  1.563159 5.731669 -0.7790685  16.5044967  78.43945    2 #> 642  1.563159 5.731669 -0.7790685  66.1861109  79.22025    2 #> 643  1.563159 5.731669 -0.7790685  52.7481347  63.74457    2 #> 644  1.563159 5.731669 -0.7790685  37.2365634  71.05619    1 #> 645  1.563159 5.731669 -0.7790685  46.9804983  56.89054    2 #> 646  1.563159 5.731669 -0.7790685  50.2229018  77.10394    2 #> 647  1.563159 5.731669 -0.7790685  16.0139501  61.53448    1 #> 648  1.563159 5.731669 -0.7790685  41.5563797  65.99968    2 #> 649  1.563159 5.731669 -0.7790685  70.9674950  69.01587    1 #> 650  1.563159 5.731669 -0.7790685  55.6625466  82.58803    2 #> 651  1.563159 5.731669 -0.7790685  42.0096291  78.35425    1 #> 652  1.563159 5.731669 -0.7790685 117.8812335  77.27629    2 #> 653  1.563159 5.731669 -0.7790685  61.6658650  72.08551    1 #> 654  1.563159 5.731669 -0.7790685  -0.8736160  92.49828    2 #> 655  1.563159 5.731669 -0.7790685  80.5603108  75.62488    2 #> 656  1.563159 5.731669 -0.7790685  48.1762269  64.89065    2 #> 657  1.563159 5.731669 -0.7790685  12.9968319  65.07000    1 #> 658  1.563159 5.731669 -0.7790685   2.8313131  90.66089    2 #> 659  1.563159 5.731669 -0.7790685  70.0881641  62.61839    1 #> 660  1.563159 5.731669 -0.7790685 -33.8810337  64.19400    2 #> 661  1.563159 5.731669 -0.7790685  39.9661974  68.44032    2 #> 662  1.563159 5.731669 -0.7790685  31.3170364  75.73101    1 #> 663  1.563159 5.731669 -0.7790685  44.0024332  68.82384    2 #> 664  1.563159 5.731669 -0.7790685  36.7898696  68.25944    2 #> 665  1.563159 5.731669 -0.7790685 107.5733367  68.19207    2 #> 666  1.563159 5.731669 -0.7790685  68.0743864  63.00673    2 #> 667  1.563159 5.731669 -0.7790685  68.3035899  89.13444    2 #> 668  1.563159 5.731669 -0.7790685  46.1511899  71.02200    2 #> 669  1.563159 5.731669 -0.7790685  53.2178875  56.93658    2 #> 670  1.563159 5.731669 -0.7790685 -32.8588747  67.34866    2 #> 671  1.563159 5.731669 -0.7790685  43.5265993  86.60459    1 #> 672  1.563159 5.731669 -0.7790685  35.3250016  80.49457    2 #> 673  1.563159 5.731669 -0.7790685 132.4481604  87.69892    1 #> 674  1.563159 5.731669 -0.7790685  53.0284456  75.10771    2 #> 675  1.563159 5.731669 -0.7790685  72.9444754  58.12782    1 #> 676  1.563159 5.731669 -0.7790685  26.9975412  80.05722    2 #> 677  1.563159 5.731669 -0.7790685  36.8695056  98.52606    2 #> 678  1.563159 5.731669 -0.7790685  69.6609769  94.47954    1 #> 679  1.563159 5.731669 -0.7790685  25.0991472  84.40522    2 #> 680  1.563159 5.731669 -0.7790685  41.9468910  75.74272    1 #> 681  1.563159 5.731669 -0.7790685  20.8472512  83.97757    2 #> 682  1.563159 5.731669 -0.7790685  15.1525928  85.26197    1 #> 683  1.563159 5.731669 -0.7790685  29.9811042  52.37819    1 #> 684  1.563159 5.731669 -0.7790685  35.2479815  65.28672    1 #> 685  1.563159 5.731669 -0.7790685  55.8575273  64.93605    1 #> 686  1.563159 5.731669 -0.7790685  46.1190677  70.03628    1 #> 687  1.563159 5.731669 -0.7790685  58.2830057  71.94772    2 #> 688  1.563159 5.731669 -0.7790685  85.9325796  52.10738    1 #> 689  1.563159 5.731669 -0.7790685  81.0811061  70.93935    2 #> 690  1.563159 5.731669 -0.7790685  90.7740977  86.39420    1 #> 691  1.563159 5.731669 -0.7790685  80.5749599  91.67558    1 #> 692  1.563159 5.731669 -0.7790685  18.3214023  84.10786    2 #> 693  1.563159 5.731669 -0.7790685  50.2634173  71.34296    1 #> 694  1.563159 5.731669 -0.7790685  -9.2522554  78.23080    1 #> 695  1.563159 5.731669 -0.7790685  87.1693570  71.12958    1 #> 696  1.563159 5.731669 -0.7790685  95.4192058  79.23869    2 #> 697  1.563159 5.731669 -0.7790685   7.2926188  78.66146    2 #> 698  1.563159 5.731669 -0.7790685   4.8827826 103.71042    2 #> 699  1.563159 5.731669 -0.7790685  35.2762761  73.13650    2 #> 700  1.563159 5.731669 -0.7790685  31.6385434  73.79821    1 #> 701  1.623917 5.661163 -0.6742936   4.3862902  89.41130    2 #> 702  1.623917 5.661163 -0.6742936  29.6476474  77.60050    2 #> 703  1.623917 5.661163 -0.6742936   7.0213876  86.83642    2 #> 704  1.623917 5.661163 -0.6742936   9.5118652  68.27226    1 #> 705  1.623917 5.661163 -0.6742936  42.1259745  71.98352    2 #> 706  1.623917 5.661163 -0.6742936  73.2122235  69.81875    1 #> 707  1.623917 5.661163 -0.6742936  86.7027792  77.46672    2 #> 708  1.623917 5.661163 -0.6742936  91.0971639  78.11554    1 #> 709  1.623917 5.661163 -0.6742936  58.0830884  71.50048    2 #> 710  1.623917 5.661163 -0.6742936  37.0587768  76.60951    1 #> 711  1.623917 5.661163 -0.6742936  35.7099942  67.75827    1 #> 712  1.623917 5.661163 -0.6742936  56.8209016  59.88464    2 #> 713  1.623917 5.661163 -0.6742936  69.0604872  67.06852    2 #> 714  1.623917 5.661163 -0.6742936  69.7451362  81.98099    1 #> 715  1.623917 5.661163 -0.6742936  77.8364665  71.37878    1 #> 716  1.623917 5.661163 -0.6742936  19.6222663  78.43239    1 #> 717  1.623917 5.661163 -0.6742936  42.5694293  70.28217    2 #> 718  1.623917 5.661163 -0.6742936  90.0898872  65.33551    1 #> 719  1.623917 5.661163 -0.6742936  61.4365029  74.21749    1 #> 720  1.623917 5.661163 -0.6742936  96.8052970  76.24192    1 #> 721  1.623917 5.661163 -0.6742936  73.0402787  71.01772    2 #> 722  1.623917 5.661163 -0.6742936  33.4467777  74.08305    1 #> 723  1.623917 5.661163 -0.6742936  46.6144377  95.23591    2 #> 724  1.623917 5.661163 -0.6742936  53.3733455  75.33384    1 #> 725  1.623917 5.661163 -0.6742936  10.9778305  48.31491    2 #> 726  1.623917 5.661163 -0.6742936  23.8924573  87.92331    2 #> 727  1.623917 5.661163 -0.6742936  76.4078263  73.94247    1 #> 728  1.623917 5.661163 -0.6742936  31.5762808  59.15820    1 #> 729  1.623917 5.661163 -0.6742936   6.7104129  96.56197    1 #> 730  1.623917 5.661163 -0.6742936  79.3195285  80.77408    1 #> 731  1.623917 5.661163 -0.6742936 -28.3353878  68.22983    2 #> 732  1.623917 5.661163 -0.6742936  67.4295155  83.25717    1 #> 733  1.623917 5.661163 -0.6742936  64.3079145  58.77369    1 #> 734  1.623917 5.661163 -0.6742936  71.1403579  75.98192    2 #> 735  1.623917 5.661163 -0.6742936  89.5590335  76.42924    1 #> 736  1.623917 5.661163 -0.6742936  57.8191488  79.79139    2 #> 737  1.623917 5.661163 -0.6742936  11.1080731  71.21112    1 #> 738  1.623917 5.661163 -0.6742936  51.3348956  73.21401    1 #> 739  1.623917 5.661163 -0.6742936  79.1653337  78.88980    2 #> 740  1.623917 5.661163 -0.6742936  30.6420457  68.93621    1 #> 741  1.623917 5.661163 -0.6742936  -3.0512450  92.29634    1 #> 742  1.623917 5.661163 -0.6742936  69.8573389  71.13959    2 #> 743  1.623917 5.661163 -0.6742936  32.8850272  67.04577    2 #> 744  1.623917 5.661163 -0.6742936  51.0458458  71.73215    1 #> 745  1.623917 5.661163 -0.6742936  73.6786942  77.12900    1 #> 746  1.623917 5.661163 -0.6742936  31.1736141  71.92430    2 #> 747  1.623917 5.661163 -0.6742936  25.5612587  89.60676    1 #> 748  1.623917 5.661163 -0.6742936  -8.6963567  89.46077    1 #> 749  1.623917 5.661163 -0.6742936 -26.6067751  66.57096    2 #> 750  1.623917 5.661163 -0.6742936  57.2505420  70.30214    2 #> 751  1.623917 5.661163 -0.6742936 111.9767656  75.56339    2 #> 752  1.623917 5.661163 -0.6742936  76.0573053  60.96074    2 #> 753  1.623917 5.661163 -0.6742936  29.0669531  90.51543    2 #> 754  1.623917 5.661163 -0.6742936  57.1668329  79.69982    1 #> 755  1.623917 5.661163 -0.6742936  27.8484795  66.73348    2 #> 756  1.623917 5.661163 -0.6742936  85.4876148  74.22296    1 #> 757  1.623917 5.661163 -0.6742936 100.0837299  81.90151    1 #> 758  1.623917 5.661163 -0.6742936  46.0227120  89.35422    1 #> 759  1.623917 5.661163 -0.6742936 126.7902588  77.66575    1 #> 760  1.623917 5.661163 -0.6742936  19.1071394  80.77951    1 #> 761  1.623917 5.661163 -0.6742936  51.4319091  60.24571    2 #> 762  1.623917 5.661163 -0.6742936  65.6309065  84.63769    1 #> 763  1.623917 5.661163 -0.6742936 -13.2733730  83.71288    1 #> 764  1.623917 5.661163 -0.6742936  85.4482930  67.45798    1 #> 765  1.623917 5.661163 -0.6742936  55.1923811  92.04469    1 #> 766  1.623917 5.661163 -0.6742936  98.7165155  65.93427    2 #> 767  1.623917 5.661163 -0.6742936  65.5019725 103.28612    1 #> 768  1.623917 5.661163 -0.6742936  39.5002933  72.03163    1 #> 769  1.623917 5.661163 -0.6742936  42.5374292  82.07576    2 #> 770  1.623917 5.661163 -0.6742936  36.5696566  71.51964    1 #> 771  1.623917 5.661163 -0.6742936  81.3982645  79.04510    1 #> 772  1.623917 5.661163 -0.6742936  60.8786617  79.28927    1 #> 773  1.623917 5.661163 -0.6742936  70.7373746  83.19576    1 #> 774  1.623917 5.661163 -0.6742936  15.5478298  60.57505    2 #> 775  1.623917 5.661163 -0.6742936  72.9746357  81.74383    1 #> 776  1.623917 5.661163 -0.6742936  65.9319263  72.78060    2 #> 777  1.623917 5.661163 -0.6742936  88.3867317  63.68846    1 #> 778  1.623917 5.661163 -0.6742936  77.0011194  68.88250    1 #> 779  1.623917 5.661163 -0.6742936  85.8057743  64.98303    2 #> 780  1.623917 5.661163 -0.6742936  35.9705319  83.73558    1 #> 781  1.623917 5.661163 -0.6742936  67.3304997  86.84455    1 #> 782  1.623917 5.661163 -0.6742936  21.9524555  76.27415    1 #> 783  1.623917 5.661163 -0.6742936  -5.6352245  72.94603    2 #> 784  1.623917 5.661163 -0.6742936  52.3692116  71.22825    1 #> 785  1.623917 5.661163 -0.6742936  56.9827483  68.32436    2 #> 786  1.623917 5.661163 -0.6742936  74.3243768  91.43702    2 #> 787  1.623917 5.661163 -0.6742936  34.5160055  64.07231    1 #> 788  1.623917 5.661163 -0.6742936   2.9245152  80.98718    1 #> 789  1.623917 5.661163 -0.6742936  63.5431682  75.46948    1 #> 790  1.623917 5.661163 -0.6742936  21.2252373  61.52853    2 #> 791  1.623917 5.661163 -0.6742936  55.4826231  79.48380    2 #> 792  1.623917 5.661163 -0.6742936  54.4993559  70.46917    1 #> 793  1.623917 5.661163 -0.6742936  39.9538887  70.01352    1 #> 794  1.623917 5.661163 -0.6742936  52.8213303  75.21188    1 #> 795  1.623917 5.661163 -0.6742936  17.8784484  62.71215    1 #> 796  1.623917 5.661163 -0.6742936  69.1486342  69.49095    1 #> 797  1.623917 5.661163 -0.6742936 125.4859552  84.44350    1 #> 798  1.623917 5.661163 -0.6742936  77.9492961  77.33112    2 #> 799  1.623917 5.661163 -0.6742936  68.8333714  79.99650    1 #> 800  1.623917 5.661163 -0.6742936  63.1181812  67.00761    2 #> 801  1.561513 5.752009 -0.6990041  48.9974492  92.48121    2 #> 802  1.561513 5.752009 -0.6990041   9.2847128  81.37087    1 #> 803  1.561513 5.752009 -0.6990041  82.0302547  74.46283    2 #> 804  1.561513 5.752009 -0.6990041  53.7474361  78.08095    2 #> 805  1.561513 5.752009 -0.6990041  39.8132325  66.69704    1 #> 806  1.561513 5.752009 -0.6990041  58.5431310  79.77195    2 #> 807  1.561513 5.752009 -0.6990041  61.1797465  68.79759    1 #> 808  1.561513 5.752009 -0.6990041   2.6978623  65.68119    2 #> 809  1.561513 5.752009 -0.6990041  -2.9959481  74.07861    1 #> 810  1.561513 5.752009 -0.6990041  69.9499963  69.34748    1 #> 811  1.561513 5.752009 -0.6990041  23.1748838  68.48503    1 #> 812  1.561513 5.752009 -0.6990041 102.2255108  79.73994    2 #> 813  1.561513 5.752009 -0.6990041  24.4305703 100.22706    1 #> 814  1.561513 5.752009 -0.6990041  19.7481336  62.37810    2 #> 815  1.561513 5.752009 -0.6990041  96.4547470  68.61734    1 #> 816  1.561513 5.752009 -0.6990041 101.9418487  82.11478    2 #> 817  1.561513 5.752009 -0.6990041  86.4950177  68.86499    1 #> 818  1.561513 5.752009 -0.6990041  53.5351294  83.71468    1 #> 819  1.561513 5.752009 -0.6990041  60.2350748  74.95739    1 #> 820  1.561513 5.752009 -0.6990041  27.6376304  63.64001    2 #> 821  1.561513 5.752009 -0.6990041  76.6861986  72.81275    1 #> 822  1.561513 5.752009 -0.6990041 103.7663980  68.50690    2 #> 823  1.561513 5.752009 -0.6990041  36.1422701  59.36458    2 #> 824  1.561513 5.752009 -0.6990041  59.4754314  76.26514    1 #> 825  1.561513 5.752009 -0.6990041   9.6426331  79.35209    2 #> 826  1.561513 5.752009 -0.6990041  26.4151406  64.25640    1 #> 827  1.561513 5.752009 -0.6990041  96.3884253  70.78145    2 #> 828  1.561513 5.752009 -0.6990041  51.9134774  71.69811    1 #> 829  1.561513 5.752009 -0.6990041  68.7467603  75.20190    1 #> 830  1.561513 5.752009 -0.6990041  89.6591600  82.50803    1 #> 831  1.561513 5.752009 -0.6990041  49.9007763  59.16145    2 #> 832  1.561513 5.752009 -0.6990041  59.2548039  75.33259    1 #> 833  1.561513 5.752009 -0.6990041  60.0082121  70.27023    1 #> 834  1.561513 5.752009 -0.6990041  98.4688321  76.05810    2 #> 835  1.561513 5.752009 -0.6990041  39.4437763  77.66308    2 #> 836  1.561513 5.752009 -0.6990041  98.8925745  82.04197    1 #> 837  1.561513 5.752009 -0.6990041  35.4873664  71.06575    1 #> 838  1.561513 5.752009 -0.6990041  96.4278063  67.67618    1 #> 839  1.561513 5.752009 -0.6990041 115.1815537  84.49771    2 #> 840  1.561513 5.752009 -0.6990041  43.9022059  80.77810    2 #> 841  1.561513 5.752009 -0.6990041  94.6970963  82.54843    2 #> 842  1.561513 5.752009 -0.6990041  68.2905300  81.19173    1 #> 843  1.561513 5.752009 -0.6990041  70.4618488  75.03386    1 #> 844  1.561513 5.752009 -0.6990041  65.3453406  72.85415    2 #> 845  1.561513 5.752009 -0.6990041   8.5493994  67.85077    1 #> 846  1.561513 5.752009 -0.6990041  26.1536808  82.28340    1 #> 847  1.561513 5.752009 -0.6990041  26.0703862  73.35758    2 #> 848  1.561513 5.752009 -0.6990041  40.3849633  84.60289    2 #> 849  1.561513 5.752009 -0.6990041  29.1800568  60.90008    2 #> 850  1.561513 5.752009 -0.6990041 -32.8833387  69.53605    2 #> 851  1.561513 5.752009 -0.6990041 103.9548211  66.74417    1 #> 852  1.561513 5.752009 -0.6990041  78.4960457  66.55584    2 #> 853  1.561513 5.752009 -0.6990041  36.4818552  58.44428    1 #> 854  1.561513 5.752009 -0.6990041  76.5459964  78.62982    2 #> 855  1.561513 5.752009 -0.6990041  30.7158509  90.92795    2 #> 856  1.561513 5.752009 -0.6990041  25.1920732  61.34846    2 #> 857  1.561513 5.752009 -0.6990041  62.0165794  58.02042    2 #> 858  1.561513 5.752009 -0.6990041  49.8357389  90.59638    2 #> 859  1.561513 5.752009 -0.6990041  67.9258393  74.11929    1 #> 860  1.561513 5.752009 -0.6990041  55.4021737  72.10042    2 #> 861  1.561513 5.752009 -0.6990041  59.3635647  96.45434    1 #> 862  1.561513 5.752009 -0.6990041 -23.9923490  81.85788    1 #> 863  1.561513 5.752009 -0.6990041  87.7564769  92.13465    1 #> 864  1.561513 5.752009 -0.6990041  30.0966273  84.67296    2 #> 865  1.561513 5.752009 -0.6990041  66.8280521  88.14905    2 #> 866  1.561513 5.752009 -0.6990041  14.1272676  86.12434    1 #> 867  1.561513 5.752009 -0.6990041  67.9355537  80.70283    1 #> 868  1.561513 5.752009 -0.6990041  73.7743451  76.28507    2 #> 869  1.561513 5.752009 -0.6990041  52.5817553  75.43390    2 #> 870  1.561513 5.752009 -0.6990041  82.7847247  74.09916    2 #> 871  1.561513 5.752009 -0.6990041 119.3344072  72.45604    2 #> 872  1.561513 5.752009 -0.6990041  32.4057085  95.16381    1 #> 873  1.561513 5.752009 -0.6990041  23.4616522  51.02043    2 #> 874  1.561513 5.752009 -0.6990041  73.8724576 105.52575    2 #> 875  1.561513 5.752009 -0.6990041  95.2052909  67.49209    2 #> 876  1.561513 5.752009 -0.6990041  25.5779995  77.98522    1 #> 877  1.561513 5.752009 -0.6990041  41.3323586  97.91934    2 #> 878  1.561513 5.752009 -0.6990041  40.2603584  62.72925    2 #> 879  1.561513 5.752009 -0.6990041  35.0464101  81.22116    1 #> 880  1.561513 5.752009 -0.6990041  45.2187386  66.35779    2 #> 881  1.561513 5.752009 -0.6990041  77.5589970  87.31650    2 #> 882  1.561513 5.752009 -0.6990041  74.0977454  60.30295    1 #> 883  1.561513 5.752009 -0.6990041  79.2633304  83.93338    2 #> 884  1.561513 5.752009 -0.6990041  30.4352771  67.12438    1 #> 885  1.561513 5.752009 -0.6990041  17.2133018  84.08617    1 #> 886  1.561513 5.752009 -0.6990041  81.1112620  87.21712    1 #> 887  1.561513 5.752009 -0.6990041  23.0544113  66.02937    1 #> 888  1.561513 5.752009 -0.6990041  98.8625800  72.11651    2 #> 889  1.561513 5.752009 -0.6990041 -19.0959381  67.04116    1 #> 890  1.561513 5.752009 -0.6990041  74.4115694  52.53401    2 #> 891  1.561513 5.752009 -0.6990041  19.8049746  85.72635    1 #> 892  1.561513 5.752009 -0.6990041  76.0357495  76.12203    2 #> 893  1.561513 5.752009 -0.6990041  22.0888890  63.61794    2 #> 894  1.561513 5.752009 -0.6990041  67.4404536  84.88998    2 #> 895  1.561513 5.752009 -0.6990041  77.0286630  77.33351    2 #> 896  1.561513 5.752009 -0.6990041 118.5036480  82.51741    2 #> 897  1.561513 5.752009 -0.6990041  72.3987364  66.69147    1 #> 898  1.561513 5.752009 -0.6990041  12.2115634  71.74859    1 #> 899  1.561513 5.752009 -0.6990041  11.7928610  57.44029    1 #> 900  1.561513 5.752009 -0.6990041  53.6132611  68.94733    1 #> 901  1.632279 5.740407 -0.7066287  48.0109271  83.58202    1 #> 902  1.632279 5.740407 -0.7066287  -8.0301263  58.14177    2 #> 903  1.632279 5.740407 -0.7066287 -30.7769719  80.18095    1 #> 904  1.632279 5.740407 -0.7066287  12.7671316  79.99454    1 #> 905  1.632279 5.740407 -0.7066287  77.9824107  68.89383    2 #> 906  1.632279 5.740407 -0.7066287  77.2201927  88.51741    1 #> 907  1.632279 5.740407 -0.7066287  36.5923496  69.43529    1 #> 908  1.632279 5.740407 -0.7066287  48.9469580  90.75974    1 #> 909  1.632279 5.740407 -0.7066287  30.8224486  59.73813    1 #> 910  1.632279 5.740407 -0.7066287  35.7877271  70.84232    2 #> 911  1.632279 5.740407 -0.7066287  50.7266752  79.45346    2 #> 912  1.632279 5.740407 -0.7066287  65.2592161  57.61760    2 #> 913  1.632279 5.740407 -0.7066287  69.6026508  57.05023    1 #> 914  1.632279 5.740407 -0.7066287   0.7834984  73.61108    2 #> 915  1.632279 5.740407 -0.7066287  53.7762736  81.47588    2 #> 916  1.632279 5.740407 -0.7066287  89.3596538  80.25444    1 #> 917  1.632279 5.740407 -0.7066287  36.7637973  64.70868    1 #> 918  1.632279 5.740407 -0.7066287  32.2188928  81.81383    1 #> 919  1.632279 5.740407 -0.7066287  40.0758720  70.69324    1 #> 920  1.632279 5.740407 -0.7066287  24.8765461  72.98046    2 #> 921  1.632279 5.740407 -0.7066287  78.2716775  75.99325    2 #> 922  1.632279 5.740407 -0.7066287  -6.3395057  87.27324    2 #> 923  1.632279 5.740407 -0.7066287  22.6829677  94.22893    1 #> 924  1.632279 5.740407 -0.7066287  38.0136768  62.80747    2 #> 925  1.632279 5.740407 -0.7066287  35.1313985  68.95838    1 #> 926  1.632279 5.740407 -0.7066287  27.4797677  76.63736    2 #> 927  1.632279 5.740407 -0.7066287  30.5236960  66.16893    2 #> 928  1.632279 5.740407 -0.7066287  35.1188336  81.73566    2 #> 929  1.632279 5.740407 -0.7066287  28.4977983 104.08615    1 #> 930  1.632279 5.740407 -0.7066287  41.6466431  77.25039    1 #> 931  1.632279 5.740407 -0.7066287  45.9843787  79.00656    2 #> 932  1.632279 5.740407 -0.7066287  65.4998293  71.16540    2 #> 933  1.632279 5.740407 -0.7066287  69.3224629  82.60627    2 #> 934  1.632279 5.740407 -0.7066287  59.6321831  86.92970    2 #> 935  1.632279 5.740407 -0.7066287   8.5806949  60.81721    1 #> 936  1.632279 5.740407 -0.7066287  26.2068213  74.73239    2 #> 937  1.632279 5.740407 -0.7066287  11.2314175  63.90678    1 #> 938  1.632279 5.740407 -0.7066287  11.3707453  73.53251    2 #> 939  1.632279 5.740407 -0.7066287  78.2083687  71.39561    2 #> 940  1.632279 5.740407 -0.7066287  60.2735247  70.71942    2 #> 941  1.632279 5.740407 -0.7066287  44.8890747  81.41948    2 #> 942  1.632279 5.740407 -0.7066287  58.1814310  60.21858    1 #> 943  1.632279 5.740407 -0.7066287  84.7712213  60.52621    1 #> 944  1.632279 5.740407 -0.7066287   5.9956678  75.88211    1 #> 945  1.632279 5.740407 -0.7066287 -17.0222388  86.29289    2 #> 946  1.632279 5.740407 -0.7066287  62.7227620  73.75868    2 #> 947  1.632279 5.740407 -0.7066287  32.0911038  74.75940    1 #> 948  1.632279 5.740407 -0.7066287  78.4050789  70.20741    2 #> 949  1.632279 5.740407 -0.7066287  32.7781423  70.14355    2 #> 950  1.632279 5.740407 -0.7066287  73.4391557  81.68525    2 #> 951  1.632279 5.740407 -0.7066287  49.7361763  84.40696    1 #> 952  1.632279 5.740407 -0.7066287  57.9753483  82.18861    2 #> 953  1.632279 5.740407 -0.7066287  82.3302532  74.69445    1 #> 954  1.632279 5.740407 -0.7066287  57.6937706  88.39127    1 #> 955  1.632279 5.740407 -0.7066287  21.4806872  70.94022    1 #> 956  1.632279 5.740407 -0.7066287  41.6855276  70.52054    1 #> 957  1.632279 5.740407 -0.7066287  58.2824698  76.95454    2 #> 958  1.632279 5.740407 -0.7066287 -28.4194234 104.36439    2 #> 959  1.632279 5.740407 -0.7066287  -0.3208229  71.12139    2 #> 960  1.632279 5.740407 -0.7066287  93.8628975  64.04545    2 #> 961  1.632279 5.740407 -0.7066287  48.7233971  74.58184    1 #> 962  1.632279 5.740407 -0.7066287  -4.8453070  76.58630    1 #> 963  1.632279 5.740407 -0.7066287  59.3592742  66.97198    1 #> 964  1.632279 5.740407 -0.7066287  59.0093486  70.31729    1 #> 965  1.632279 5.740407 -0.7066287  52.2446956  74.82363    1 #> 966  1.632279 5.740407 -0.7066287  39.0863283  71.03333    1 #> 967  1.632279 5.740407 -0.7066287  57.5986251  81.46471    2 #> 968  1.632279 5.740407 -0.7066287  42.1454018  75.47601    2 #> 969  1.632279 5.740407 -0.7066287  43.1725786  66.90505    1 #> 970  1.632279 5.740407 -0.7066287  82.4901817  64.21519    1 #> 971  1.632279 5.740407 -0.7066287  60.7011635  72.24152    1 #> 972  1.632279 5.740407 -0.7066287  65.3391669  59.35424    1 #> 973  1.632279 5.740407 -0.7066287  31.9185684  66.83118    1 #> 974  1.632279 5.740407 -0.7066287  36.3661832  77.91527    1 #> 975  1.632279 5.740407 -0.7066287  59.0508009  77.52569    2 #> 976  1.632279 5.740407 -0.7066287  47.2930855  72.17148    1 #> 977  1.632279 5.740407 -0.7066287  96.8750065  73.46133    1 #> 978  1.632279 5.740407 -0.7066287  55.0212657  76.76546    2 #> 979  1.632279 5.740407 -0.7066287  62.6863454  58.77168    1 #> 980  1.632279 5.740407 -0.7066287  68.6373889  85.16956    1 #> 981  1.632279 5.740407 -0.7066287  81.2755279  48.92099    2 #> 982  1.632279 5.740407 -0.7066287 103.8595340  74.33343    1 #> 983  1.632279 5.740407 -0.7066287  28.6579149  90.43011    2 #> 984  1.632279 5.740407 -0.7066287   4.9403665  72.73476    1 #> 985  1.632279 5.740407 -0.7066287  78.8366005  74.70983    1 #> 986  1.632279 5.740407 -0.7066287  11.1238010  80.43364    1 #> 987  1.632279 5.740407 -0.7066287  63.3598971  57.93831    1 #> 988  1.632279 5.740407 -0.7066287  22.6545483  62.80785    1 #> 989  1.632279 5.740407 -0.7066287  64.5373818  90.66765    2 #> 990  1.632279 5.740407 -0.7066287  52.7217474  68.58825    1 #> 991  1.632279 5.740407 -0.7066287  36.9216153  70.37398    2 #> 992  1.632279 5.740407 -0.7066287  79.8122065  75.39207    1 #> 993  1.632279 5.740407 -0.7066287  61.5295674  77.52203    1 #> 994  1.632279 5.740407 -0.7066287  63.0572080  72.05715    1 #> 995  1.632279 5.740407 -0.7066287  99.1723557  78.37895    1 #> 996  1.632279 5.740407 -0.7066287  47.8702574  75.61264    1 #> 997  1.632279 5.740407 -0.7066287  87.0387347  73.06106    2 #> 998  1.632279 5.740407 -0.7066287  84.5713440  79.66582    2 #> 999  1.632279 5.740407 -0.7066287  27.4957126  98.71902    1 #> 1000 1.632279 5.740407 -0.7066287  45.5107794  75.38610    1"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxChain.html","id":null,"dir":"Reference","previous_headings":"","what":"rxChain  Chain or add item to solved system of equations — rxChain","title":"rxChain  Chain or add item to solved system of equations — rxChain","text":"Add item solved system equations","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxChain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rxChain  Chain or add item to solved system of equations — rxChain","text":"","code":"rxChain(obj1, obj2)  # S3 method for solveRxDll +(obj1, obj2)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxChain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rxChain  Chain or add item to solved system of equations — rxChain","text":"obj1 Solved object. obj2 New object added/piped/chained solved object.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxChain.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rxChain  Chain or add item to solved system of equations — rxChain","text":"newObject event table, return new solved object new event table.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxChain.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rxChain  Chain or add item to solved system of equations — rxChain","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxChain2.html","id":null,"dir":"Reference","previous_headings":"","what":"Second command in chaining commands — rxChain2","title":"Second command in chaining commands — rxChain2","text":"s3 method called internally + \\%>\\% operators.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxChain2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Second command in chaining commands — rxChain2","text":"","code":"rxChain2(obj, solvedObject)  # S3 method for default rxChain2(obj, solvedObject)  # S3 method for EventTable rxChain2(obj, solvedObject)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxChain2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Second command in chaining commands — rxChain2","text":"obj object added/chained/piped solved object solvedObject solved object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxChain2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Second command in chaining commands — rxChain2","text":"chained operation","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxChain2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Second command in chaining commands — rxChain2","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxClean.html","id":null,"dir":"Reference","previous_headings":"","what":"Cleanup anonymous DLLs by unloading them — rxClean","title":"Cleanup anonymous DLLs by unloading them — rxClean","text":"cleans rxode2 loaded DLLs","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxClean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cleanup anonymous DLLs by unloading them — rxClean","text":"","code":"rxClean(wd)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxClean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cleanup anonymous DLLs by unloading them — rxClean","text":"wd directory cleaned; (DEPRECIATED), longer anything. unloads rxode2 anonymous dlls.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxClean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cleanup anonymous DLLs by unloading them — rxClean","text":"TRUE successful","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxClean.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Cleanup anonymous DLLs by unloading them — rxClean","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCombineErrorLines.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine Error Lines and create rxode2 expression — rxCombineErrorLines","title":"Combine Error Lines and create rxode2 expression — rxCombineErrorLines","text":"Combine Error Lines create rxode2 expression","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCombineErrorLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine Error Lines and create rxode2 expression — rxCombineErrorLines","text":"","code":"rxCombineErrorLines(   uiModel,   errLines = NULL,   prefixLines = NULL,   paramsLine = NULL,   modelVars = FALSE,   cmtLines = TRUE,   dvidLine = TRUE,   lstExpr = NULL,   useIf = TRUE )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCombineErrorLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine Error Lines and create rxode2 expression — rxCombineErrorLines","text":"uiModel UI model errLines Error lines; missing, get error lines rxGetDistributionSimulationLines() prefixLines Prefix lines, param statement paramsLine Params line, present. modelVars Return model vars instead rxode2 statement cmtLines Include trailing cmt lines dvidLine Include trailing dvid() specification lstExpr list expressions model, NULL.  NULL defaults model expressions accessible uiModel$lstExpr. useIf Use (CMT == X) endpoints","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCombineErrorLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine Error Lines and create rxode2 expression — rxCombineErrorLines","text":"quoted expression can evaluated compiled rxode2 model","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCombineErrorLines.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Combine Error Lines and create rxode2 expression — rxCombineErrorLines","text":"exported allow functions mangle error lines make types estimation methods (needed)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCombineErrorLines.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine Error Lines and create rxode2 expression — rxCombineErrorLines","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCombineErrorLines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine Error Lines and create rxode2 expression — rxCombineErrorLines","text":"","code":"one.cmt <- function() {    ini({      ## You may label each parameter with a comment      tka <- 0.45 # Log Ka      tcl <- log(c(0, 2.7, 100)) # Log Cl      ## This works with interactive models      ## You may also label the preceding line with label(\"label text\")      tv <- 3.45; label(\"log V\")      ## the label(\"Label name\") works with all models      eta.ka ~ 0.6      eta.cl ~ 0.3      eta.v ~ 0.1      add.sd <- 0.7    })    model({      ka <- exp(tka + eta.ka)      cl <- exp(tcl + eta.cl)      v <- exp(tv + eta.v)      linCmt() ~ add(add.sd)    }) }  f <- rxode2(one.cmt) #>   #> ℹ parameter labels from comments will be replaced by 'label()'  # You can get the simulation model easily by rxCombineErrorLines(f) #> rxode2({ #>     params(tka, tcl, tv, add.sd, eta.ka, eta.cl, eta.v) #>     ka <- exp(tka + eta.ka) #>     cl <- exp(tcl + eta.cl) #>     v <- exp(tv + eta.v) #>     rx_yj_ ~ 2 #>     rx_lambda_ ~ 1 #>     rx_low_ ~ 0 #>     rx_hi_ ~ 1 #>     rx_pred_f_ ~ linCmt() #>     rx_pred_ ~ rx_pred_f_ #>     rx_r_ ~ (add.sd)^2 #>     ipredSim <- rxTBSi(rx_pred_, rx_lambda_, rx_yj_, rx_low_,  #>         rx_hi_) #>     sim <- rxTBSi(rx_pred_ + sqrt(rx_r_) * err.rxLinCmt, rx_lambda_,  #>         rx_yj_, rx_low_, rx_hi_) #>     cmt(rxLinCmt) #>     dvid(1) #> })  # You can then get the compiled model by simply evaluting the model: r <- eval(rxCombineErrorLines(f)) #>    # This also works with multile endpoint models: pk.turnover.emax <- function() {   ini({     tktr <- log(1)     tka <- log(1)     tcl <- log(0.1)     tv <- log(10)     ##     eta.ktr ~ 1     eta.ka ~ 1     eta.cl ~ 2     eta.v ~ 1     prop.err <- 0.1     pkadd.err <- 0.1     ##     temax <- logit(0.8)     tec50 <- log(0.5)     tkout <- log(0.05)     te0 <- log(100)     ##     eta.emax ~ .5     eta.ec50  ~ .5     eta.kout ~ .5     eta.e0 ~ .5     ##     pdadd.err <- 10   })   model({     ktr <- exp(tktr + eta.ktr)     ka <- exp(tka + eta.ka)     cl <- exp(tcl + eta.cl)     v <- exp(tv + eta.v)     ##     emax=expit(temax+eta.emax)     ec50 =  exp(tec50 + eta.ec50)     kout = exp(tkout + eta.kout)     e0 = exp(te0 + eta.e0)     ##     DCP = center/v     PD=1-emax*DCP/(ec50+DCP)     ##     effect(0) = e0     kin = e0*kout     ##     d/dt(depot) = -ktr * depot     d/dt(gut) =  ktr * depot -ka * gut     d/dt(center) =  ka * gut - cl / v * center     d/dt(effect) = kin*PD -kout*effect     ##     cp = center / v     cp ~ prop(prop.err) + add(pkadd.err)     effect ~ add(pdadd.err)   }) }  f <- rxode2(pk.turnover.emax) #>   rxCombineErrorLines(f) #> rxode2({ #>     params(tktr, tka, tcl, tv, prop.err, pkadd.err, temax, tec50,  #>         tkout, te0, pdadd.err, eta.ktr, eta.ka, eta.cl, eta.v,  #>         eta.emax, eta.ec50, eta.kout, eta.e0) #>     ktr <- exp(tktr + eta.ktr) #>     ka <- exp(tka + eta.ka) #>     cl <- exp(tcl + eta.cl) #>     v <- exp(tv + eta.v) #>     emax = expit(temax + eta.emax) #>     ec50 = exp(tec50 + eta.ec50) #>     kout = exp(tkout + eta.kout) #>     e0 = exp(te0 + eta.e0) #>     DCP = center/v #>     PD = 1 - emax * DCP/(ec50 + DCP) #>     effect(0) = e0 #>     kin = e0 * kout #>     d/dt(depot) = -ktr * depot #>     d/dt(gut) = ktr * depot - ka * gut #>     d/dt(center) = ka * gut - cl/v * center #>     d/dt(effect) = kin * PD - kout * effect #>     cp = center/v #>     if (CMT == 5) { #>         rx_yj_ ~ 2 #>         rx_lambda_ ~ 1 #>         rx_low_ ~ 0 #>         rx_hi_ ~ 1 #>         rx_pred_f_ ~ cp #>         rx_pred_ ~ rx_pred_f_ #>         rx_r_ ~ (pkadd.err)^2 + (rx_pred_f_)^2 * (prop.err)^2 #>         ipredSim <- rxTBSi(rx_pred_, rx_lambda_, rx_yj_, rx_low_,  #>             rx_hi_) #>         sim <- rxTBSi(rx_pred_ + sqrt(rx_r_) * err.cp, rx_lambda_,  #>             rx_yj_, rx_low_, rx_hi_) #>     } #>     if (CMT == 4) { #>         rx_yj_ ~ 2 #>         rx_lambda_ ~ 1 #>         rx_low_ ~ 0 #>         rx_hi_ ~ 1 #>         rx_pred_f_ ~ effect #>         rx_pred_ ~ rx_pred_f_ #>         rx_r_ ~ (pdadd.err)^2 #>         ipredSim <- rxTBSi(rx_pred_, rx_lambda_, rx_yj_, rx_low_,  #>             rx_hi_) #>         sim <- rxTBSi(rx_pred_ + sqrt(rx_r_) * err.effect, rx_lambda_,  #>             rx_yj_, rx_low_, rx_hi_) #>     } #>     cmt(cp) #>     dvid(5, 4) #> })  # Note that in the parsed form, you can also get the compiled rxode2 # model with $simulationModel  f$simulationModel #>   #> rxode2 2.0.6 model named rx_d98e75cfbe487ff461d58a0e2641e4fa model (✔ ready).  #> $state: depot, gut, center, effect #> $stateExtra: cp #> $params: tktr, tka, tcl, tv, prop.err, pkadd.err, temax, tec50, tkout, te0, pdadd.err, eta.ktr, eta.ka, eta.cl, eta.v, eta.emax, eta.ec50, eta.kout, eta.e0, CMT, err.cp, err.effect #> $lhs: ktr, ka, cl, v, emax, ec50, kout, e0, DCP, PD, kin, cp, ipredSim, sim"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCompile.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile a model if needed — rxCompile","title":"Compile a model if needed — rxCompile","text":"compilation workhorse creating rxode2 model DLL files.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCompile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile a model if needed — rxCompile","text":"","code":"rxCompile(   model,   dir,   prefix,   force = FALSE,   modName = NULL,   package = NULL,   ... )  # S3 method for rxModelVars rxCompile(   model,   dir = NULL,   prefix = NULL,   force = FALSE,   modName = NULL,   package = NULL,   ... )  # S3 method for character rxCompile(   model,   dir = NULL,   prefix = NULL,   force = FALSE,   modName = NULL,   package = NULL,   ... )  # S3 method for rxDll rxCompile(model, ...)  # S3 method for rxode2 rxCompile(model, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCompile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compile a model if needed — rxCompile","text":"model ODE model specification.  can : string containing set ordinary differential equations (ODE) expressions defining changes dynamic system. file name ODE system equation contained ODE expression enclosed \\{\\} (see also filename argument). details, see sections “Details” rxode2 Syntax . dir model directory C file stored compiling. prefix string indicating prefix use C based functions.  missing, calculated based file name, md5 parsed model. force boolean stating (re)compile forced rxode2 detects models already generated. modName string used model name. string used naming various aspects computations, including generating C symbol names, dynamic libraries, etc. Therefore, necessary modName consists simple ASCII alphanumeric characters starting letter. package Package name pre-compiled binaries. ... arguments sent rxTrans() function.","code":"If unspecified, the C code is stored in a temporary directory, then the model is compiled and moved to the current directory. Afterwards the C code is removed.  If specified, the C code is stored in the specified directory and then compiled in that directory.  The C code is not removed after the DLL is created in the same directory.  This can be useful to debug the c-code outputs."},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCompile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile a model if needed — rxCompile","text":"rxDll object following components dllDLL path modelmodel specification .cA function call C code correct context DLL using .C() function. .callA function call C code correct context DLL using .Call() function. argsA list arguments used create rxDll object.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCompile.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Compile a model if needed — rxCompile","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCondition.html","id":null,"dir":"Reference","previous_headings":"","what":"Current Condition for rxode2 object — rxCondition","title":"Current Condition for rxode2 object — rxCondition","text":"Current Condition rxode2 object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCondition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current Condition for rxode2 object — rxCondition","text":"","code":"rxCondition(obj, condition = NULL)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCondition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current Condition for rxode2 object — rxCondition","text":"obj rxode2 object condition specified one conditions rxode2 object (determined rxExpandIfElse()), assign rxode2 current condition parameter.  condition one known condition, condition set NULL, implying conditioning currently used.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCondition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current Condition for rxode2 object — rxCondition","text":"Current condition rxode2 object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCondition.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Current Condition for rxode2 object — rxCondition","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxControlUpdateSens.html","id":null,"dir":"Reference","previous_headings":"","what":"This updates the tolerances based on the sensitivity equations — rxControlUpdateSens","title":"This updates the tolerances based on the sensitivity equations — rxControlUpdateSens","text":"assumes normal ODE equations first equations ODE expanded forward sensitivities type sensitivity (like adjoint)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxControlUpdateSens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This updates the tolerances based on the sensitivity equations — rxControlUpdateSens","text":"","code":"rxControlUpdateSens(rxControl, sensCmt = NULL, ncmt = NULL)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxControlUpdateSens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This updates the tolerances based on the sensitivity equations — rxControlUpdateSens","text":"rxControl Input list rxControl type list sensCmt Number sensitivity compartments ncmt Number compartments","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxControlUpdateSens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This updates the tolerances based on the sensitivity equations — rxControlUpdateSens","text":"Updated rxControl $atol, $rtol, $ssAtol$ssRtol updated different sensitivities normal ODEs (first) different sensitivity larger compartments (sensitivities).","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxControlUpdateSens.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This updates the tolerances based on the sensitivity equations — rxControlUpdateSens","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxControlUpdateSens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This updates the tolerances based on the sensitivity equations — rxControlUpdateSens","text":"","code":"tmp <- rxControl()  tmp2 <- rxControlUpdateSens(tmp, 3, 6)  tmp2$atol #> [1] 1e-08 1e-08 1e-08 1e-08 1e-08 1e-08 tmp2$rtol #> [1] 1e-06 1e-06 1e-06 1e-06 1e-06 1e-06 tmp2$ssAtol #> [1] 1e-08 1e-08 1e-08 1e-08 1e-08 1e-08 tmp2$ssRtol #> [1] 1e-06 1e-06 1e-06 1e-06 1e-06 1e-06"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCreateCache.html","id":null,"dir":"Reference","previous_headings":"","what":"This will create the cache directory for rxode2 to save between sessions — rxCreateCache","title":"This will create the cache directory for rxode2 to save between sessions — rxCreateCache","text":"run, R_user_dir rxode2's cache present, create cache","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCreateCache.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This will create the cache directory for rxode2 to save between sessions — rxCreateCache","text":"","code":"rxCreateCache()"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCreateCache.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This will create the cache directory for rxode2 to save between sessions — rxCreateCache","text":"nothing","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxCreateCache.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This will create the cache directory for rxode2 to save between sessions — rxCreateCache","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxD.html","id":null,"dir":"Reference","previous_headings":"","what":"Add to rxode2's derivative tables — rxD","title":"Add to rxode2's derivative tables — rxD","text":"Add rxode2's derivative tables","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add to rxode2's derivative tables — rxD","text":"","code":"rxD(name, derivatives)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add to rxode2's derivative tables — rxD","text":"name Function Name derivatives list functions. function takes number arguments original function.  first function construct derivative respect first argument; second function construct derivitive respect second argument, .","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add to rxode2's derivative tables — rxD","text":"nothing","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxD.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add to rxode2's derivative tables — rxD","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add to rxode2's derivative tables — rxD","text":"","code":"## Add an arbitrary list of derivative functions ## In this case the fun(x,y) is assumed to be 0.5*x^2+0.5*y^2  rxD(\"fun\", list(   function(x, y) {     return(x)   },   function(x, y) {     return(y)   } ))"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDelete.html","id":null,"dir":"Reference","previous_headings":"","what":"Delete the DLL for the model — rxDelete","title":"Delete the DLL for the model — rxDelete","text":"function deletes DLL, delete model information object.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDelete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Delete the DLL for the model — rxDelete","text":"","code":"rxDelete(obj)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDelete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Delete the DLL for the model — rxDelete","text":"obj rxode2 family objects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDelete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Delete the DLL for the model — rxDelete","text":"boolean stating operation successful.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDelete.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Delete the DLL for the model — rxDelete","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDemoteAddErr.html","id":null,"dir":"Reference","previous_headings":"","what":"Demote the error type — rxDemoteAddErr","title":"Demote the error type — rxDemoteAddErr","text":"Demote error type","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDemoteAddErr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demote the error type — rxDemoteAddErr","text":"","code":"rxDemoteAddErr(errType)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDemoteAddErr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Demote the error type — rxDemoteAddErr","text":"errType Error type factor","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDemoteAddErr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Demote the error type — rxDemoteAddErr","text":"Demoted Error Type","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDemoteAddErr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Demote the error type — rxDemoteAddErr","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDemoteAddErr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Demote the error type — rxDemoteAddErr","text":"","code":"rxErrTypeCombine(\"add\") %>%   rxErrTypeCombine(\"prop\") #> $transform #> [1] untransformed #> 10 Levels: boxCox yeoJohnson untransformed lnorm logit ... probit + boxCox #>  #> $errType #> [1] add + prop #> Levels: add prop pow add + prop add + pow none #>  #> $errTypeF #> [1] untransformed #> Levels: untransformed transformed f none #>  #> $addProp #> [1] default #> Levels: combined1 combined2 default #>  #> attr(,\"class\") #> [1] \"rxCombinedErrorList\"  # This removes the internal additive error rxErrTypeCombine(\"add\") %>%   rxErrTypeCombine(\"prop\") %>%   rxDemoteAddErr() #> $transform #> [1] untransformed #> 10 Levels: boxCox yeoJohnson untransformed lnorm logit ... probit + boxCox #>  #> $errType #> [1] prop #> Levels: add prop pow add + prop add + pow none #>  #> $errTypeF #> [1] untransformed #> Levels: untransformed transformed f none #>  #> $addProp #> [1] default #> Levels: combined1 combined2 default #>  #> attr(,\"class\") #> [1] \"rxCombinedErrorList\"  # This is used for logitNorm(NA), the additive portion is stripped"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDerived.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate derived parameters for the 1-, 2-, and 3- compartment\nlinear models. — rxDerived","title":"Calculate derived parameters for the 1-, 2-, and 3- compartment\nlinear models. — rxDerived","text":"calculates derived parameters based provided data frame arguments","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDerived.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate derived parameters for the 1-, 2-, and 3- compartment\nlinear models. — rxDerived","text":"","code":"rxDerived(..., verbose = FALSE, digits = 0)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDerived.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate derived parameters for the 1-, 2-, and 3- compartment\nlinear models. — rxDerived","text":"... input can : data frame PK parameters ; ideally data frame one pk parameter per row since output data frame one PK parameter per row. PK parameters either vector scalar verbose boolean TRUE provides message detected pk parameters detected compartmental model.  default FALSE. digits represents number significant digits output; number zero (default), round.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDerived.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate derived parameters for the 1-, 2-, and 3- compartment\nlinear models. — rxDerived","text":"Return data.frame derived PK parameters 1-, 2-, 3-compartment linear model given provided clearances volumes based inferred model type. model parameters provided data frame : vc: Central Volume (1-, 2- 3- compartment models) kel: First-order elimination rate (1-, 2-, 3-compartment models) k12: First-order rate transfer central first peripheral compartment; (2- 3-compartment models) k21: First-order rate transfer first peripheral central compartment, (2- 3-compartment models) k13: First-order rate transfer central second peripheral compartment; (3-compartment model) k31: First-order rate transfer second peripheral central compartment (3-compartment model) vp: Peripheral Volume (2- 3- compartment models) vp2: Peripheral Volume 3rd compartment (3- compartment model) vss: Volume distribution steady state; (1-, 2-, 3-compartment models) t12alpha: \\(t_{1/2,\\alpha}\\); (1-, 2-, 3-compartment models) t12beta: \\(t_{1/2,\\beta}\\); (2- 3-compartment models) t12gamma: \\(t_{1/2,\\gamma}\\); (3-compartment model) alpha: \\(\\alpha\\); (1-, 2-, 3-compartment models) beta: \\(\\beta\\); (2- 3-compartment models) gamma: \\(\\beta\\); (3-compartment model) : true ; (1-, 2-, 3-compartment models) B: true B; (2- 3-compartment models) C: true C; (3-compartment model) fracA: fractional ; (1-, 2-, 3-compartment models) fracB: fractional B; (2- 3-compartment models) fracC: fractional C; (3-compartment model)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDerived.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate derived parameters for the 1-, 2-, and 3- compartment\nlinear models. — rxDerived","text":"Shafer S. L. CONVERT.XLS Rowland M, Tozer TN. Clinical Pharmacokinetics Pharmacodynamics: Concepts Applications (4th). Clipping Williams & Wilkins, Philadelphia, 2010.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDerived.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Calculate derived parameters for the 1-, 2-, and 3- compartment\nlinear models. — rxDerived","text":"Matthew Fidler documentation Justin Wilkins, justin.wilkins@occams.com","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDerived.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate derived parameters for the 1-, 2-, and 3- compartment\nlinear models. — rxDerived","text":"","code":"## Note that rxode2 parses the names to figure out the best PK parameter  params <- rxDerived(cl = 29.4, v = 23.4, Vp = 114, vp2 = 4614, q = 270, q2 = 73)  ## That is why this gives the same results as the value before  params <- rxDerived(CL = 29.4, V1 = 23.4, V2 = 114, V3 = 4614, Q2 = 270, Q3 = 73)  ## You may also use micro-constants alpha/beta etc.  params <- rxDerived(k12 = 0.1, k21 = 0.2, k13 = 0.3, k31 = 0.4, kel = 10, v = 10)  ## or you can mix vectors and scalars  params <- rxDerived(CL = 29.4, V = 1:3)  ## If you want, you can round to a number of significant digits ## with the `digits` argument:  params <- rxDerived(CL = 29.4, V = 1:3, digits = 2)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDfdy.html","id":null,"dir":"Reference","previous_headings":"","what":"Jacobian and parameter derivatives — rxDfdy","title":"Jacobian and parameter derivatives — rxDfdy","text":"Return Jacobain parameter derivatives","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDfdy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jacobian and parameter derivatives — rxDfdy","text":"","code":"rxDfdy(obj)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDfdy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jacobian and parameter derivatives — rxDfdy","text":"obj rxode2 family objects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDfdy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jacobian and parameter derivatives — rxDfdy","text":"list jacobian parameters defined rxode2 object.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDfdy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Jacobian and parameter derivatives — rxDfdy","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDll.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the DLL associated with the rxode2 object — rxDll","title":"Return the DLL associated with the rxode2 object — rxDll","text":"return dynamic load library shared object used run C code rxode2.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the DLL associated with the rxode2 object — rxDll","text":"","code":"rxDll(obj)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the DLL associated with the rxode2 object — rxDll","text":"obj rxode2 family objects character string model specification location file model specification.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the DLL associated with the rxode2 object — rxDll","text":"path library","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDll.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return the DLL associated with the rxode2 object — rxDll","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDynLoad.html","id":null,"dir":"Reference","previous_headings":"","what":"Load rxode2 object — rxDynLoad","title":"Load rxode2 object — rxDynLoad","text":"Load rxode2 object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDynLoad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load rxode2 object — rxDynLoad","text":"","code":"rxDynLoad(obj)  rxLoad(obj)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDynLoad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load rxode2 object — rxDynLoad","text":"obj rxode2 family objects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDynLoad.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load rxode2 object — rxDynLoad","text":"Boolean returning rxode2 library loaded.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDynLoad.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load rxode2 object — rxDynLoad","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDynUnload.html","id":null,"dir":"Reference","previous_headings":"","what":"Unload rxode2 object — rxDynUnload","title":"Unload rxode2 object — rxDynUnload","text":"Unload rxode2 object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDynUnload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unload rxode2 object — rxDynUnload","text":"","code":"rxDynUnload(obj)  rxUnload(obj)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDynUnload.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unload rxode2 object — rxDynUnload","text":"obj rxode2 family objects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDynUnload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unload rxode2 object — rxDynUnload","text":"Boolean returning rxode2 library loaded.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxDynUnload.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Unload rxode2 object — rxDynUnload","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxErrTypeCombine.html","id":null,"dir":"Reference","previous_headings":"","what":"Combine transformations and error structures — rxErrTypeCombine","title":"Combine transformations and error structures — rxErrTypeCombine","text":"Combine error information figure transformation applied current endpoint","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxErrTypeCombine.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combine transformations and error structures — rxErrTypeCombine","text":"","code":"rxErrTypeCombine(oldErrType, newErrType)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxErrTypeCombine.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combine transformations and error structures — rxErrTypeCombine","text":"oldErrType old transformation, default zero representing prior transformation. parameter first allow piping. parameter addTransform missing oldErrType character value, functions swaps oldErrType addTransform assigns oldErrType zero assuming prior distribution. newTransform new distribution \"added\" current transformation.  assumes inputs preferred distribution name, determined rxPreferredDistributionName()","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxErrTypeCombine.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combine transformations and error structures — rxErrTypeCombine","text":"new transformation factor","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxErrTypeCombine.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Combine transformations and error structures — rxErrTypeCombine","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxErrTypeCombine.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combine transformations and error structures — rxErrTypeCombine","text":"","code":"rxErrTypeCombine(\"probitNorm\") #> $transform #> [1] probit #> 10 Levels: boxCox yeoJohnson untransformed lnorm logit ... probit + boxCox #>  #> $errType #> [1] add #> Levels: add prop pow add + prop add + pow none #>  #> $errTypeF #> [1] none #> Levels: untransformed transformed f none #>  #> $addProp #> [1] default #> Levels: combined1 combined2 default #>  #> attr(,\"class\") #> [1] \"rxCombinedErrorList\"  rxErrTypeCombine(\"probitNorm\") %>%   rxErrTypeCombine(\"boxCox\") #> $transform #> [1] probit + boxCox #> 10 Levels: boxCox yeoJohnson untransformed lnorm logit ... probit + boxCox #>  #> $errType #> [1] add #> Levels: add prop pow add + prop add + pow none #>  #> $errTypeF #> [1] none #> Levels: untransformed transformed f none #>  #> $addProp #> [1] default #> Levels: combined1 combined2 default #>  #> attr(,\"class\") #> [1] \"rxCombinedErrorList\""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxEvid.html","id":null,"dir":"Reference","previous_headings":"","what":"EVID formatting for tibble and other places. — rxEvid","title":"EVID formatting for tibble and other places. — rxEvid","text":"make EVID readable non pharmacometricians. displays means allows displayed tibble.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxEvid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"EVID formatting for tibble and other places. — rxEvid","text":"","code":"rxEvid(x)  as.rxEvid(x)  # S3 method for rxEvid c(x, ...)  # S3 method for rxEvid [(x, ...)  # S3 method for rxEvid as.character(x, ...)  # S3 method for rxEvid [[(x, ...)  # S3 method for rxRateDur c(x, ...)  # S3 method for rxEvid format(x, ...)  # S3 method for rxRateDur format(x, ...)  # S3 method for rxEvid print(x, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxEvid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"EVID formatting for tibble and other places. — rxEvid","text":"x Item converted rxode2 EVID specification. ... parameters","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxEvid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"EVID formatting for tibble and other places. — rxEvid","text":"rxEvid specification","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxEvid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"EVID formatting for tibble and other places. — rxEvid","text":"","code":"rxEvid(1:7) #> 1:Dose (Add)                 #> 2:Other                      #> 3:Reset                      #> 4:Reset&Dose #> 5:Replace                    #> 6:Multiply                   #> 7:Transit"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandFEta_.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand d(f)/d(eta) — rxExpandFEta_","title":"Expand d(f)/d(eta) — rxExpandFEta_","text":"Expand d(f)/d(eta)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandFEta_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand d(f)/d(eta) — rxExpandFEta_","text":"","code":"rxExpandFEta_(state, neta, pred)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandFEta_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand d(f)/d(eta) — rxExpandFEta_","text":"state state expand neta number etas pred type prediction","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandGrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Faster expand.grid — rxExpandGrid","title":"Faster expand.grid — rxExpandGrid","text":"support x y characters right now","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandGrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Faster expand.grid — rxExpandGrid","text":"","code":"rxExpandGrid(x, y, type = 0L)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandGrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Faster expand.grid — rxExpandGrid","text":"x first element (must character) y second element (must character) type Internal type=0L traditional expand grid type=1L Jacobian expand grid (adds symbols)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandGrid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Faster expand.grid — rxExpandGrid","text":"Expand grid","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandGrid.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Faster expand.grid — rxExpandGrid","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandGrid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Faster expand.grid — rxExpandGrid","text":"","code":"## rxExpandGrid(letters, letters) #>     Var1 Var2 #> 1      a    a #> 2      b    a #> 3      c    a #> 4      d    a #> 5      e    a #> 6      f    a #> 7      g    a #> 8      h    a #> 9      i    a #> 10     j    a #> 11     k    a #> 12     l    a #> 13     m    a #> 14     n    a #> 15     o    a #> 16     p    a #> 17     q    a #> 18     r    a #> 19     s    a #> 20     t    a #> 21     u    a #> 22     v    a #> 23     w    a #> 24     x    a #> 25     y    a #> 26     z    a #> 27     a    b #> 28     b    b #> 29     c    b #> 30     d    b #> 31     e    b #> 32     f    b #> 33     g    b #> 34     h    b #> 35     i    b #> 36     j    b #> 37     k    b #> 38     l    b #> 39     m    b #> 40     n    b #> 41     o    b #> 42     p    b #> 43     q    b #> 44     r    b #> 45     s    b #> 46     t    b #> 47     u    b #> 48     v    b #> 49     w    b #> 50     x    b #> 51     y    b #> 52     z    b #> 53     a    c #> 54     b    c #> 55     c    c #> 56     d    c #> 57     e    c #> 58     f    c #> 59     g    c #> 60     h    c #> 61     i    c #> 62     j    c #> 63     k    c #> 64     l    c #> 65     m    c #> 66     n    c #> 67     o    c #> 68     p    c #> 69     q    c #> 70     r    c #> 71     s    c #> 72     t    c #> 73     u    c #> 74     v    c #> 75     w    c #> 76     x    c #> 77     y    c #> 78     z    c #> 79     a    d #> 80     b    d #> 81     c    d #> 82     d    d #> 83     e    d #> 84     f    d #> 85     g    d #> 86     h    d #> 87     i    d #> 88     j    d #> 89     k    d #> 90     l    d #> 91     m    d #> 92     n    d #> 93     o    d #> 94     p    d #> 95     q    d #> 96     r    d #> 97     s    d #> 98     t    d #> 99     u    d #> 100    v    d #> 101    w    d #> 102    x    d #> 103    y    d #> 104    z    d #> 105    a    e #> 106    b    e #> 107    c    e #> 108    d    e #> 109    e    e #> 110    f    e #> 111    g    e #> 112    h    e #> 113    i    e #> 114    j    e #> 115    k    e #> 116    l    e #> 117    m    e #> 118    n    e #> 119    o    e #> 120    p    e #> 121    q    e #> 122    r    e #> 123    s    e #> 124    t    e #> 125    u    e #> 126    v    e #> 127    w    e #> 128    x    e #> 129    y    e #> 130    z    e #> 131    a    f #> 132    b    f #> 133    c    f #> 134    d    f #> 135    e    f #> 136    f    f #> 137    g    f #> 138    h    f #> 139    i    f #> 140    j    f #> 141    k    f #> 142    l    f #> 143    m    f #> 144    n    f #> 145    o    f #> 146    p    f #> 147    q    f #> 148    r    f #> 149    s    f #> 150    t    f #> 151    u    f #> 152    v    f #> 153    w    f #> 154    x    f #> 155    y    f #> 156    z    f #> 157    a    g #> 158    b    g #> 159    c    g #> 160    d    g #> 161    e    g #> 162    f    g #> 163    g    g #> 164    h    g #> 165    i    g #> 166    j    g #> 167    k    g #> 168    l    g #> 169    m    g #> 170    n    g #> 171    o    g #> 172    p    g #> 173    q    g #> 174    r    g #> 175    s    g #> 176    t    g #> 177    u    g #> 178    v    g #> 179    w    g #> 180    x    g #> 181    y    g #> 182    z    g #> 183    a    h #> 184    b    h #> 185    c    h #> 186    d    h #> 187    e    h #> 188    f    h #> 189    g    h #> 190    h    h #> 191    i    h #> 192    j    h #> 193    k    h #> 194    l    h #> 195    m    h #> 196    n    h #> 197    o    h #> 198    p    h #> 199    q    h #> 200    r    h #> 201    s    h #> 202    t    h #> 203    u    h #> 204    v    h #> 205    w    h #> 206    x    h #> 207    y    h #> 208    z    h #> 209    a    i #> 210    b    i #> 211    c    i #> 212    d    i #> 213    e    i #> 214    f    i #> 215    g    i #> 216    h    i #> 217    i    i #> 218    j    i #> 219    k    i #> 220    l    i #> 221    m    i #> 222    n    i #> 223    o    i #> 224    p    i #> 225    q    i #> 226    r    i #> 227    s    i #> 228    t    i #> 229    u    i #> 230    v    i #> 231    w    i #> 232    x    i #> 233    y    i #> 234    z    i #> 235    a    j #> 236    b    j #> 237    c    j #> 238    d    j #> 239    e    j #> 240    f    j #> 241    g    j #> 242    h    j #> 243    i    j #> 244    j    j #> 245    k    j #> 246    l    j #> 247    m    j #> 248    n    j #> 249    o    j #> 250    p    j #> 251    q    j #> 252    r    j #> 253    s    j #> 254    t    j #> 255    u    j #> 256    v    j #> 257    w    j #> 258    x    j #> 259    y    j #> 260    z    j #> 261    a    k #> 262    b    k #> 263    c    k #> 264    d    k #> 265    e    k #> 266    f    k #> 267    g    k #> 268    h    k #> 269    i    k #> 270    j    k #> 271    k    k #> 272    l    k #> 273    m    k #> 274    n    k #> 275    o    k #> 276    p    k #> 277    q    k #> 278    r    k #> 279    s    k #> 280    t    k #> 281    u    k #> 282    v    k #> 283    w    k #> 284    x    k #> 285    y    k #> 286    z    k #> 287    a    l #> 288    b    l #> 289    c    l #> 290    d    l #> 291    e    l #> 292    f    l #> 293    g    l #> 294    h    l #> 295    i    l #> 296    j    l #> 297    k    l #> 298    l    l #> 299    m    l #> 300    n    l #> 301    o    l #> 302    p    l #> 303    q    l #> 304    r    l #> 305    s    l #> 306    t    l #> 307    u    l #> 308    v    l #> 309    w    l #> 310    x    l #> 311    y    l #> 312    z    l #> 313    a    m #> 314    b    m #> 315    c    m #> 316    d    m #> 317    e    m #> 318    f    m #> 319    g    m #> 320    h    m #> 321    i    m #> 322    j    m #> 323    k    m #> 324    l    m #> 325    m    m #> 326    n    m #> 327    o    m #> 328    p    m #> 329    q    m #> 330    r    m #> 331    s    m #> 332    t    m #> 333    u    m #> 334    v    m #> 335    w    m #> 336    x    m #> 337    y    m #> 338    z    m #> 339    a    n #> 340    b    n #> 341    c    n #> 342    d    n #> 343    e    n #> 344    f    n #> 345    g    n #> 346    h    n #> 347    i    n #> 348    j    n #> 349    k    n #> 350    l    n #> 351    m    n #> 352    n    n #> 353    o    n #> 354    p    n #> 355    q    n #> 356    r    n #> 357    s    n #> 358    t    n #> 359    u    n #> 360    v    n #> 361    w    n #> 362    x    n #> 363    y    n #> 364    z    n #> 365    a    o #> 366    b    o #> 367    c    o #> 368    d    o #> 369    e    o #> 370    f    o #> 371    g    o #> 372    h    o #> 373    i    o #> 374    j    o #> 375    k    o #> 376    l    o #> 377    m    o #> 378    n    o #> 379    o    o #> 380    p    o #> 381    q    o #> 382    r    o #> 383    s    o #> 384    t    o #> 385    u    o #> 386    v    o #> 387    w    o #> 388    x    o #> 389    y    o #> 390    z    o #> 391    a    p #> 392    b    p #> 393    c    p #> 394    d    p #> 395    e    p #> 396    f    p #> 397    g    p #> 398    h    p #> 399    i    p #> 400    j    p #> 401    k    p #> 402    l    p #> 403    m    p #> 404    n    p #> 405    o    p #> 406    p    p #> 407    q    p #> 408    r    p #> 409    s    p #> 410    t    p #> 411    u    p #> 412    v    p #> 413    w    p #> 414    x    p #> 415    y    p #> 416    z    p #> 417    a    q #> 418    b    q #> 419    c    q #> 420    d    q #> 421    e    q #> 422    f    q #> 423    g    q #> 424    h    q #> 425    i    q #> 426    j    q #> 427    k    q #> 428    l    q #> 429    m    q #> 430    n    q #> 431    o    q #> 432    p    q #> 433    q    q #> 434    r    q #> 435    s    q #> 436    t    q #> 437    u    q #> 438    v    q #> 439    w    q #> 440    x    q #> 441    y    q #> 442    z    q #> 443    a    r #> 444    b    r #> 445    c    r #> 446    d    r #> 447    e    r #> 448    f    r #> 449    g    r #> 450    h    r #> 451    i    r #> 452    j    r #> 453    k    r #> 454    l    r #> 455    m    r #> 456    n    r #> 457    o    r #> 458    p    r #> 459    q    r #> 460    r    r #> 461    s    r #> 462    t    r #> 463    u    r #> 464    v    r #> 465    w    r #> 466    x    r #> 467    y    r #> 468    z    r #> 469    a    s #> 470    b    s #> 471    c    s #> 472    d    s #> 473    e    s #> 474    f    s #> 475    g    s #> 476    h    s #> 477    i    s #> 478    j    s #> 479    k    s #> 480    l    s #> 481    m    s #> 482    n    s #> 483    o    s #> 484    p    s #> 485    q    s #> 486    r    s #> 487    s    s #> 488    t    s #> 489    u    s #> 490    v    s #> 491    w    s #> 492    x    s #> 493    y    s #> 494    z    s #> 495    a    t #> 496    b    t #> 497    c    t #> 498    d    t #> 499    e    t #> 500    f    t #> 501    g    t #> 502    h    t #> 503    i    t #> 504    j    t #> 505    k    t #> 506    l    t #> 507    m    t #> 508    n    t #> 509    o    t #> 510    p    t #> 511    q    t #> 512    r    t #> 513    s    t #> 514    t    t #> 515    u    t #> 516    v    t #> 517    w    t #> 518    x    t #> 519    y    t #> 520    z    t #> 521    a    u #> 522    b    u #> 523    c    u #> 524    d    u #> 525    e    u #> 526    f    u #> 527    g    u #> 528    h    u #> 529    i    u #> 530    j    u #> 531    k    u #> 532    l    u #> 533    m    u #> 534    n    u #> 535    o    u #> 536    p    u #> 537    q    u #> 538    r    u #> 539    s    u #> 540    t    u #> 541    u    u #> 542    v    u #> 543    w    u #> 544    x    u #> 545    y    u #> 546    z    u #> 547    a    v #> 548    b    v #> 549    c    v #> 550    d    v #> 551    e    v #> 552    f    v #> 553    g    v #> 554    h    v #> 555    i    v #> 556    j    v #> 557    k    v #> 558    l    v #> 559    m    v #> 560    n    v #> 561    o    v #> 562    p    v #> 563    q    v #> 564    r    v #> 565    s    v #> 566    t    v #> 567    u    v #> 568    v    v #> 569    w    v #> 570    x    v #> 571    y    v #> 572    z    v #> 573    a    w #> 574    b    w #> 575    c    w #> 576    d    w #> 577    e    w #> 578    f    w #> 579    g    w #> 580    h    w #> 581    i    w #> 582    j    w #> 583    k    w #> 584    l    w #> 585    m    w #> 586    n    w #> 587    o    w #> 588    p    w #> 589    q    w #> 590    r    w #> 591    s    w #> 592    t    w #> 593    u    w #> 594    v    w #> 595    w    w #> 596    x    w #> 597    y    w #> 598    z    w #> 599    a    x #> 600    b    x #> 601    c    x #> 602    d    x #> 603    e    x #> 604    f    x #> 605    g    x #> 606    h    x #> 607    i    x #> 608    j    x #> 609    k    x #> 610    l    x #> 611    m    x #> 612    n    x #> 613    o    x #> 614    p    x #> 615    q    x #> 616    r    x #> 617    s    x #> 618    t    x #> 619    u    x #> 620    v    x #> 621    w    x #> 622    x    x #> 623    y    x #> 624    z    x #> 625    a    y #> 626    b    y #> 627    c    y #> 628    d    y #> 629    e    y #> 630    f    y #> 631    g    y #> 632    h    y #> 633    i    y #> 634    j    y #> 635    k    y #> 636    l    y #> 637    m    y #> 638    n    y #> 639    o    y #> 640    p    y #> 641    q    y #> 642    r    y #> 643    s    y #> 644    t    y #> 645    u    y #> 646    v    y #> 647    w    y #> 648    x    y #> 649    y    y #> 650    z    y #> 651    a    z #> 652    b    z #> 653    c    z #> 654    d    z #> 655    e    z #> 656    f    z #> 657    g    z #> 658    h    z #> 659    i    z #> 660    j    z #> 661    k    z #> 662    l    z #> 663    m    z #> 664    n    z #> 665    o    z #> 666    p    z #> 667    q    z #> 668    r    z #> 669    s    z #> 670    t    z #> 671    u    z #> 672    v    z #> 673    w    z #> 674    x    z #> 675    y    z #> 676    z    z  ## Another fast method; See ## https://stackoverflow.com/questions/10405637/use-outer-instead-of-expand-grid  expand.grid.jc <- function(seq1, seq2) {   cbind(     Var1 = rep.int(seq1, length(seq2)),     Var2 = rep.int(seq2, rep.int(length(seq1), length(seq2)))   ) } # \\donttest{ microbenchmark::microbenchmark(rxExpandGrid(letters, letters), expand.grid.jc(letters, letters)) #> Unit: microseconds #>                              expr  min    lq   mean median   uq   max neval #>    rxExpandGrid(letters, letters) 13.8 14.70 15.377   14.9 15.2  40.1   100 #>  expand.grid.jc(letters, letters) 19.8 20.65 24.606   21.2 22.2 320.8   100 # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandGrid_.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand grid internal function — rxExpandGrid_","title":"Expand grid internal function — rxExpandGrid_","text":"Expand grid internal function","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandGrid_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand grid internal function — rxExpandGrid_","text":"","code":"rxExpandGrid_(c1, c2, type)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandGrid_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand grid internal function — rxExpandGrid_","text":"c1 character vector items expanded c2 second character vector items expanded type 0 typical data frame, 1 symengine sensitivity expansion","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandIfElse.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand if/else clauses into multiple different types of lines. — rxExpandIfElse","title":"Expand if/else clauses into multiple different types of lines. — rxExpandIfElse","text":"Expand /else clauses multiple different types lines.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandIfElse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand if/else clauses into multiple different types of lines. — rxExpandIfElse","text":"","code":"rxExpandIfElse(model, removeInis = TRUE, removePrint = TRUE)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandIfElse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand if/else clauses into multiple different types of lines. — rxExpandIfElse","text":"model Model can character, rxode2 model.  needs normalized syntax, (...){} line.  else statement must line closing bracket statement previous line.  else statment must also contain opening bracket, like code else {} removeInis boolean indicating parameter initializations removed model. removePrint boolean indicating printing statements removed model.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandIfElse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand if/else clauses into multiple different types of lines. — rxExpandIfElse","text":"named character vector. names vector logical conditions, values lines satisfy logical conditions.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandIfElse.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Expand if/else clauses into multiple different types of lines. — rxExpandIfElse","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandSens2_.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand second order sensitivity — rxExpandSens2_","title":"Expand second order sensitivity — rxExpandSens2_","text":"Expand second order sensitivity","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandSens2_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand second order sensitivity — rxExpandSens2_","text":"","code":"rxExpandSens2_(state, s1, s2)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandSens2_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand second order sensitivity — rxExpandSens2_","text":"state state expand s1 variables calculate sensitivity s2 variables calculate second order sensitivity","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandSens_.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand sensitivity — rxExpandSens_","title":"Expand sensitivity — rxExpandSens_","text":"Expand sensitivity","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandSens_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand sensitivity — rxExpandSens_","text":"","code":"rxExpandSens_(state, calcSens)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxExpandSens_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand sensitivity — rxExpandSens_","text":"state state expand calcSens variables calculate sensitivity","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxForget.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear memoise cache for rxode2 — rxForget","title":"Clear memoise cache for rxode2 — rxForget","text":"Clear memoise cache rxode2","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxForget.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear memoise cache for rxode2 — rxForget","text":"","code":"rxForget()"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxForget.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear memoise cache for rxode2 — rxForget","text":"nothing; called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxForget.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Clear memoise cache for rxode2 — rxForget","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxFun.html","id":null,"dir":"Reference","previous_headings":"","what":"Add user function to rxode2 — rxFun","title":"Add user function to rxode2 — rxFun","text":"adds user function rxode2 can called.  needed, functions can differentiated numerical differences adding derivatives rxode2's internal derivative table rxD()","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxFun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add user function to rxode2 — rxFun","text":"","code":"rxFun(name, args, cCode)  rxRmFun(name)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxFun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add user function to rxode2 — rxFun","text":"name gives name user function args gives arguments user function cCode C-code new function","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxFun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add user function to rxode2 — rxFun","text":"nothing","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxFun.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Add user function to rxode2 — rxFun","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxFun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add user function to rxode2 — rxFun","text":"","code":"# \\donttest{ ## Right now rxode2 is not aware of the function f ## Therefore it cannot translate it to symengine or ## Compile a model with it.  try(rxode2(\"a=fun(a,b,c)\")) #>   #> Error in rxModelVars_(obj) : Evaluation error: syntax errors (see above).  ## Note for this approach to work, it cannot interfere with C ## function names or reserved rxode2 specical terms.  Therefore ## f(x) would not work since f is an alias for bioaviability.  fun <- \" double fun(double a, double b, double c) {   return a*a+b*a+c; } \" ## C-code for function  rxFun(\"fun\", c(\"a\", \"b\", \"c\"), fun) ## Added function  ## Now rxode2 knows how to translate this function to symengine  rxToSE(\"fun(a,b,c)\") #> [1] \"fun(a,b,c)\"  ## And will take a central difference when calculating derivatives  rxFromSE(\"Derivative(fun(a,b,c),a)\") #> [1] \"(fun((a)+6.05545445239334e-06,b,c)-fun(a,b,c))/6.05545445239334e-06\"  ## Of course, you could specify the derivative table manually rxD(\"fun\", list(   function(a, b, c) {     paste0(\"2*\", a, \"+\", b)   },   function(a, b, c) {     return(a)   },   function(a, b, c) {     return(\"0.0\")   } ))  rxFromSE(\"Derivative(fun(a,b,c),a)\") #> [1] \"2*a+b\"  # You can also remove the functions by `rxRmFun`  rxRmFun(\"fun\") # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetControl.html","id":null,"dir":"Reference","previous_headings":"","what":"rxGetControl option from ui — rxGetControl","title":"rxGetControl option from ui — rxGetControl","text":"rxGetControl option ui","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rxGetControl option from ui — rxGetControl","text":"","code":"rxGetControl(ui, option, default)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rxGetControl option from ui — rxGetControl","text":"ui rxode2 ui object option Option get default Default value","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rxGetControl option from ui — rxGetControl","text":"Option (present) default value","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rxGetControl option from ui — rxGetControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetDistributionSimulationLines.html","id":null,"dir":"Reference","previous_headings":"","what":"This is a S3 method for getting the distribution lines for a rxode2 simulation — rxGetDistributionSimulationLines","title":"This is a S3 method for getting the distribution lines for a rxode2 simulation — rxGetDistributionSimulationLines","text":"S3 method getting distribution lines rxode2 simulation","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetDistributionSimulationLines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This is a S3 method for getting the distribution lines for a rxode2 simulation — rxGetDistributionSimulationLines","text":"","code":"rxGetDistributionSimulationLines(line)  # S3 method for norm rxGetDistributionSimulationLines(line)  # S3 method for t rxGetDistributionSimulationLines(line)  # S3 method for ordinal rxGetDistributionSimulationLines(line)  # S3 method for default rxGetDistributionSimulationLines(line)  # S3 method for rxUi rxGetDistributionSimulationLines(line)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetDistributionSimulationLines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This is a S3 method for getting the distribution lines for a rxode2 simulation — rxGetDistributionSimulationLines","text":"line Parsed rxode2 model environment","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetDistributionSimulationLines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This is a S3 method for getting the distribution lines for a rxode2 simulation — rxGetDistributionSimulationLines","text":"Lines simulation ipred dv. based idea focei parameters defined","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetDistributionSimulationLines.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This is a S3 method for getting the distribution lines for a rxode2 simulation — rxGetDistributionSimulationLines","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetLin.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the linear compartment model true function — rxGetLin","title":"Get the linear compartment model true function — rxGetLin","text":"Get linear compartment model true function","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetLin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the linear compartment model true function — rxGetLin","text":"","code":"rxGetLin(   model,   linCmtSens = c(\"linCmtA\", \"linCmtB\", \"linCmtC\"),   verbose = FALSE )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetLin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the linear compartment model true function — rxGetLin","text":"model ODE model specification.  can : string containing set ordinary differential equations (ODE) expressions defining changes dynamic system. file name ODE system equation contained ODE expression enclosed \\{\\} (see also filename argument). details, see sections “Details” rxode2 Syntax . linCmtSens method calculate linCmt() solutions verbose TRUE verbose linear compartmental model","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetLin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the linear compartment model true function — rxGetLin","text":"model linCmt() replaced linCmtA()","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetLin.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the linear compartment model true function — rxGetLin","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Get model properties without compiling it. — rxGetModel","title":"Get model properties without compiling it. — rxGetModel","text":"Get model properties without compiling .","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get model properties without compiling it. — rxGetModel","text":"","code":"rxGetModel(   model,   calcSens = NULL,   calcJac = NULL,   collapseModel = NULL,   indLin = FALSE )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get model properties without compiling it. — rxGetModel","text":"model rxode2 specification calcSens boolean indicating rxode2 calculate sensitivities according specified ODEs. calcJac boolean indicating rxode2 calculate Jacobain according specified ODEs. collapseModel boolean indicating rxode2 remove LHS variables calculating sensitivities. indLin Calculate inductive linearization matrices compile inductive linearization support.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get model properties without compiling it. — rxGetModel","text":"rxode2 trans list","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetModel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get model properties without compiling it. — rxGetModel","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetSeed.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the rxode2 seed — rxGetSeed","title":"Get the rxode2 seed — rxGetSeed","text":"Get rxode2 seed","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetSeed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the rxode2 seed — rxGetSeed","text":"","code":"rxGetSeed()"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetSeed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the rxode2 seed — rxGetSeed","text":"rxode2 seed state -1 seed set","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetSeed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the rxode2 seed — rxGetSeed","text":"","code":"# without setting seed  rxGetSeed() #> [1] -1 # Now set the seed rxSetSeed(42)  rxGetSeed() #> [1] 42  rxnorm() #> [1] 0.2229005  rxGetSeed() #> [1] 44  # don't use the rxode2 seed again  rxSetSeed(-1)  rxGetSeed() #> [1] -1  rxnorm() #> [1] -0.1991078  rxGetSeed() #> [1] -1"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetrxode2.html","id":null,"dir":"Reference","previous_headings":"","what":"Get rxode2 model from object — rxGetrxode2","title":"Get rxode2 model from object — rxGetrxode2","text":"Get rxode2 model object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetrxode2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get rxode2 model from object — rxGetrxode2","text":"","code":"rxGetrxode2(obj)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetrxode2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get rxode2 model from object — rxGetrxode2","text":"obj rxode2 family objects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxGetrxode2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get rxode2 model from object — rxGetrxode2","text":"rxode2 model","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxHtml.html","id":null,"dir":"Reference","previous_headings":"","what":"Format rxSolve and related objects as html. — rxHtml","title":"Format rxSolve and related objects as html. — rxHtml","text":"Format rxSolve related objects html.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxHtml.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format rxSolve and related objects as html. — rxHtml","text":"","code":"rxHtml(x, ...)  # S3 method for rxSolve rxHtml(x, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxHtml.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format rxSolve and related objects as html. — rxHtml","text":"x rxode2 object ... Extra arguments sent kable","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxHtml.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format rxSolve and related objects as html. — rxHtml","text":"html code rxSolve object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxHtml.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Format rxSolve and related objects as html. — rxHtml","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIndLinState.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the preferred factoring by state — rxIndLinState","title":"Set the preferred factoring by state — rxIndLinState","text":"Set preferred factoring state","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIndLinState.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the preferred factoring by state — rxIndLinState","text":"","code":"rxIndLinState(preferred = NULL)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIndLinState.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the preferred factoring by state — rxIndLinState","text":"preferred list state's preferred factorization","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIndLinState.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the preferred factoring by state — rxIndLinState","text":"Nothing","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIndLinState.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the preferred factoring by state — rxIndLinState","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIndLinStrategy.html","id":null,"dir":"Reference","previous_headings":"","what":"This sets the inductive linearization strategy for matrix building — rxIndLinStrategy","title":"This sets the inductive linearization strategy for matrix building — rxIndLinStrategy","text":"one state ODE separated specifies incorporated matrix exponential.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIndLinStrategy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This sets the inductive linearization strategy for matrix building — rxIndLinStrategy","text":"","code":"rxIndLinStrategy(strategy = c(\"curState\", \"split\"))"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIndLinStrategy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This sets the inductive linearization strategy for matrix building — rxIndLinStrategy","text":"strategy strategy inductive linearization matrix building curState Prefer parameterizing terms current state, followed first state observed term. split Split parameterization states term dividing number states term adding matrix term state.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIndLinStrategy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This sets the inductive linearization strategy for matrix building — rxIndLinStrategy","text":"Nothing","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIndLinStrategy.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This sets the inductive linearization strategy for matrix building — rxIndLinStrategy","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIndLin_.html","id":null,"dir":"Reference","previous_headings":"","what":"Inductive linearization solver — rxIndLin_","title":"Inductive linearization solver — rxIndLin_","text":"Inductive linearization solver","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIndLin_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inductive linearization solver — rxIndLin_","text":"cSub = Current subject number op rxode2 solving options tp Prior time point/time zeor yp Prior state;  vector size = neq; Final state updated tf Final Time InfusionRate = Rates comparment;  vector size = neq Indicator compartment \"\" cache 0 = Cache doIndLin == 0, cache > 0 = nInf-1 rxode2 matrix exponential function IndF rxode2 Inductive Linearization function F","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIndLin_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inductive linearization solver — rxIndLin_","text":"Returns status solving 1 = Successful solve -1 = Maximum number iterations reached inductive linearization","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxInits.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial Values and State values for a rxode2 object — rxInits","title":"Initial Values and State values for a rxode2 object — rxInits","text":"Returns initial values rxDll object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxInits.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial Values and State values for a rxode2 object — rxInits","text":"","code":"rxInits(   obj,   vec = NULL,   req = NULL,   defaultValue = 0,   noerror = FALSE,   noini = FALSE,   rxLines = FALSE )  rxInit(   obj,   vec = NULL,   req = NULL,   defaultValue = 0,   noerror = FALSE,   noini = FALSE,   rxLines = FALSE )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxInits.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial Values and State values for a rxode2 object — rxInits","text":"obj rxDll, rxode2, named vector representing default initial arguments vec supplied, named vector model. req Required names, required order ODE solver defaultValue number NA representing default value parameters missing vec, required req. noerror boolean specifying error thrown missing parameter values default = NA","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxInits.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial Values and State values for a rxode2 object — rxInits","text":"Initial values rxDll object","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/rxInits.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Initial Values and State values for a rxode2 object — rxInits","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxInv.html","id":null,"dir":"Reference","previous_headings":"","what":"Invert matrix using RcppArmadillo. — rxInv","title":"Invert matrix using RcppArmadillo. — rxInv","text":"Invert matrix using RcppArmadillo.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxInv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Invert matrix using RcppArmadillo. — rxInv","text":"","code":"rxInv(matrix)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxInv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Invert matrix using RcppArmadillo. — rxInv","text":"matrix matrix inverted.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxInv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Invert matrix using RcppArmadillo. — rxInv","text":"inverse pseudo inverse matrix.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIs.html","id":null,"dir":"Reference","previous_headings":"","what":"Check the type of an object using Rcpp — rxIs","title":"Check the type of an object using Rcpp — rxIs","text":"Check type object using Rcpp","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check the type of an object using Rcpp — rxIs","text":"","code":"rxIs(obj, cls)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check the type of an object using Rcpp — rxIs","text":"obj Object check cls Type class.  s3 classes lists/environments primitive classes checked. matrix types distinguished numeric.matrix, integer.matrix, logical.matrix, character.matrix well traditional matrix class. Additionally checks event.data.frame data.frame object time,  evid amt. (UPPER, lower Title cases accepted)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check the type of an object using Rcpp — rxIs","text":"boolean indicating object member class.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Check the type of an object using Rcpp — rxIs","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIsCurrent.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks if the rxode2 object was built with the current build — rxIsCurrent","title":"Checks if the rxode2 object was built with the current build — rxIsCurrent","text":"Checks rxode2 object built current build","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIsCurrent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks if the rxode2 object was built with the current build — rxIsCurrent","text":"","code":"rxIsCurrent(obj)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIsCurrent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks if the rxode2 object was built with the current build — rxIsCurrent","text":"obj rxode2 family objects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIsCurrent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks if the rxode2 object was built with the current build — rxIsCurrent","text":"boolean indicating built current rxode2","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIsLoaded.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine if the DLL associated with the rxode2 object is loaded — rxIsLoaded","title":"Determine if the DLL associated with the rxode2 object is loaded — rxIsLoaded","text":"Determine DLL associated rxode2 object loaded","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIsLoaded.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine if the DLL associated with the rxode2 object is loaded — rxIsLoaded","text":"","code":"rxIsLoaded(obj)  rxDllLoaded(obj)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIsLoaded.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine if the DLL associated with the rxode2 object is loaded — rxIsLoaded","text":"obj rxode2 family objects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIsLoaded.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine if the DLL associated with the rxode2 object is loaded — rxIsLoaded","text":"Boolean returning rxode2 library loaded.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxIsLoaded.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Determine if the DLL associated with the rxode2 object is loaded — rxIsLoaded","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxLhs.html","id":null,"dir":"Reference","previous_headings":"","what":"Left handed Variables — rxLhs","title":"Left handed Variables — rxLhs","text":"returns model calculated variables","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxLhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Left handed Variables — rxLhs","text":"","code":"rxLhs(obj)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxLhs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Left handed Variables — rxLhs","text":"obj rxode2 family objects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxLhs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Left handed Variables — rxLhs","text":"character vector listing calculated parameters","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/rxLhs.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Left handed Variables — rxLhs","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxLock.html","id":null,"dir":"Reference","previous_headings":"","what":"Lock/unlocking of rxode2 dll file — rxLock","title":"Lock/unlocking of rxode2 dll file — rxLock","text":"Lock/unlocking rxode2 dll file","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxLock.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lock/unlocking of rxode2 dll file — rxLock","text":"","code":"rxLock(obj)  rxUnlock(obj)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxLock.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lock/unlocking of rxode2 dll file — rxLock","text":"obj rxode2 family objects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxLock.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lock/unlocking of rxode2 dll file — rxLock","text":"nothing; called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxMd5.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the md5 of an rxode2 object or file — rxMd5","title":"Return the md5 of an rxode2 object or file — rxMd5","text":"md5 based model possibly extra c code supplied model.  addition md5 based syntax options, compiled rxode2 library md5, rxode2 version/repository.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxMd5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the md5 of an rxode2 object or file — rxMd5","text":"","code":"rxMd5(model, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxMd5.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the md5 of an rxode2 object or file — rxMd5","text":"model ODE model specification.  can : string containing set ordinary differential equations (ODE) expressions defining changes dynamic system. file name ODE system equation contained ODE expression enclosed \\{\\} (see also filename argument). details, see sections “Details” rxode2 Syntax . ... ignored arguments","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxMd5.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the md5 of an rxode2 object or file — rxMd5","text":"rxode2 object, return named list: file_md5 model's file's md5 parsed_md5  parsed model's file's md5. Otherwise return md5 based arguments provided","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxMd5.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Return the md5 of an rxode2 object or file — rxMd5","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxModelVars.html","id":null,"dir":"Reference","previous_headings":"","what":"All model variables for a rxode2 object — rxModelVars","title":"All model variables for a rxode2 object — rxModelVars","text":"Return known model variables specified rxode2 object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxModelVars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"All model variables for a rxode2 object — rxModelVars","text":"","code":"rxModelVars(obj)  rxModelVarsS3(obj)  # S3 method for default rxModelVarsS3(obj)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxModelVars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"All model variables for a rxode2 object — rxModelVars","text":"obj rxode2 family objects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxModelVars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"All model variables for a rxode2 object — rxModelVars","text":"list rxode2 model properties including: params character vector names model parameters lhs character vector names model calculated parameters state character vector compartments rxode2 object trans named vector translated model properties including type jacobian specified, C function prefixes, well C functions names called compiled model. md5a named vector gives digest model (file_md5) parsed model (parsed_md5) model named vector giving input model (model), normalized model (comments standard syntax parsing, normModel), interim code used generate final C file parseModel","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxModelVars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"All model variables for a rxode2 object — rxModelVars","text":"items calculated compilation; built-rxode2 compiled DLL. allow extensible s3 hook added function rxModelVarsS3","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/rxModelVars.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"All model variables for a rxode2 object — rxModelVars","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxModels_.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the rxModels  information — rxModels_","title":"Get the rxModels  information — rxModels_","text":"Get rxModels  information","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxModels_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the rxModels  information — rxModels_","text":"","code":"rxModels_(env = TRUE)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxModels_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the rxModels  information — rxModels_","text":"env boolean returns environment models stored (TRUE), currently assigned rxode2 model variables (FALSE).","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxModels_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the rxModels  information — rxModels_","text":"internal rxModels information environment","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxNorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the normalized model — rxNorm","title":"Get the normalized model — rxNorm","text":"get syntax preferred model processing","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxNorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the normalized model — rxNorm","text":"","code":"rxNorm(obj, condition = NULL, removeInis, removeJac, removeSens)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxNorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the normalized model — rxNorm","text":"obj rxode2 family objects condition Character string logical condition use subsetting normalized model.  missing, condition set via rxCondition, return whole code conditional settings intact.  condition set rxCondition, use condition. removeInis boolean indicating parameter initialization removed model removeJac boolean indicating Jacobians removed. removeSens boolean indicating sensitivities removed.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxNorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the normalized model — rxNorm","text":"Normalized Normal syntax (comments)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxNorm.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get the normalized model — rxNorm","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxOptExpr.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize rxode2 for computer evaluation — rxOptExpr","title":"Optimize rxode2 for computer evaluation — rxOptExpr","text":"optimizes rxode2 code computer evaluation calculating redundant expressions .","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxOptExpr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize rxode2 for computer evaluation — rxOptExpr","text":"","code":"rxOptExpr(x, msg = \"model\")"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxOptExpr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize rxode2 for computer evaluation — rxOptExpr","text":"x rxode2 model can accessed rxNorm msg name type object rxode2 optimizing message optimizing.  example \"model\" produce following message optimizing model: finding duplicate expressions model...","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxOptExpr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimize rxode2 for computer evaluation — rxOptExpr","text":"Optimized rxode2 model text.  order type lhs state variables maintained evaluation sped . parameters names maintained, order may modified.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxOptExpr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Optimize rxode2 for computer evaluation — rxOptExpr","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameters specified by the model — rxParams","title":"Parameters specified by the model — rxParams","text":"returns model's parameters required solve ODE system, can used pipe parameters rxode2 solve","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameters specified by the model — rxParams","text":"","code":"rxParams(obj, ...)  # S3 method for rxode2 rxParams(   obj,   constants = TRUE,   ...,   params = NULL,   inits = NULL,   iCov = NULL,   keep = NULL,   thetaMat = NULL,   omega = NULL,   dfSub = NULL,   sigma = NULL,   dfObs = NULL,   nSub = NULL,   nStud = NULL )  # S3 method for rxSolve rxParams(   obj,   constants = TRUE,   ...,   params = NULL,   inits = NULL,   iCov = NULL,   keep = NULL,   thetaMat = NULL,   omega = NULL,   dfSub = NULL,   sigma = NULL,   dfObs = NULL,   nSub = NULL,   nStud = NULL )  # S3 method for rxEt rxParams(   obj,   ...,   params = NULL,   inits = NULL,   iCov = NULL,   keep = NULL,   thetaMat = NULL,   omega = NULL,   dfSub = NULL,   sigma = NULL,   dfObs = NULL,   nSub = NULL,   nStud = NULL )  rxParam(obj, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameters specified by the model — rxParams","text":"obj rxode2 family objects ... arguments including scaling factors compartment.  includes S# = numeric scale compartment # dividing compartment amount scale factor, like NONMEM. constants boolean indicting constants included list parameters. Currently rxode2 parses constants variables case wish change without recompiling rxode2 model. params numeric named vector values every parameter ODE system; names must correspond parameter identifiers used ODE specification; inits vector initial values state variables (e.g., amounts compartment), order vector must state variables (e.g., PK/PD compartments); iCov data frame individual non-time varying covariates combine events dataset merge. keep Columns keep either input dataset iCov dataset.  iCov dataset, column kept per line.  input dataset, records added data LOCF (Last Observation Carried forward) imputation performed. thetaMat Named theta matrix. omega Estimate Covariance matrix. omega list, assume block matrix convert full matrix simulations.  omega NA using rxode2 ui model, subject variability described omega matrix set zero. dfSub Degrees freedom sample subject variability matrix inverse Wishart distribution (scaled) scaled inverse chi squared distribution. sigma Named sigma covariance Cholesky decomposition covariance matrix.  names columns indicate parameters simulated.  simulated every observation solved system. sigma NA using rxode2 ui model, unexplained variability described sigma matrix set zero. dfObs Degrees freedom sample unexplained variability matrix inverse Wishart distribution (scaled) scaled inverse chi squared distribution. nSub Number subject variabilities (ETAs) simulated every realization parameters. nStud Number virtual studies characterize uncertainty estimated parameters.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameters specified by the model — rxParams","text":"extracting parameters rxode2 model, character vector listing parameters model.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParams.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parameters specified by the model — rxParams","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParseErr.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Error function for inclusion in rxode2 — rxParseErr","title":"Prepare Error function for inclusion in rxode2 — rxParseErr","text":"Prepare Error function inclusion rxode2","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParseErr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Error function for inclusion in rxode2 — rxParseErr","text":"","code":"rxParseErr(   x,   baseTheta,   ret = \"rx_r_\",   init = NULL,   addProp = c(\"combined2\", \"combined1\") )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParseErr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Error function for inclusion in rxode2 — rxParseErr","text":"x error function baseTheta Base theta start numbering add(.) prop(.) . ret Internal return type.  changed user... init Initialization vector","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParseErr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Error function for inclusion in rxode2 — rxParseErr","text":"rxode2 transformed text","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParseErr.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prepare Error function for inclusion in rxode2 — rxParseErr","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParsePk.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse PK function for inclusion in rxode2 — rxParsePk","title":"Parse PK function for inclusion in rxode2 — rxParsePk","text":"Parse PK function inclusion rxode2","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParsePk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse PK function for inclusion in rxode2 — rxParsePk","text":"","code":"rxParsePk(x, init = NULL)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParsePk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse PK function for inclusion in rxode2 — rxParsePk","text":"x PK function init Initialization vector","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParsePk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse PK function for inclusion in rxode2 — rxParsePk","text":"rxode2 transformed text.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParsePk.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Parse PK function for inclusion in rxode2 — rxParsePk","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParsePred.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare Pred function for inclusion in rxode2 — rxParsePred","title":"Prepare Pred function for inclusion in rxode2 — rxParsePred","text":"Prepare Pred function inclusion rxode2","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParsePred.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare Pred function for inclusion in rxode2 — rxParsePred","text":"","code":"rxParsePred(x, init = NULL, err = NULL, addProp = c(\"combined2\", \"combined1\"))"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParsePred.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare Pred function for inclusion in rxode2 — rxParsePred","text":"x pred function init Initialization vector","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParsePred.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare Pred function for inclusion in rxode2 — rxParsePred","text":"rxode2 transformed text.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxParsePred.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prepare Pred function for inclusion in rxode2 — rxParsePred","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPhysicalDrives.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a list of physical drives that have been or currently are\nmounted to the computer. — rxPhysicalDrives","title":"Returns a list of physical drives that have been or currently are\nmounted to the computer. — rxPhysicalDrives","text":"excludes network drives.  See https://www.forensicmag.com/article/2012/06/windows-7-registry-forensics-part-5","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPhysicalDrives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a list of physical drives that have been or currently are\nmounted to the computer. — rxPhysicalDrives","text":"","code":"rxPhysicalDrives(duplicates = FALSE)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPhysicalDrives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns a list of physical drives that have been or currently are\nmounted to the computer. — rxPhysicalDrives","text":"duplicates Return drives duplicate entries SYSTEM\\\\MountedDevices; likely removable media.  default FALSE","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPhysicalDrives.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a list of physical drives that have been or currently are\nmounted to the computer. — rxPhysicalDrives","text":"Drives letters","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPhysicalDrives.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Returns a list of physical drives that have been or currently are\nmounted to the computer. — rxPhysicalDrives","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPkg.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a package from compiled rxode2 models — rxPkg","title":"Creates a package from compiled rxode2 models — rxPkg","text":"Creates package compiled rxode2 models","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPkg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a package from compiled rxode2 models — rxPkg","text":"","code":"rxPkg(   ...,   package,   wd = getwd(),   action = c(\"install\", \"build\", \"binary\", \"create\"),   license = c(\"gpl3\", \"lgpl\", \"mit\", \"agpl3\"),   name = \"Firstname Lastname\",   fields = list() )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPkg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a package from compiled rxode2 models — rxPkg","text":"... Models build package package String package name create wd character string working directory create subdirectory according modName. specified, subdirectory named “modName.d” created populated C file, dynamic loading library, plus various working files. missing, files created (removed) temporary directory, rxode2 DLL model created current directory named rx_????_platform, example rx_129f8f97fb94a87ca49ca8dafe691e1e_i386.dll action Type action take package created license type license package. name Full name author fields named list fields add DESCRIPTION, potentially overriding default values. See use_description() can set personalized defaults using package options.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPkg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a package from compiled rxode2 models — rxPkg","text":"function returns nothing used side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPkg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates a package from compiled rxode2 models — rxPkg","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a from a Poisson process — rxPp","title":"Simulate a from a Poisson process — rxPp","text":"Simulate Poisson process","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a from a Poisson process — rxPp","text":"","code":"rxPp(   n,   lambda,   gamma = 1,   prob = NULL,   t0 = 0,   tmax = Inf,   randomOrder = FALSE )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a from a Poisson process — rxPp","text":"n Number time points simulate Poisson process lambda Rate Poisson process gamma Asymmetry rate Poisson process.  gamma=1.0, simulates homogenous Poisson process.  gamma<1.0, Poisson process events early, gamma > 1.0, Poisson process events late process. gamma non-zero, tmax infinite indicate end Poisson process simulated.  pharamcometric cases, end study. Internally uses rate : l(t) = lambdagamma(t/tmax)^(gamma-1) prob specified, probability function one argument, time, gives probability Poisson time t accepted rejection time. t0 starting time Poisson process tmax maximum time Poisson process randomOrder TRUE randomize order Poisson events.  default (FALSE) returns Poisson process order events occurred.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a from a Poisson process — rxPp","text":"returns vector Poisson process times; dropout >= tmax, rest times = tmax indicate dropout equal tmax.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPp.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate a from a Poisson process — rxPp","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a from a Poisson process — rxPp","text":"","code":"## Sample homogenous Poisson process of rate 1/10 rxPp(10, 1 / 10) #>  [1]  22.52244  32.52278  35.67854  40.13887  42.27229  43.42258  59.96902 #>  [8]  83.65568 106.89140 114.00779  ## Sample inhomogenous Poisson rate of 1/10  rxPp(10, 1 / 10, gamma = 2, tmax = 100) #>  [1]   5.776723  14.314296  23.810958  60.695604  86.741636  87.245363 #>  [7]  93.626805 100.000000 100.000000 100.000000  ## Typically the Poisson process times are in a sequential order, ## using randomOrder gives the Poisson process in random order  rxPp(10, 1 / 10, gamma = 2, tmax = 10, randomOrder = TRUE) #>  [1] 10 10 10 10 10 10 10 10 10 10  ## This uses an arbitrary function to sample a non-homogenous Poisson process  rxPp(10, 1 / 10, prob = function(x) {   1 / x }) #>  [1]   1.857834  55.443178 109.272974 124.328784 255.434906 271.852250 #>  [7] 386.936304 511.998214 544.051434 565.722050"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPreferredDistributionName.html","id":null,"dir":"Reference","previous_headings":"","what":"Change distribution name to the preferred distribution name term — rxPreferredDistributionName","title":"Change distribution name to the preferred distribution name term — rxPreferredDistributionName","text":"determined internal preferred condition name list .errIdenticalDists","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPreferredDistributionName.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Change distribution name to the preferred distribution name term — rxPreferredDistributionName","text":"","code":"rxPreferredDistributionName(dist)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPreferredDistributionName.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Change distribution name to the preferred distribution name term — rxPreferredDistributionName","text":"dist input distribution","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPreferredDistributionName.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Change distribution name to the preferred distribution name term — rxPreferredDistributionName","text":"Preferred distribution term","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPreferredDistributionName.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Change distribution name to the preferred distribution name term — rxPreferredDistributionName","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPreferredDistributionName.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Change distribution name to the preferred distribution name term — rxPreferredDistributionName","text":"","code":"rxPreferredDistributionName(\"dnorm\") #> [1] \"add\"  rxPreferredDistributionName(\"add\") #> [1] \"add\"  # can be vectorized  rxPreferredDistributionName(c(\"add\",\"dnorm\")) #>   add dnorm  #> \"add\" \"add\""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxProgress.html","id":null,"dir":"Reference","previous_headings":"","what":"rxode2 progress bar functions — rxProgress","title":"rxode2 progress bar functions — rxProgress","text":"rxProgress sets progress bar","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxProgress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rxode2 progress bar functions — rxProgress","text":"","code":"rxProgress(num, core = 0L)  rxTick()  rxProgressStop(clear = TRUE)  rxProgressAbort(error = \"Aborted calculation\")"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxProgress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rxode2 progress bar functions — rxProgress","text":"num Tot number operations track core Number cores show.  1, show number cores clear Boolean telling clear progress bar completion (displayed).  default TRUE error rxProgressAbort error displayed","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxProgress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rxode2 progress bar functions — rxProgress","text":"return NULL invisibly.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxProgress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"rxode2 progress bar functions — rxProgress","text":"rxTick progress bar tick rxProgressStop stop progress bar rxProgressAbort shows abort rxProgressStop called.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxProgress.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rxode2 progress bar functions — rxProgress","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxProgress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rxode2 progress bar functions — rxProgress","text":"","code":"f <- function() {   on.exit({     rxProgressAbort()   })   rxProgress(100)   for (i in 1:100) {     rxTick()     Sys.sleep(1 / 100)   }   rxProgressStop() } # \\donttest{ f() # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPrune.html","id":null,"dir":"Reference","previous_headings":"","what":"Prune branches (ie if/else) from rxode2 — rxPrune","title":"Prune branches (ie if/else) from rxode2 — rxPrune","text":"prunes branches (ie /else) rxode2.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPrune.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prune branches (ie if/else) from rxode2 — rxPrune","text":"","code":"rxPrune(x)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPrune.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prune branches (ie if/else) from rxode2 — rxPrune","text":"x rxode2 model can accessed rxNorm","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPrune.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prune branches (ie if/else) from rxode2 — rxPrune","text":"Pruned rxode2 model text.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxPrune.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prune branches (ie if/else) from rxode2 — rxPrune","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRandNV.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a random ","title":"Create a random ","text":"Create random \"normal\" matrix using vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRandNV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a random ","text":"","code":"rxRandNV(nrow = 1, ncol = 1)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRandNV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a random ","text":"nrow Number rows ncol Number Columns","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRandNV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a random ","text":"Matrix random numbers","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRandNV.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a random ","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRandNV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a random ","text":"","code":"rxRandNV(1, 1) #>          [,1] #> [1,] 0.217181 rxRandNV(3, 2) #>             [,1]      [,2] #> [1,] -0.02177107 0.4355001 #> [2,] -0.90179624 0.7449868 #> [3,] -0.40597312 0.9581341"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRateDur.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a rxRateDur object — rxRateDur","title":"Creates a rxRateDur object — rxRateDur","text":"primarily display information rate","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRateDur.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a rxRateDur object — rxRateDur","text":"","code":"rxRateDur(x)  # S3 method for rxRateDur [(x, ...)  as.rxRateDur(x)  # S3 method for rxRateDur as.character(x, ...)  # S3 method for rxRateDur [[(x, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRateDur.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a rxRateDur object — rxRateDur","text":"x rxRateDur data ... parameters","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRateDur.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a rxRateDur object — rxRateDur","text":"rxRateDur object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxReload.html","id":null,"dir":"Reference","previous_headings":"","what":"Reload rxode2 DLL — rxReload","title":"Reload rxode2 DLL — rxReload","text":"Can useful debugging","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxReload.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reload rxode2 DLL — rxReload","text":"","code":"rxReload()"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxReload.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reload rxode2 DLL — rxReload","text":"boolean object reloaded","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxReload.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Reload rxode2 DLL — rxReload","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRemoveControl.html","id":null,"dir":"Reference","previous_headings":"","what":"rxRemoveControl options for UI object — rxRemoveControl","title":"rxRemoveControl options for UI object — rxRemoveControl","text":"rxRemoveControl options UI object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRemoveControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rxRemoveControl options for UI object — rxRemoveControl","text":"","code":"rxRemoveControl(ui)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRemoveControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rxRemoveControl options for UI object — rxRemoveControl","text":"ui rxode2 ui object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRemoveControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rxRemoveControl options for UI object — rxRemoveControl","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRemoveControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rxRemoveControl options for UI object — rxRemoveControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename items inside of a rxode2 ui model — rxRename","title":"Rename items inside of a rxode2 ui model — rxRename","text":"rxRename() changes names individual variables, lhs, ode states using new_name = old_name syntax","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename items inside of a rxode2 ui model — rxRename","text":"","code":"rxRename(.data, ..., envir = parent.frame())  rename.rxUi(.data, ...)  rename.function(.data, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename items inside of a rxode2 ui model — rxRename","text":".data rxode2 ui function, named data consistent dplyr::rename() ... rename items envir Environment evaluation","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename items inside of a rxode2 ui model — rxRename","text":"New model items renamed","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRename.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rename items inside of a rxode2 ui model — rxRename","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename items inside of a rxode2 ui model — rxRename","text":"","code":"ocmt <- function() {    ini({      tka <- exp(0.45) # Ka      tcl <- exp(1) # Cl      ## This works with interactive models      ## You may also label the preceding line with label(\"label text\")      tv <- exp(3.45) # log V      ## the label(\"Label name\") works with all models      add.sd <- 0.7    })    model({      ka <- tka      cl <- tcl      v <- tv      d/dt(depot) = -ka * depot      d/dt(center) = ka * depot - cl / v * center      cp = center / v      cp ~ add(add.sd)    }) }  ocmt %>% rxRename(cpParent=cp) #>   #> ℹ parameter labels from comments will be replaced by 'label()' #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>       tka       tcl        tv    add.sd  #>  1.568312  2.718282 31.500392  0.700000  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         tka <- 1.56831218549017 #>         label(\"Ka\") #>         tcl <- 2.71828182845905 #>         label(\"Cl\") #>         tv <- 31.5003923087479 #>         label(\"log V\") #>         add.sd <- c(0, 0.7) #>     }) #>     model({ #>         ka <- tka #>         cl <- tcl #>         v <- tv #>         d/dt(depot) = -ka * depot #>         d/dt(center) = ka * depot - cl/v * center #>         cpParent = center/v #>         cpParent ~ add(add.sd) #>     }) #> }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRepR0_.html","id":null,"dir":"Reference","previous_headings":"","what":"Rep R0 for foce — rxRepR0_","title":"Rep R0 for foce — rxRepR0_","text":"Rep R0 foce","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRepR0_.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rep R0 for foce — rxRepR0_","text":"","code":"rxRepR0_(neta)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRepR0_.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rep R0 for foce — rxRepR0_","text":"number ETA substitute","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRepR0_.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rep R0 for foce — rxRepR0_","text":"Returns string R code substitute rx_r expression symengine environment .s","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxReq.html","id":null,"dir":"Reference","previous_headings":"","what":"Require namespace, otherwise throw error. — rxReq","title":"Require namespace, otherwise throw error. — rxReq","text":"Require namespace, otherwise throw error.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxReq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Require namespace, otherwise throw error. — rxReq","text":"","code":"rxReq(pkg)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxReq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Require namespace, otherwise throw error. — rxReq","text":"pkg Package required function work.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxReq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Require namespace, otherwise throw error. — rxReq","text":"Nothing","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxReq.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Require namespace, otherwise throw error. — rxReq","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxReservedKeywords.html","id":null,"dir":"Reference","previous_headings":"","what":"A list and description of Rode supported reserved keywords — rxReservedKeywords","title":"A list and description of Rode supported reserved keywords — rxReservedKeywords","text":"list description Rode supported reserved keywords","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxReservedKeywords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list and description of Rode supported reserved keywords — rxReservedKeywords","text":"","code":"rxReservedKeywords"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxReservedKeywords.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list and description of Rode supported reserved keywords — rxReservedKeywords","text":"data frame 3 columns 98 rows Reserved Name Reserved Keyword Name Meaning Reserved Keyword Meaning Alias Keyword Alias","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRmvn.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate from a (truncated) multivariate normal — rxRmvn","title":"Simulate from a (truncated) multivariate normal — rxRmvn","text":"simulated fast, thread-safe threefry simulator can use multiple cores generate random deviates.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRmvn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate from a (truncated) multivariate normal — rxRmvn","text":"","code":"rxRmvn(   n,   mu = NULL,   sigma,   lower = -Inf,   upper = Inf,   ncores = 1,   isChol = FALSE,   keepNames = TRUE,   a = 0.4,   tol = 2.05,   nlTol = 1e-10,   nlMaxiter = 100L )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRmvn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate from a (truncated) multivariate normal — rxRmvn","text":"n Number random row vectors simulated matrix use simulation (faster). mu mean vector sigma Covariance matrix multivariate normal list covariance matrices. list covariance matrix, matrix simulate n matrices combine full matrix lower vector lower bound truncated multivariate norm upper vector upper bound truncated multivariate norm ncores Number cores used simulation isChol boolean indicating sigma cholesky decomposition covariance matrix. keepNames Keep names either mean covariance matrix. threshold switching methods; can tuned maximum speed;  three cases considered: case 1: < l < u case 2: l < u < -case 3: otherwise l=lower u = upper tol case 3 used possibilities, tol value controls acceptance rejection inverse-transformation; abs(u-l)>tol, uses accept-reject randn nlTol Tolerance newton line-search nlMaxiter Maximum iterations newton line-search","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRmvn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate from a (truncated) multivariate normal — rxRmvn","text":"n==integer (default) output (n x d) matrix -th row -th simulated vector. .matrix(n) random vector store n, provided user, function returns NULL invisibly.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRmvn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate from a (truncated) multivariate normal — rxRmvn","text":"John K. Salmon, Mark . Moraes, Ron O. Dror, David E. Shaw (2011). Parallel Random Numbers: Easy 1, 2, 3. D. E. Shaw Research, New York, NY 10036, USA. thread safe multivariate normal inspired mvnfast package Matteo Fasiolo https://CRAN.R-project.org/package=mvnfast concept truncated multivariate normal taken Zdravko Botev Botev (2017) doi:10.1111/rssb.12162  Botev L'Ecuyer (2015) doi:10.1109/WSC.2015.7408180  converted thread safe simulation;","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRmvn.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate from a (truncated) multivariate normal — rxRmvn","text":"Matthew Fidler, Zdravko Botev Matteo Fasiolo","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxRmvn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate from a (truncated) multivariate normal — rxRmvn","text":"","code":"## From mvnfast ## Unlike mvnfast, uses threefry simulation  d <- 5 mu <- 1:d  # Creating covariance matrix tmp <- matrix(rnorm(d^2), d, d) mcov <- tcrossprod(tmp, tmp)   set.seed(414) rxRmvn(4, 1:d, mcov) #>             [,1]      [,2]      [,3]      [,4]     [,5] #> [1,]  0.44551640  1.135299 4.1930872 5.3342689 3.294011 #> [2,] -0.07398444 -1.636221 0.4627023 0.5493825 4.363167 #> [3,]  4.03533473 -1.139955 1.6960875 3.4654586 6.553250 #> [4,] -0.14596643  3.120244 1.4508551 1.2927681 5.818908  set.seed(414) rxRmvn(4, 1:d, mcov) #>             [,1]      [,2]      [,3]      [,4]     [,5] #> [1,]  0.44551640  1.135299 4.1930872 5.3342689 3.294011 #> [2,] -0.07398444 -1.636221 0.4627023 0.5493825 4.363167 #> [3,]  4.03533473 -1.139955 1.6960875 3.4654586 6.553250 #> [4,] -0.14596643  3.120244 1.4508551 1.2927681 5.818908  set.seed(414) rxRmvn(4, 1:d, mcov, ncores = 2) # r.v. generated on the second core are different #>             [,1]      [,2]       [,3]      [,4]     [,5] #> [1,]  0.44551640 5.4982942  3.3790994 2.1528232 4.125642 #> [2,]  0.08902736 2.6807564  3.8555336 3.9941609 3.851401 #> [3,] -0.07398444 0.2691971 -0.5120344 0.1186391 6.680531 #> [4,]  1.45423479 2.0331871  2.2334239 2.1622739 4.851160  ###### Here we create the matrix that will hold the simulated #  random variables upfront. A <- matrix(NA, 4, d) class(A) <- \"numeric\" # This is important. We need the elements of A to be of class \"numeric\".  set.seed(414) rxRmvn(A, 1:d, mcov, ncores = 2) # This returns NULL ... A # ... but the result is here #>             [,1]      [,2]       [,3]      [,4]     [,5] #> [1,]  0.44551640 5.4982942  3.3790994 2.1528232 4.125642 #> [2,]  0.08902736 2.6807564  3.8555336 3.9941609 3.851401 #> [3,] -0.07398444 0.2691971 -0.5120344 0.1186391 6.680531 #> [4,]  1.45423479 2.0331871  2.2334239 2.1622739 4.851160  ## You can also simulate from a truncated normal:  rxRmvn(10, 1:d, mcov, lower = 1:d - 1, upper = 1:d + 1) #>            [,1]     [,2]     [,3]     [,4]     [,5] #>  [1,] 1.3653338 1.913500 2.884704 4.638532 4.970611 #>  [2,] 0.2552094 1.829579 2.804913 4.462161 5.188182 #>  [3,] 1.1799136 2.349490 3.155009 4.984464 4.397339 #>  [4,] 1.1431108 2.364839 2.743327 4.907312 4.580010 #>  [5,] 0.8902283 2.002904 3.183637 3.298237 5.390240 #>  [6,] 1.2708036 2.143880 3.167478 4.401943 4.566324 #>  [7,] 0.8913711 1.983748 2.772283 4.462135 5.133781 #>  [8,] 1.7430533 1.608873 2.990598 3.182227 5.089337 #>  [9,] 1.6952039 1.876700 2.842330 4.519336 4.667154 #> [10,] 0.1794205 2.316141 2.990005 4.659106 5.336159   # You can also simulate from different matrices (if they match # dimensions) by using a list of matrices.  matL <- lapply(1:4, function(...) {   tmp <- matrix(rnorm(d^2), d, d)   tcrossprod(tmp, tmp) })   rxRmvn(4, setNames(1:d, paste0(\"a\", 1:d)), matL) #>               a1         a2         a3       a4       a5 #>  [1,]  2.1027689 -3.1277802 -1.7058664 3.877449 6.160238 #>  [2,] -0.1528749  0.3372425  1.4079033 3.204818 6.771887 #>  [3,] -1.6178920  2.4185331  4.2854089 4.204923 6.115151 #>  [4,]  5.2850177  6.0162640  1.1522397 6.009218 8.423744 #>  [5,] -0.8389005  1.8108360  3.9390837 2.635257 3.078044 #>  [6,]  2.4044119  0.2584573  2.4396218 4.687467 7.747550 #>  [7,]  7.2635180  5.5533803 -0.2744354 9.627871 4.788654 #>  [8,] -0.3358839 -1.7501935  4.1309667 2.961912 6.318101 #>  [9,]  3.4028706  1.1584222  4.5627803 3.408984 3.627014 #> [10,]  3.4927361 -1.5055971  1.0890217 2.867575 4.036955 #> [11,]  2.2089477 -1.0108105 -0.6234824 1.745858 4.178149 #> [12,]  1.9045759 -3.5353019  3.6738287 3.085417 2.755276 #> [13,] -1.0910176  1.6896066 -0.1344867 5.810620 3.303876 #> [14,]  0.7032309  2.5654064  2.7642640 3.706315 5.057585 #> [15,] -3.4067706  2.3051387  4.4260234 6.692458 8.170364 #> [16,] -3.7727314  4.2737997 -0.8379328 6.990844 1.255809"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxS.html","id":null,"dir":"Reference","previous_headings":"","what":"Load a model into a symengine environment — rxS","title":"Load a model into a symengine environment — rxS","text":"Load model symengine environment","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxS.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load a model into a symengine environment — rxS","text":"","code":"rxS(x, doConst = TRUE, promoteLinSens = FALSE)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxS.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load a model into a symengine environment — rxS","text":"x rxode2 object doConst Load constants environment well. promoteLinSens Promote solved linear compartment systems sensitivity-based solutions.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxS.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load a model into a symengine environment — rxS","text":"rxode2/symengine environment","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxS.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Load a model into a symengine environment — rxS","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetControl.html","id":null,"dir":"Reference","previous_headings":"","what":"rxSetControl options for UI object — rxSetControl","title":"rxSetControl options for UI object — rxSetControl","text":"rxSetControl options UI object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rxSetControl options for UI object — rxSetControl","text":"","code":"rxSetControl(ui, control)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rxSetControl options for UI object — rxSetControl","text":"ui rxode2 ui object control Default value","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetControl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rxSetControl options for UI object — rxSetControl","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetControl.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rxSetControl options for UI object — rxSetControl","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetCovariateNamesForPiping.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign covariates for piping — rxSetCovariateNamesForPiping","title":"Assign covariates for piping — rxSetCovariateNamesForPiping","text":"Assign covariates piping","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetCovariateNamesForPiping.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign covariates for piping — rxSetCovariateNamesForPiping","text":"","code":"rxSetCovariateNamesForPiping(covariates = NULL)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetCovariateNamesForPiping.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign covariates for piping — rxSetCovariateNamesForPiping","text":"covariates NULL (covariates), list covariates. nlmixr uses function set covariates pipe nlmixr fit.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetCovariateNamesForPiping.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign covariates for piping — rxSetCovariateNamesForPiping","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetCovariateNamesForPiping.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Assign covariates for piping — rxSetCovariateNamesForPiping","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetCovariateNamesForPiping.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign covariates for piping — rxSetCovariateNamesForPiping","text":"","code":"# First set the name of known covariates # Note this is case sensitive  rxSetCovariateNamesForPiping(c(\"WT\",\"HT\", \"TC\"))  one.compartment <- function() {  ini({    tka <- 0.45 ; label(\"Log Ka\")    tcl <- 1 ; label(\"Log Cl\")    tv <- 3.45 ; label(\"Log V\")    eta.ka ~ 0.6    eta.cl ~ 0.3    eta.v ~ 0.1    add.err <- 0.7  })  model({    ka <- exp(tka + eta.ka)    cl <- exp(tcl + eta.cl)    v <- exp(tv + eta.v)    d / dt(depot) <- -ka * depot    d/dt(depot) <- -ka * depot    d / dt(center) <- ka * depot - cl / v * center    cp <- center / v    cp ~ add(add.err)  }) }  # now TC is detected as a covariate instead of a population parameter  one.compartment %>%   model({ka <- exp(tka + eta.ka + TC * cov_C)}) #>   #> ℹ add covariate `TC` (known covariate) #> ℹ add population parameter `cov_C` and set estimate to 1 #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>     tka     tcl      tv add.err   cov_C  #>    0.45    1.00    3.45    0.70    1.00  #>  #> Omega ($omega):  #>        eta.ka eta.cl eta.v #> eta.ka    0.6    0.0   0.0 #> eta.cl    0.0    0.3   0.0 #> eta.v     0.0    0.0   0.1 #>  ── μ-referencing ($muRefTable): ──   #>   theta    eta level covariates #> 1   tka eta.ka    id   TC*cov_C #> 2   tcl eta.cl    id            #> 3    tv  eta.v    id            #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         tka <- 0.45 #>         label(\"Log Ka\") #>         tcl <- 1 #>         label(\"Log Cl\") #>         tv <- 3.45 #>         label(\"Log V\") #>         add.err <- c(0, 0.7) #>         cov_C <- 1 #>         eta.ka ~ 0.6 #>         eta.cl ~ 0.3 #>         eta.v ~ 0.1 #>     }) #>     model({ #>         ka <- exp(tka + eta.ka + TC * cov_C) #>         cl <- exp(tcl + eta.cl) #>         v <- exp(tv + eta.v) #>         d/dt(depot) <- -ka * depot #>         d/dt(depot) <- -ka * depot #>         d/dt(center) <- ka * depot - cl/v * center #>         cp <- center/v #>         cp ~ add(add.err) #>     }) #> }  # You can turn it off by simply adding it back  rxSetCovariateNamesForPiping()  one.compartment %>%   model({ka <- exp(tka + eta.ka + TC * cov_C)}) #>   #> ℹ add population parameter `TC` and set estimate to 1 #> ℹ add population parameter `cov_C` and set estimate to 1 #>  ── rxode2-based free-form 2-cmt ODE model ──────────────────────────────────────  #>  ── Initalization: ──   #> Fixed Effects ($theta):  #>     tka     tcl      tv add.err      TC   cov_C  #>    0.45    1.00    3.45    0.70    1.00    1.00  #>  #> Omega ($omega):  #>        eta.ka eta.cl eta.v #> eta.ka    0.6    0.0   0.0 #> eta.cl    0.0    0.3   0.0 #> eta.v     0.0    0.0   0.1 #>  ── μ-referencing ($muRefTable): ──   #>   theta    eta level #> 1   tka eta.ka    id #> 2   tcl eta.cl    id #> 3    tv  eta.v    id #>  #>  ── Model (Normalized Syntax): ──  #> function() { #>     ini({ #>         tka <- 0.45 #>         label(\"Log Ka\") #>         tcl <- 1 #>         label(\"Log Cl\") #>         tv <- 3.45 #>         label(\"Log V\") #>         add.err <- c(0, 0.7) #>         TC <- 1 #>         cov_C <- 1 #>         eta.ka ~ 0.6 #>         eta.cl ~ 0.3 #>         eta.v ~ 0.1 #>     }) #>     model({ #>         ka <- exp(tka + eta.ka + TC * cov_C) #>         cl <- exp(tcl + eta.cl) #>         v <- exp(tv + eta.v) #>         d/dt(depot) <- -ka * depot #>         d/dt(depot) <- -ka * depot #>         d/dt(center) <- ka * depot - cl/v * center #>         cp <- center/v #>         cp ~ add(add.err) #>     }) #> }  # The covariates you set with `rxSetCovariateNamesForPiping()` # are turned off every time you solve (or fit in nlmixr)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetIni0.html","id":null,"dir":"Reference","previous_headings":"","what":"Set Initial conditions to time zero instead of the first observed/dosed time — rxSetIni0","title":"Set Initial conditions to time zero instead of the first observed/dosed time — rxSetIni0","text":"Set Initial conditions time zero instead first observed/dosed time","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetIni0.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set Initial conditions to time zero instead of the first observed/dosed time — rxSetIni0","text":"","code":"rxSetIni0(ini0 = TRUE)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetIni0.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set Initial conditions to time zero instead of the first observed/dosed time — rxSetIni0","text":"ini0 TRUE (default), set initial conditions time zero. Otherwise initial conditions first observed time.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetIni0.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set Initial conditions to time zero instead of the first observed/dosed time — rxSetIni0","text":"boolean ini0, though called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetProd.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct setting of product — rxSetProd","title":"Defunct setting of product — rxSetProd","text":"Defunct setting product","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetProd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defunct setting of product — rxSetProd","text":"","code":"rxSetProd(type = c(\"long double\", \"double\", \"logify\"))"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetProd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defunct setting of product — rxSetProd","text":"type used type product","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetProd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defunct setting of product — rxSetProd","text":"nothing","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetProgressBar.html","id":null,"dir":"Reference","previous_headings":"","what":"Set timing for progress bar — rxSetProgressBar","title":"Set timing for progress bar — rxSetProgressBar","text":"Set timing progress bar","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetProgressBar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set timing for progress bar — rxSetProgressBar","text":"","code":"rxSetProgressBar(seconds = 1)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetProgressBar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set timing for progress bar — rxSetProgressBar","text":"seconds sets number seconds need elapse drawing next segment progress bar.  zero turns progress bar.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetProgressBar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set timing for progress bar — rxSetProgressBar","text":"nothing, used side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetProgressBar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set timing for progress bar — rxSetProgressBar","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSeed.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the parallel seed for rxode2 random number generation — rxSetSeed","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"sets seed rxode2 parallel random number generation. set, whenever seed set threefry vandercorput simulation engine, use seed, increment number seeds continue sequence next time random number generator called.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSeed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"","code":"rxSetSeed(seed)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSeed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"seed integer represents rxode2 parallel internal random number generator seed.  positive, use seed random number generation increment reseed parallel new engines called. negative, turn rxode2 seed generate seed R's uniform random number generator.  Best practice set seed.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSeed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"Nothing, called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSeed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"contrast, called, time vandercorput threefry simulation engines seeded comes uniform random number generated standard R random seed.  may cause duplicate seed based R seed state. means correlations simulations exist avoid birthday problem picking exactly seed using seed state R random number generator.  times seed called, likely becomes.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSeed.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"JD Cook. (2016). Random number generator seed mistakes. https://tinyurl.com/m62v3kv9","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSeed.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSeed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set the parallel seed for rxode2 random number generation — rxSetSeed","text":"","code":"rxSetSeed(42)  # seed with generator 42 rxnorm() #> [1] 0.2229005  # Use R's random number generator rnorm(1) #> [1] 1.793606  rxSetSeed(42)  # reproduces the same number rxnorm() #> [1] 0.2229005  # But R's random number is not the same  rnorm(1) #> [1] 0.04863385  # If we reset this to use the R's seed # (internally rxode2 uses a uniform random number to span seeds) # This can lead to duplicate sequences and seeds  rxSetSeed(-1)  # Now set seed works for both.  # This is not recommended, but illustrates the different types of # seeds that can be generated.  set.seed(42)  rxnorm() #> [1] -0.6306035  rnorm(1) #> [1] -0.5646982  set.seed(42)  rxnorm() #> [1] -0.6306035  rnorm(1) #> [1] -0.5646982"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSilentErr.html","id":null,"dir":"Reference","previous_headings":"","what":"Silence some of rxode2's C/C++ messages — rxSetSilentErr","title":"Silence some of rxode2's C/C++ messages — rxSetSilentErr","text":"Silence rxode2's C/C++ messages","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSilentErr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Silence some of rxode2's C/C++ messages — rxSetSilentErr","text":"","code":"rxSetSilentErr(silent)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSilentErr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Silence some of rxode2's C/C++ messages — rxSetSilentErr","text":"silent can 0L \"noisy\"  1L \"silent\"","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSilentErr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Silence some of rxode2's C/C++ messages — rxSetSilentErr","text":"TRUE; called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSum.html","id":null,"dir":"Reference","previous_headings":"","what":"Defunct setting of sum — rxSetSum","title":"Defunct setting of sum — rxSetSum","text":"Defunct setting sum","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Defunct setting of sum — rxSetSum","text":"","code":"rxSetSum(type = c(\"pairwise\", \"fsum\", \"kahan\", \"neumaier\", \"c\"))"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Defunct setting of sum — rxSetSum","text":"type used type product","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetSum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Defunct setting of sum — rxSetSum","text":"nothing","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetupIni.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup the initial conditions. — rxSetupIni","title":"Setup the initial conditions. — rxSetupIni","text":"Setup initial conditions.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetupIni.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup the initial conditions. — rxSetupIni","text":"","code":"rxSetupIni(obj, inits = NULL)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetupIni.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup the initial conditions. — rxSetupIni","text":"obj rxode2 object inits numeric vector initial conditions.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetupIni.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup the initial conditions. — rxSetupIni","text":"initial conditions setup","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetupIni.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setup the initial conditions. — rxSetupIni","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetupScale.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup the initial conditions. — rxSetupScale","title":"Setup the initial conditions. — rxSetupScale","text":"Setup initial conditions.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetupScale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup the initial conditions. — rxSetupScale","text":"","code":"rxSetupScale(obj, scale = NULL, extraArgs = NULL)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetupScale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup the initial conditions. — rxSetupScale","text":"obj rxode2 object extraArgs list extra args parse initial conditions. inits numeric vector initial conditions.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetupScale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup the initial conditions. — rxSetupScale","text":"setup scale changing compartment values","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSetupScale.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setup the initial conditions. — rxSetupScale","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxShiny.html","id":null,"dir":"Reference","previous_headings":"","what":"Use Shiny to help develop an rxode2 model — rxShiny","title":"Use Shiny to help develop an rxode2 model — rxShiny","text":"Use Shiny help develop rxode2 model","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxShiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use Shiny to help develop an rxode2 model — rxShiny","text":"","code":"rxShiny(   object,   params = NULL,   events = NULL,   inits = NULL,   ...,   data = data.frame() )  # S3 method for rxSolve rxShiny(   object,   params = NULL,   events = NULL,   inits = NULL,   ...,   data = data.frame() )  # S3 method for default rxShiny(   object = NULL,   params = NULL,   events = NULL,   inits = NULL,   ...,   data = data.frame() )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxShiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use Shiny to help develop an rxode2 model — rxShiny","text":"object rxode2 family objects. supplied 2-compartment indirect effect model used.  supplied, use model associated rxode2 object model exploration. params Initial parameters model events Event information (currently ignored) inits Initial estimates model ... arguments passed rxShiny.  Currently anything. data data like plot.  data time variable well compartment calculated variable matches rxode2 model, data added plot specific compartment calculated variable.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxShiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use Shiny to help develop an rxode2 model — rxShiny","text":"Nothing; Starts shiny server","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxShiny.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Use Shiny to help develop an rxode2 model — rxShiny","text":"Zufar Mulyukov Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSimThetaOmega.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Parameters from a Theta/Omega specification — rxSimThetaOmega","title":"Simulate Parameters from a Theta/Omega specification — rxSimThetaOmega","text":"Simulate Parameters Theta/Omega specification","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSimThetaOmega.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Parameters from a Theta/Omega specification — rxSimThetaOmega","text":"","code":"rxSimThetaOmega(   params = NULL,   omega = NULL,   omegaDf = NULL,   omegaLower = as.numeric(c(R_NegInf)),   omegaUpper = as.numeric(c(R_PosInf)),   omegaIsChol = FALSE,   omegaSeparation = \"auto\",   omegaXform = 1L,   nSub = 1L,   thetaMat = NULL,   thetaLower = as.numeric(c(R_NegInf)),   thetaUpper = as.numeric(c(R_PosInf)),   thetaDf = NULL,   thetaIsChol = FALSE,   nStud = 1L,   sigma = NULL,   sigmaLower = as.numeric(c(R_NegInf)),   sigmaUpper = as.numeric(c(R_PosInf)),   sigmaDf = NULL,   sigmaIsChol = FALSE,   sigmaSeparation = \"auto\",   sigmaXform = 1L,   nCoresRV = 1L,   nObs = 1L,   dfSub = 0,   dfObs = 0,   simSubjects = TRUE,   simVariability = as.logical(c(NA_LOGICAL)) )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSimThetaOmega.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Parameters from a Theta/Omega specification — rxSimThetaOmega","text":"params Named Vector rxode2 model parameters omega Estimate Covariance matrix. omega list, assume block matrix convert full matrix simulations.  omega NA using rxode2 ui model, subject variability described omega matrix set zero. omegaDf degrees freedom t-distribution simulation.  default NULL equivalent Inf degrees, simulate normal distribution instead t-distribution. omegaLower Lower bounds simulated ETAs (default -Inf) omegaUpper Upper bounds simulated ETAs (default Inf) omegaIsChol Indicates omega supplied Cholesky decomposed matrix instead traditional symmetric matrix. omegaSeparation Omega separation strategy Tells type separation strategy simulating covariance parameter uncertainty standard deviations modeled thetaMat matrix. \"lkj\" simulates correlation matrix rLKJ1 matrix distribution parameter eta equal degrees freedom nu (nu-1)/2 \"separation\" simulates identity inverse Wishart covariance matrix nu degrees freedom.  converted covariance matrix augmented modeled standard deviations.  computationally complex \"lkj\" prior, performs better covariance matrix size greater equal 10 \"auto\" chooses \"lkj\" dimension matrix less 10 \"separation\" greater equal 10. omegaXform taking omega values thetaMat simulations (using separation strategy covariance simulation), thetaMat values turned int standard deviation values: identity standard deviation values directly modeled params thetaMat matrix variance params thetaMat simulates variance directly modeled thetaMat matrix log params thetaMat simulates log(sd) nlmixrSqrt params thetaMat simulates inverse cholesky decomposed matrix x^2 modeled along diagonal.  works diagonal matrix. nlmixrLog params thetaMat simulates inverse cholesky decomposed matrix exp(x^2) along diagonal.  works diagonal matrix. nlmixrIdentity params thetaMat simulates inverse cholesky decomposed matrix. works diagonal matrix. nSub Number subject variabilities (ETAs) simulated every realization parameters. thetaMat Named theta matrix. thetaLower Lower bounds simulated population parameter variability (default -Inf) thetaUpper Upper bounds simulated population unexplained variability (default Inf) thetaDf degrees freedom t-distribution simulation.  default NULL equivalent Inf degrees, simulate normal distribution instead t-distribution. thetaIsChol Indicates theta supplied Cholesky decomposed matrix instead traditional symmetric matrix. nStud Number virtual studies characterize uncertainty estimated parameters. sigma Named sigma covariance Cholesky decomposition covariance matrix.  names columns indicate parameters simulated.  simulated every observation solved system. sigma NA using rxode2 ui model, unexplained variability described sigma matrix set zero. sigmaLower Lower bounds simulated unexplained variability (default -Inf) sigmaUpper Upper bounds simulated unexplained variability (default Inf) sigmaDf Degrees freedom sigma t-distribution.  default equivalent Inf, normal distribution. sigmaIsChol Boolean indicating sigma Cholesky decomposition instead symmetric covariance sigmaSeparation separation strategy sigma; Tells type separation strategy simulating covariance parameter uncertainty standard deviations modeled thetaMat matrix. \"lkj\" simulates correlation matrix rLKJ1 matrix distribution parameter eta equal degrees freedom nu (nu-1)/2 \"separation\" simulates identity inverse Wishart covariance matrix nu degrees freedom.  converted covariance matrix augmented modeled standard deviations.  computationally complex \"lkj\" prior, performs better covariance matrix size greater equal 10 \"auto\" chooses \"lkj\" dimension matrix less 10 \"separation\" greater equal 10. sigmaXform taking sigma values thetaMat simulations (using separation strategy covariance simulation), thetaMat values turned int standard deviation values: identity standard deviation values directly modeled params thetaMat matrix variance params thetaMat simulates variance directly modeled thetaMat matrix log params thetaMat simulates log(sd) nlmixrSqrt params thetaMat simulates inverse cholesky decomposed matrix x^2 modeled along diagonal.  works diagonal matrix. nlmixrLog params thetaMat simulates inverse cholesky decomposed matrix exp(x^2) along diagonal.  works diagonal matrix. nlmixrIdentity params thetaMat simulates inverse cholesky decomposed matrix. works diagonal matrix. nCoresRV Number cores used simulation sigma variables.  default 1. reproduce results need run platform number cores. reason set one, regardless number cores used threaded ODE solving. nObs Number observations simulate (sigma matrix) dfSub Degrees freedom sample subject variability matrix inverse Wishart distribution (scaled) scaled inverse chi squared distribution. dfObs Degrees freedom sample unexplained variability matrix inverse Wishart distribution (scaled) scaled inverse chi squared distribution. simSubjects boolean indicated rxode2 simulate subjects studies (TRUE, default) studies (FALSE) simVariability determines variability simulated. NA (default) determined solver.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSimThetaOmega.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Parameters from a Theta/Omega specification — rxSimThetaOmega","text":"data frame simulated subjects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSimThetaOmega.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate Parameters from a Theta/Omega specification — rxSimThetaOmega","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSolve.html","id":null,"dir":"Reference","previous_headings":"","what":"Solving & Simulation of a ODE/solved system (a options) equation — rxSolve","title":"Solving & Simulation of a ODE/solved system (a options) equation — rxSolve","text":"uses rxode2 family objects, file, model specification solve ODE system.  many options solved rxode2 model, first required object, events -times optional params inits.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSolve.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Solving & Simulation of a ODE/solved system (a options) equation — rxSolve","text":"","code":"rxSolve(   object,   params = NULL,   events = NULL,   inits = NULL,   scale = NULL,   method = c(\"liblsoda\", \"lsoda\", \"dop853\", \"indLin\"),   sigdig = NULL,   atol = 1e-08,   rtol = 1e-06,   maxsteps = 70000L,   hmin = 0,   hmax = NA_real_,   hmaxSd = 0,   hini = 0,   maxordn = 12L,   maxords = 5L,   ...,   cores,   covsInterpolation = c(\"locf\", \"linear\", \"nocb\", \"midpoint\"),   addCov = TRUE,   sigma = NULL,   sigmaDf = NULL,   sigmaLower = -Inf,   sigmaUpper = Inf,   nCoresRV = 1L,   sigmaIsChol = FALSE,   sigmaSeparation = c(\"auto\", \"lkj\", \"separation\"),   sigmaXform = c(\"identity\", \"variance\", \"log\", \"nlmixrSqrt\", \"nlmixrLog\",     \"nlmixrIdentity\"),   nDisplayProgress = 10000L,   amountUnits = NA_character_,   timeUnits = \"hours\",   theta = NULL,   thetaLower = -Inf,   thetaUpper = Inf,   eta = NULL,   addDosing = FALSE,   stateTrim = Inf,   updateObject = FALSE,   omega = NULL,   omegaDf = NULL,   omegaIsChol = FALSE,   omegaSeparation = c(\"auto\", \"lkj\", \"separation\"),   omegaXform = c(\"variance\", \"identity\", \"log\", \"nlmixrSqrt\", \"nlmixrLog\",     \"nlmixrIdentity\"),   omegaLower = -Inf,   omegaUpper = Inf,   nSub = 1L,   thetaMat = NULL,   thetaDf = NULL,   thetaIsChol = FALSE,   nStud = 1L,   dfSub = 0,   dfObs = 0,   returnType = c(\"rxSolve\", \"matrix\", \"data.frame\", \"data.frame.TBS\", \"data.table\",     \"tbl\", \"tibble\"),   seed = NULL,   nsim = NULL,   minSS = 10L,   maxSS = 1000L,   infSSstep = 12,   strictSS = TRUE,   istateReset = TRUE,   subsetNonmem = TRUE,   maxAtolRtolFactor = 0.1,   from = NULL,   to = NULL,   by = NULL,   length.out = NULL,   iCov = NULL,   keep = NULL,   indLinPhiTol = 1e-07,   indLinPhiM = 0L,   indLinMatExpType = c(\"expokit\", \"Al-Mohy\", \"arma\"),   indLinMatExpOrder = 6L,   drop = NULL,   idFactor = TRUE,   mxhnil = 0,   hmxi = 0,   warnIdSort = TRUE,   warnDrop = TRUE,   ssAtol = 1e-08,   ssRtol = 1e-06,   safeZero = TRUE,   sumType = c(\"pairwise\", \"fsum\", \"kahan\", \"neumaier\", \"c\"),   prodType = c(\"long double\", \"double\", \"logify\"),   sensType = c(\"advan\", \"autodiff\", \"forward\", \"central\"),   linDiff = c(tlag = 1.5e-05, f = 1.5e-05, rate = 1.5e-05, dur = 1.5e-05, tlag2 =     1.5e-05, f2 = 1.5e-05, rate2 = 1.5e-05, dur2 = 1.5e-05),   linDiffCentral = c(tlag = TRUE, f = TRUE, rate = TRUE, dur = TRUE, tlag2 = TRUE, f2 =     TRUE, rate2 = TRUE, dur2 = TRUE),   resample = NULL,   resampleID = TRUE,   maxwhile = 1e+05,   atolSens = 1e-08,   rtolSens = 1e-06,   ssAtolSens = 1e-08,   ssRtolSens = 1e-06,   simVariability = NA )  # S3 method for `function` rxSolve(   object,   params = NULL,   events = NULL,   inits = NULL,   ...,   theta = NULL,   eta = NULL )  # S3 method for rxUi rxSolve(   object,   params = NULL,   events = NULL,   inits = NULL,   ...,   theta = NULL,   eta = NULL )  # S3 method for nlmixr2FitData rxSolve(   object,   params = NULL,   events = NULL,   inits = NULL,   ...,   theta = NULL,   eta = NULL )  # S3 method for nlmixr2FitCore rxSolve(   object,   params = NULL,   events = NULL,   inits = NULL,   ...,   theta = NULL,   eta = NULL )  # S3 method for default rxSolve(   object,   params = NULL,   events = NULL,   inits = NULL,   ...,   theta = NULL,   eta = NULL )  # S3 method for rxSolve update(object, ...)  # S3 method for rxode2 predict(object, ...)  # S3 method for rxSolve predict(object, ...)  # S3 method for rxEt predict(object, ...)  # S3 method for rxParams predict(object, ...)  # S3 method for rxode2 simulate(object, nsim = 1L, seed = NULL, ...)  # S3 method for rxSolve simulate(object, nsim = 1L, seed = NULL, ...)  # S3 method for rxParams simulate(object, nsim = 1L, seed = NULL, ...)  # S3 method for rxSolve solve(a, b, ...)  # S3 method for rxode2 solve(a, b, ...)  # S3 method for rxParams solve(a, b, ...)  # S3 method for rxEt solve(a, b, ...)  rxControl(..., params = NULL, events = NULL, inits = NULL)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSolve.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Solving & Simulation of a ODE/solved system (a options) equation — rxSolve","text":"object either rxode2 family objects, file-name rxode2 model specification, string rxode2 model specification. params numeric named vector values every parameter ODE system; names must correspond parameter identifiers used ODE specification; events eventTable object describing input (e.g., doses) dynamic system observation sampling time points (see eventTable()); inits vector initial values state variables (e.g., amounts compartment), order vector must state variables (e.g., PK/PD compartments); scale numeric named vector scaling ode parameters system.  names must correspond parameter identifiers ODE specification. ODE variables divided scaling factor.  example scale=c(center=2) divide center ODE variable 2. method method solving ODEs.  Currently supports: \"liblsoda\" thread safe lsoda.  supports parallel thread-based solving, ignores user Jacobian specification. \"lsoda\" -- LSODA solver.  support parallel thread-based solving, allows user Jacobian specification. \"dop853\" -- DOP853 solver.  support parallel thread-based solving user Jacobain specification \"indLin\" -- Solving inductive linearization.  rxode2 dll must setup specially use solving routine. sigdig Specifies \"significant digits\" ode solving requests.  specified controls relative absolute tolerances ODE solvers.  default tolerance 0.5*10^(-sigdig-2) regular ODEs. sensitivity equations steady-state solutions default 0.5*10^(-sigdig-1.5) (sensitivity changes applicable liblsoda).  default unspecified (NULL) uses standard atol/rtol. atol numeric absolute tolerance (1e-8 default) used ODE solver determine good solution achieved;  also used solved linear model check prior doses add anything solution. rtol numeric relative tolerance (1e-6 default) used ODE solver determine good solution achieved. also used solved linear model check prior doses add anything solution. maxsteps maximum number (internally defined) steps allowed one call solver. (5000 default) hmin minimum absolute step size allowed. default value 0. hmax maximum absolute step size allowed.  hmax=NA (default), uses average difference + hmaxSd*sd times sampling events. hmaxSd user specified parameter defaults zero.  hmax=NULL rxode2 uses maximum difference times sampling events.  value 0 equivalent infinite maximum absolute step size. hmaxSd number standard deviations time difference add hmax. default 0 hini step size attempted first step. default value determined solver (hini = 0) maxordn maximum order allowed nonstiff (Adams) method.  default 12.  can 1 12. maxords maximum order allowed stiff (BDF) method.  default value 5.  can 1 5. ... arguments including scaling factors compartment.  includes S# = numeric scale compartment # dividing compartment amount scale factor, like NONMEM. cores Number cores used parallel ODE solving.  equivalent calling setRxThreads() covsInterpolation specifies interpolation method time-varying covariates. solving ODEs often samples times outside sampling time specified events. happens, time varying covariates interpolated.  Currently can : \"linear\" interpolation, interpolates covariate solving line observed covariates extrapolating new covariate value. \"constant\" -- Last observation carried forward (default). \"NOCB\" -- Next Observation Carried Backward.  method NONMEM uses. \"midpoint\" Last observation carried forward midpoint; Next observation carried backward midpoint. addCov boolean indicating covariates added output matrix data frame. default disabled. sigma Named sigma covariance Cholesky decomposition covariance matrix.  names columns indicate parameters simulated.  simulated every observation solved system. sigma NA using rxode2 ui model, unexplained variability described sigma matrix set zero. sigmaDf Degrees freedom sigma t-distribution.  default equivalent Inf, normal distribution. sigmaLower Lower bounds simulated unexplained variability (default -Inf) sigmaUpper Upper bounds simulated unexplained variability (default Inf) nCoresRV Number cores used simulation sigma variables.  default 1. reproduce results need run platform number cores. reason set one, regardless number cores used threaded ODE solving. sigmaIsChol Boolean indicating sigma Cholesky decomposition instead symmetric covariance sigmaSeparation separation strategy sigma; Tells type separation strategy simulating covariance parameter uncertainty standard deviations modeled thetaMat matrix. \"lkj\" simulates correlation matrix rLKJ1 matrix distribution parameter eta equal degrees freedom nu (nu-1)/2 \"separation\" simulates identity inverse Wishart covariance matrix nu degrees freedom.  converted covariance matrix augmented modeled standard deviations.  computationally complex \"lkj\" prior, performs better covariance matrix size greater equal 10 \"auto\" chooses \"lkj\" dimension matrix less 10 \"separation\" greater equal 10. sigmaXform taking sigma values thetaMat simulations (using separation strategy covariance simulation), thetaMat values turned int standard deviation values: identity standard deviation values directly modeled params thetaMat matrix variance params thetaMat simulates variance directly modeled thetaMat matrix log params thetaMat simulates log(sd) nlmixrSqrt params thetaMat simulates inverse cholesky decomposed matrix x^2 modeled along diagonal.  works diagonal matrix. nlmixrLog params thetaMat simulates inverse cholesky decomposed matrix exp(x^2) along diagonal.  works diagonal matrix. nlmixrIdentity params thetaMat simulates inverse cholesky decomposed matrix. works diagonal matrix. nDisplayProgress integer indicating minimum number c-based solves progress bar shown.  default 10,000. amountUnits supplies dose units data frame supplied instead event table.  importing data rxode2 event table. timeUnits supplies time units data frame supplied instead event table.  importing data rxode2 event table. theta vector parameters named THETA\\[#\\] added parameters thetaLower Lower bounds simulated population parameter variability (default -Inf) thetaUpper Upper bounds simulated population unexplained variability (default Inf) eta vector parameters named ETA\\[#\\] added parameters addDosing Boolean indicating solve add rxode2 EVID related columns.  also include dosing information estimates doses.  default, rxode2 includes estimates observations. (default FALSE). addDosing NULL, include EVID=0 solve exclude model-times EVID=2. addDosing NA classic rxode2 EVID events returned. addDosing TRUE add event information NONMEM-style format; subsetNonmem=FALSE rxode2 also include extra event types (EVID) ending infusion modeled times: EVID=-1 modeled rate infusions turned (matches rate=-1) EVID=-2 modeled duration infusions turned (matches rate=-2) EVID=-10 specified rate infusions turned (matches rate>0) EVID=-20 specified dur infusions turned (matches dur>0) EVID=101,102,103,... Modeled time 101 first model time, 102 second etc. stateTrim amounts/concentrations one states value, trim value. default Inf.  Also trims -stateTrim large negative amounts/concentrations.  want trim range say c(0, 2000000) may specify 2 values lower upper range make sure state values reasonable range. updateObject internally used flag update rxode2 solved object (supplying rxode2 solved object) well returning new object.  probably modify FALSE default unless willing unexpected results. omega Estimate Covariance matrix. omega list, assume block matrix convert full matrix simulations.  omega NA using rxode2 ui model, subject variability described omega matrix set zero. omegaDf degrees freedom t-distribution simulation.  default NULL equivalent Inf degrees, simulate normal distribution instead t-distribution. omegaIsChol Indicates omega supplied Cholesky decomposed matrix instead traditional symmetric matrix. omegaSeparation Omega separation strategy Tells type separation strategy simulating covariance parameter uncertainty standard deviations modeled thetaMat matrix. \"lkj\" simulates correlation matrix rLKJ1 matrix distribution parameter eta equal degrees freedom nu (nu-1)/2 \"separation\" simulates identity inverse Wishart covariance matrix nu degrees freedom.  converted covariance matrix augmented modeled standard deviations.  computationally complex \"lkj\" prior, performs better covariance matrix size greater equal 10 \"auto\" chooses \"lkj\" dimension matrix less 10 \"separation\" greater equal 10. omegaXform taking omega values thetaMat simulations (using separation strategy covariance simulation), thetaMat values turned int standard deviation values: identity standard deviation values directly modeled params thetaMat matrix variance params thetaMat simulates variance directly modeled thetaMat matrix log params thetaMat simulates log(sd) nlmixrSqrt params thetaMat simulates inverse cholesky decomposed matrix x^2 modeled along diagonal.  works diagonal matrix. nlmixrLog params thetaMat simulates inverse cholesky decomposed matrix exp(x^2) along diagonal.  works diagonal matrix. nlmixrIdentity params thetaMat simulates inverse cholesky decomposed matrix. works diagonal matrix. omegaLower Lower bounds simulated ETAs (default -Inf) omegaUpper Upper bounds simulated ETAs (default Inf) nSub Number subject variabilities (ETAs) simulated every realization parameters. thetaMat Named theta matrix. thetaDf degrees freedom t-distribution simulation.  default NULL equivalent Inf degrees, simulate normal distribution instead t-distribution. thetaIsChol Indicates theta supplied Cholesky decomposed matrix instead traditional symmetric matrix. nStud Number virtual studies characterize uncertainty estimated parameters. dfSub Degrees freedom sample subject variability matrix inverse Wishart distribution (scaled) scaled inverse chi squared distribution. dfObs Degrees freedom sample unexplained variability matrix inverse Wishart distribution (scaled) scaled inverse chi squared distribution. returnType tells type object returned.  currently supported types : \"rxSolve\" (default) return reactive data frame can change easily change different pieces solve update data frame.  currently standard solving method rxode2,  used rxSolve(object, ...), solve(object,...), \"data.frame\" -- returns plain, non-reactive data frame; Currently slightly faster returnType=\"matrix\" \"matrix\" -- returns plain matrix column names attached solved object.  used object$run well object$solve \"data.table\" -- returns data.table; data.table created reference (ie setDt()), fast. \"tbl\" \"tibble\" returns tibble format. seed object specifying random number generator initialized nsim represents number simulations.  rxode2, supply single subject event tables (created [eventTable()]) minSS Minimum number iterations steady-state dose maxSS Maximum number iterations steady-state dose infSSstep Step size determining constant infusion reached steady state.  default large value, 12. strictSS Boolean indicating strict steady-state required. strict steady-state (TRUE) required least minSS doses administered total number steady states doses continue maxSS reached, atol rtol every compartment reached.  However, ODE solving problems occur minSS reached whole subject considered invalid solve. strictSS FALSE long minSS reached last good solve ODE solving problems occur considered steady state, even though either atol, rtol maxSS achieved. istateReset TRUE, reset ISTATE variable 1 lsoda liblsoda doses, like deSolve; FALSE, reset ISTATE variable doses. subsetNonmem subset NONMEM compatible EVIDs .  default TRUE. maxAtolRtolFactor maximum atol/rtol FOCEi routines may adjust .  default 0.1 observations event table, start observations value. default zero. observations event table, end observations value. default 24 + maximum dose time. observations event table, amount increment observations . length.number observations create observations event table. default 200. iCov data frame individual non-time varying covariates combine events dataset merge. keep Columns keep either input dataset iCov dataset.  iCov dataset, column kept per line.  input dataset, records added data LOCF (Last Observation Carried forward) imputation performed. indLinPhiTol requested accuracy tolerance exponential matrix. indLinPhiM maximum size Krylov basis indLinMatExpType matrix exponential type use rxode2.  Currently following supported: Al-Mohy Uses exponential matrix method Al-Mohy Higham (2009) arma Use exponential matrix RcppArmadillo expokit Use exponential matrix Roger B. Sidje (1998) indLinMatExpOrder integer, order approximation used, Al-Mohy expokit values. best value depends machine precision (slightly matrix). use 6 default. drop Columns drop output idFactor boolean indicates original ID values maintained. changes default sequentially ordered ID factor original ID values original dataset.  default enabled. mxhnil maximum number messages printed (per problem) warning T + H = T step (H = step size).  must positive result non-default value.  default value 0 (infinite). hmxi inverse maximum absolute value H used. hmxi = 0.0 allowed corresponds infinite hmax1 (default).  hminandhmximay changed time, take effect next change ofHis considered. option considered withmethod=\"liblsoda\"`. warnIdSort Warn ID present rxode2 assumes order parameters/iCov order parameters input dataset. warnDrop Warn column(s) supposed dropped, present. ssAtol Steady state atol convergence factor.  Can vector based state. ssRtol Steady state rtol convergence factor.  Can vector based state. safeZero Use safe zero divide log routines.  default turned may turn wish. sumType Sum type use sum() rxode2 code blocks. pairwise uses pairwise sum (fast, default) fsum uses PreciseSum package's fsum function (accurate) kahan uses Kahan correction neumaier uses Neumaier correction c uses correction: default/native summing prodType Product use prod() rxode2 blocks long double converts long double, performs multiplication converts back. double uses standard double scale multiplication. sensType Sensitivity type linCmt() model: advan Use direct advan solutions autodiff Use autodiff advan solutions forward Use forward difference solutions central Use central differences linDiff gives linear difference amount types linear compartment model parameters sensitivities calculated. named components numeric vector : \"lag\" Central compartment lag \"f\" Central compartment bioavailability \"rate\" Central compartment modeled rate \"dur\" Central compartment modeled duration \"lag2\" Depot compartment lag \"f2\" Depot compartment bioavailability \"rate2\" Depot compartment modeled rate \"dur2\" Depot compartment modeled duration linDiffCentral gives parameters use central differences linear compartment model parameters.  components linDiff resample character vector model variables resample input dataset; sampling done replacement. NULL FALSE resampling done.  TRUE resampling done covariates input dataset resampleID boolean representing resampling done individual basis TRUE (ie. whole patient selected) covariate resampled independent subject identifier FALSE.  resampleID=TRUE correlations parameters retained, resampleID=FALSE ignores patient covariate correaltions. Hence default resampleID=TRUE. maxwhile represents maximum times loop evaluated exiting.  default 100000 atolSens Sensitivity atol, can different atol liblsoda.  allows less accurate solve gradients (desired) rtolSens Sensitivity rtol, can different rtol liblsoda.  allows less accurate solve gradients (desired) ssAtolSens Sensitivity absolute tolerance (atol) calculating steady state achieved sensitivity compartments. ssRtolSens Sensitivity relative tolerance (rtol) calculating steady state achieved sensitivity compartments. simVariability determines variability simulated. NA (default) determined solver. using solve(), equivalent object argument.  specify object later argument list overwrites parameter. b using solve(), equivalent params argument.  specify params named argument, overwrites output","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSolve.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Solving & Simulation of a ODE/solved system (a options) equation — rxSolve","text":"“rxSolve” solve object stores solved value special data.frame type determined returnType. default many rows sampled time points many columns system variables (defined ODEs additional assignments rxode2 model code).  also stores information call allow dynamic updating solved object. operations object similar data-frame, expand $ [[\"\"]] access operators assignment operators resolve based different parameter values, initial conditions, solver parameters, events (updating timevariable). can call eventTable() methods solved object update event table resolve system equations.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSolve.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Solving & Simulation of a ODE/solved system (a options) equation — rxSolve","text":"rest document focus different ODE solving methods, followed core solving method's options, rxode2 event handling options, rxode2's numerical stability options, rxode2's output options, finally internal rxode2 options compatibility options.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSolve.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Solving & Simulation of a ODE/solved system (a options) equation — rxSolve","text":"\"New Scaling Squaring Algorithm Matrix Exponential\", Awad H. Al-Mohy Nicholas J. Higham, August 2009 Roger B. Sidje (1998).  EXPOKIT: Software package computing matrix exponentials.  ACM - Transactions Mathematical Software 24(1), 130-156. Hindmarsh, . C. ODEPACK, Systematized Collection ODE Solvers. Scientific Computing, R. S. Stepleman et al. (Eds.), North-Holland, Amsterdam, 1983, pp. 55-64. Petzold, L. R. Automatic Selection Methods Solving Stiff Nonstiff Systems Ordinary Differential Equations. Siam J. Sci. Stat. Comput. 4 (1983), pp. 136-148. Hairer, E., Norsett, S. P., Wanner, G. Solving ordinary differential equations , nonstiff problems. 2nd edition, Springer Series Computational Mathematics, Springer-Verlag (1993).","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSolve.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Solving & Simulation of a ODE/solved system (a options) equation — rxSolve","text":"Matthew Fidler, Melissa Hallow  Wenping Wang","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSolveFree.html","id":null,"dir":"Reference","previous_headings":"","what":"Free the C solving/parsing information. — rxSolveFree","title":"Free the C solving/parsing information. — rxSolveFree","text":"Take ODE C system free .","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSolveFree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Free the C solving/parsing information. — rxSolveFree","text":"","code":"rxSolveFree()"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSolveFree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Free the C solving/parsing information. — rxSolveFree","text":"logical indicating memory successfully freed","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSplitPlusQ.html","id":null,"dir":"Reference","previous_headings":"","what":"This function splits a function based on + or - terms — rxSplitPlusQ","title":"This function splits a function based on + or - terms — rxSplitPlusQ","text":"uses parser disturb terms within functions.  example:","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSplitPlusQ.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function splits a function based on + or - terms — rxSplitPlusQ","text":"","code":"rxSplitPlusQ(x, level = 0, mult = FALSE)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSplitPlusQ.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function splits a function based on + or - terms — rxSplitPlusQ","text":"x Quoted R expression splitting level Internal level parsing mult boolean split based * / expressions instead. default turned .","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSplitPlusQ.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function splits a function based on + or - terms — rxSplitPlusQ","text":"character vector split expressions","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSplitPlusQ.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"This function splits a function based on + or - terms — rxSplitPlusQ","text":"aexp(b+c)+dlog(e-f)-g*f return c(\"* exp(b + c)\", \"d * log(e - f)\", \"- g * f\")","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSplitPlusQ.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"This function splits a function based on + or - terms — rxSplitPlusQ","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxStack.html","id":null,"dir":"Reference","previous_headings":"","what":"Stack a solved object for things like ggplot — rxStack","title":"Stack a solved object for things like ggplot — rxStack","text":"Stack solved object things like ggplot","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxStack.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stack a solved object for things like ggplot — rxStack","text":"","code":"rxStack(Data, vars = NULL)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxStack.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stack a solved object for things like ggplot — rxStack","text":"Data rxode2 object stacked. vars Variables include stacked data; default variables vars NULL.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxStack.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stack a solved object for things like ggplot — rxStack","text":"Stacked data value trt, value values trt state lhs variables.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxStack.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stack a solved object for things like ggplot — rxStack","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxState.html","id":null,"dir":"Reference","previous_headings":"","what":"State variables — rxState","title":"State variables — rxState","text":"returns model's compartments states.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxState.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"State variables — rxState","text":"","code":"rxState(obj = NULL, state = NULL)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxState.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"State variables — rxState","text":"obj rxode2 family objects state string indicating state compartment like lookup.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxState.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"State variables — rxState","text":"state missing, return character vector states. state string, return compartment number named state.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/rxState.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"State variables — rxState","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSumProdModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Recast model in terms of sum/prod — rxSumProdModel","title":"Recast model in terms of sum/prod — rxSumProdModel","text":"Recast model terms sum/prod","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSumProdModel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recast model in terms of sum/prod — rxSumProdModel","text":"","code":"rxSumProdModel(model, expand = FALSE, sum = TRUE, prod = TRUE)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSumProdModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recast model in terms of sum/prod — rxSumProdModel","text":"model rxode2 model expand Boolean indicating expression expanded. sum Use sum(...) prod Use prod(...)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSumProdModel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recast model in terms of sum/prod — rxSumProdModel","text":"model string prod(.) sum(.) operations.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSumProdModel.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Recast model in terms of sum/prod — rxSumProdModel","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSupportedFuns.html","id":null,"dir":"Reference","previous_headings":"","what":"Get list of supported functions — rxSupportedFuns","title":"Get list of supported functions — rxSupportedFuns","text":"Get list supported functions","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSupportedFuns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get list of supported functions — rxSupportedFuns","text":"","code":"rxSupportedFuns()"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSupportedFuns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get list of supported functions — rxSupportedFuns","text":"list supported functions rxode2","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSupportedFuns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get list of supported functions — rxSupportedFuns","text":"","code":"rxSupportedFuns() #>   [1] \"gammafn\"      \"lgammafn\"     \"lgamma\"       \"loggamma\"     \"digamma\"      #>   [6] \"trigamma\"     \"tetragamma\"   \"pentagamma\"   \"cospi\"        \"sinpi\"        #>  [11] \"tanpi\"        \"log1p\"        \"expm1\"        \"factorial\"    \"lfactorial\"   #>  [16] \"lgamma1p\"     \"expm1\"        \"log10\"        \"log2\"         \"log1pexp\"     #>  [21] \"!\"            \"phi\"          \"pnorm\"        \"normcdf\"      \"qnorm\"        #>  [26] \"fabs\"         \"pow\"          \"R_pow\"        \"R_pow_di\"     \"Rx_pow_di\"    #>  [31] \"Rx_pow\"       \"lbeta\"        \"==\"           \"!=\"           \">=\"           #>  [36] \"<=\"           \"<\"            \">\"            \"&&\"           \"||\"           #>  [41] \"&\"            \"|\"            \"lgamma\"       \"abs\"          \"acos\"         #>  [46] \"acosh\"        \"asin\"         \"asinh\"        \"atan\"         \"atan2\"        #>  [51] \"atanh\"        \"beta\"         \"cos\"          \"cosh\"         \"erf\"          #>  [56] \"erfc\"         \"exp\"          \"gamma\"        \"linCmtA\"      \"linCmtC\"      #>  [61] \"linCmtB\"      \"log\"          \"polygamma\"    \"rxTBS\"        \"rxTBSi\"       #>  [66] \"rxTBSd\"       \"rxTBSd2\"      \"sin\"          \"sinh\"         \"sqrt\"         #>  [71] \"tan\"          \"tanh\"         \"gammap\"       \"floor\"        \"round\"        #>  [76] \"ceil\"         \"trunc\"        \"bessel_i\"     \"bessel_j\"     \"bessel_k\"     #>  [81] \"bessel_y\"     \"logspace_add\" \"logspace_sub\" \"fmax2\"        \"fmin2\"        #>  [86] \"sign\"         \"fsign\"        \"fprec\"        \"fround\"       \"ftrunc\"       #>  [91] \"transit\"      \"gammaq\"       \"gammapDer\"    \"gammapInv\"    \"gammapInva\"   #>  [96] \"gammaqInv\"    \"gammaqInva\"   \"lowergamma\"   \"uppergamma\"   \"max\"          #> [101] \"min\"          \"logit\"        \"expit\"        \"probit\"       \"probitInv\"    #> [106] \"tlast\"        \"tfirst\"       \"lag\"          \"lead\"         \"dose\"         #> [111] \"podo\"         \"dabs\"         \"dabs2\"        \"abs1\"         \"dabs1\"        #> [116] \"erfinv\"       \"abs0\"         \"dosenum\"      \"first\"        \"last\"         #> [121] \"diff\"         \"is.nan\"       \"is.na\"        \"is.finite\"    \"is.infinite\"  #> [126] \"linCmt\"       \"rnorm\"        \"rxnorm\"       \"rxbinom\"      \"rbinom\"       #> [131] \"rxcauchy\"     \"rcauchy\"      \"rchisq\"       \"rxchisq\"      \"rexp\"         #> [136] \"rxexp\"        \"rbeta\"        \"rxbeta\"       \"rgeom\"        \"rxgeom\"       #> [141] \"rxpois\"       \"rpois\"        \"rxt\"          \"rt\""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSuppressMsg.html","id":null,"dir":"Reference","previous_headings":"","what":"Respect suppress messages — rxSuppressMsg","title":"Respect suppress messages — rxSuppressMsg","text":"turns silent REprintf C suppressMessages() turned . makes REprintf act like messages R, can suppressed suppressMessages()","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSuppressMsg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Respect suppress messages — rxSuppressMsg","text":"","code":"rxSuppressMsg()"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSuppressMsg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Respect suppress messages — rxSuppressMsg","text":"Nothing","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSuppressMsg.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Respect suppress messages — rxSuppressMsg","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSuppressMsg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Respect suppress messages — rxSuppressMsg","text":"","code":"# rxSupressMsg() is called with rxode2()  # Note the errors are output to the console  try(rxode2(\"d/dt(matt)=/3\"), silent = TRUE) #>    # When using suppressMessages, the output is suppressed  suppressMessages(try(rxode2(\"d/dt(matt)=/3\"), silent = TRUE))  # In rxode2, we use REprintf so that interrupted threads do not crash R # if there is a user interrupt. This isn't captured by R's messages, but # This interface allows the `suppressMessages()` to suppress the C printing # as well  # If you  want to suppress messages from rxode2 in other packages, you can use # this function"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSymInvChol.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Omega^-1 and derivatives — rxSymInvChol","title":"Get Omega^-1 and derivatives — rxSymInvChol","text":"Get Omega^-1 derivatives","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSymInvChol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Omega^-1 and derivatives — rxSymInvChol","text":"","code":"rxSymInvChol(   invObjOrMatrix,   theta = NULL,   type = \"cholOmegaInv\",   thetaNumber = 0L )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSymInvChol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Omega^-1 and derivatives — rxSymInvChol","text":"invObjOrMatrix Object inverse-type calculations.  matrix, setup object inversion rxSymInvCholCreate() default arguments return reactive s3 object.  Otherwise, use inversion object calculate requested derivative/inverse. theta Thetas used calculation.  missing (NULL), special s3 class created returned access Omega^1 objects needed cache based theta used. type type object.  Currently following types supported: cholOmegaInv gives Cholesky decomposition Omega Inverse matrix. omegaInv gives Omega Inverse matrix. d(omegaInv) gives d(Omega^-1) withe respect theta parameter specified thetaNumber. d(D) gives d(diagonal(Omega^-1)) respect theta parameter specified thetaNumber parameter thetaNumber types d(omegaInv) d(D), theta number derivative taken .  must positive 1 number thetas defining Omega matrix.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSymInvChol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Omega^-1 and derivatives — rxSymInvChol","text":"Matrix based parameters environment matrixes calculated variables omega, omegaInv, dOmega, dOmegaInv.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSymInvChol.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Get Omega^-1 and derivatives — rxSymInvChol","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSymInvCholCreate.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an object for calculating Omega/Omega^-1 and derivatives — rxSymInvCholCreate","title":"Creates an object for calculating Omega/Omega^-1 and derivatives — rxSymInvCholCreate","text":"Creates object calculating Omega/Omega^-1 derivatives","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSymInvCholCreate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an object for calculating Omega/Omega^-1 and derivatives — rxSymInvCholCreate","text":"","code":"rxSymInvCholCreate(   mat,   diag.xform = c(\"sqrt\", \"log\", \"identity\"),   create.env = TRUE,   envir = parent.frame() )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSymInvCholCreate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an object for calculating Omega/Omega^-1 and derivatives — rxSymInvCholCreate","text":"mat Initial Omega matrix diag.xform transformation diagonal elements OMEGA. chol(Omega^-1) create.env -- Create environment calculate inverses. (default TRUE) envir -- Environment evaluate function, bu default parent frame.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSymInvCholCreate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates an object for calculating Omega/Omega^-1 and derivatives — rxSymInvCholCreate","text":"rxSymInv object rxSymInv environment","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSymInvCholCreate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Creates an object for calculating Omega/Omega^-1 and derivatives — rxSymInvCholCreate","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSymInvCholN.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the dimension of the built-in derivatives/inverses — rxSymInvCholN","title":"Return the dimension of the built-in derivatives/inverses — rxSymInvCholN","text":"Return dimension built-derivatives/inverses","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSymInvCholN.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the dimension of the built-in derivatives/inverses — rxSymInvCholN","text":"","code":"rxSymInvCholN()"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSymInvCholN.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the dimension of the built-in derivatives/inverses — rxSymInvCholN","text":"dimension built-derivatives/inverses","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSyncOptions.html","id":null,"dir":"Reference","previous_headings":"","what":"Sync options with rxode2 variables — rxSyncOptions","title":"Sync options with rxode2 variables — rxSyncOptions","text":"Accessing rxode2 options via getOption slows solving.  allows options synced variables.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSyncOptions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sync options with rxode2 variables — rxSyncOptions","text":"","code":"rxSyncOptions(setDefaults = c(\"none\", \"permissive\", \"strict\"))"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSyncOptions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sync options with rxode2 variables — rxSyncOptions","text":"setDefaults setup rxode2's default solving options following options: \"none\" leave options alone \"permissive\" permissive option set similar R language specifications. \"strict\" strict option set similar original rxode2(). requires semicolons end lines equals assignment","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSyncOptions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sync options with rxode2 variables — rxSyncOptions","text":"nothing; called side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSyncOptions.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sync options with rxode2 variables — rxSyncOptions","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSyntaxFunctions.html","id":null,"dir":"Reference","previous_headings":"","what":"A list and description of Rode supported syntax functions — rxSyntaxFunctions","title":"A list and description of Rode supported syntax functions — rxSyntaxFunctions","text":"list description Rode supported syntax functions","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSyntaxFunctions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list and description of Rode supported syntax functions — rxSyntaxFunctions","text":"","code":"rxSyntaxFunctions"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxSyntaxFunctions.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A list and description of Rode supported syntax functions — rxSyntaxFunctions","text":"data frame 3 columns 98 rows Function Reserved function Name Description Description function Aliases Function Aliases","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxTempDir.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the rxode2 temporary directory — rxTempDir","title":"Get the rxode2 temporary directory — rxTempDir","text":"Get rxode2 temporary directory","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxTempDir.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the rxode2 temporary directory — rxTempDir","text":"","code":"rxTempDir()"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxTempDir.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the rxode2 temporary directory — rxTempDir","text":"rxode2 temporary directory.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxTheme.html","id":null,"dir":"Reference","previous_headings":"","what":"rxTheme is the ggplot2 theme for rxode2 plots — rxTheme","title":"rxTheme is the ggplot2 theme for rxode2 plots — rxTheme","text":"rxTheme ggplot2 theme rxode2 plots","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxTheme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rxTheme is the ggplot2 theme for rxode2 plots — rxTheme","text":"","code":"rxTheme(   base_size = 11,   base_family = \"\",   base_line_size = base_size/22,   base_rect_size = base_size/22,   grid = TRUE )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxTheme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rxTheme is the ggplot2 theme for rxode2 plots — rxTheme","text":"base_size base font size, given pts. base_family base font family base_line_size base size line elements base_rect_size base size rect elements grid Boolean indicating grid (TRUE) (FALSE). also character indicating x y.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxTheme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rxTheme is the ggplot2 theme for rxode2 plots — rxTheme","text":"ggplot2 theme used rxode2","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/rxToSE.html","id":null,"dir":"Reference","previous_headings":"","what":"rxode2 to symengine environment — rxToSE","title":"rxode2 to symengine environment — rxToSE","text":"rxode2 symengine environment","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxToSE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rxode2 to symengine environment — rxToSE","text":"","code":"rxToSE(x, envir = NULL, progress = FALSE, promoteLinSens = TRUE)  .rxToSE(x, envir = NULL, progress = FALSE)  rxFromSE(x, unknownDerivatives = c(\"forward\", \"central\", \"error\"))  .rxFromSE(x)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxToSE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rxode2 to symengine environment — rxToSE","text":"x expression envir default NULL; Environment put symengine variables . progress shows progress bar true. promoteLinSens Promote solved linear compartment systems sensitivity-based solutions. unknownDerivatives handling derivatives unknown functions, translator translate different types numeric derivatives.  currently supported methods :","code":"- `forward` for forward differences - `central` for central differences - `error` for throwing an error for unknown derivatives"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxToSE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rxode2 to symengine environment — rxToSE","text":"rxode2 symengine environment","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxToSE.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"rxode2 to symengine environment — rxToSE","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxTrans.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate the model to C code if needed — rxTrans","title":"Translate the model to C code if needed — rxTrans","text":"function translates model C code, needed","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxTrans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate the model to C code if needed — rxTrans","text":"","code":"rxTrans(   model,   modelPrefix = \"\",   md5 = \"\",   modName = NULL,   modVars = FALSE,   ... )  # S3 method for default rxTrans(   model,   modelPrefix = \"\",   md5 = \"\",   modName = NULL,   modVars = FALSE,   ... )  # S3 method for character rxTrans(   model,   modelPrefix = \"\",   md5 = \"\",   modName = NULL,   modVars = FALSE,   ... )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxTrans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate the model to C code if needed — rxTrans","text":"model ODE model specification.  can : string containing set ordinary differential equations (ODE) expressions defining changes dynamic system. file name ODE system equation contained ODE expression enclosed \\{\\} (see also filename argument). details, see sections “Details” rxode2 Syntax . modelPrefix Prefix model functions compiled make sure multiple rxode2 objects can coexist R session. md5 md5 model parsing, used embed md5 DLL, provide functions like rxModelVars(). modName string used model name. string used naming various aspects computations, including generating C symbol names, dynamic libraries, etc. Therefore, necessary modName consists simple ASCII alphanumeric characters starting letter. modVars returns model variables instead named vector translated properties. ... Ignored parameters.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxTrans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate the model to C code if needed — rxTrans","text":"named vector translated model properties including type jacobian specified, C function prefixes, well C functions names called compiled model.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/rxTrans.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Translate the model to C code if needed — rxTrans","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxUiGet.html","id":null,"dir":"Reference","previous_headings":"","what":"S3 for getting information from UI model — rxUiGet.cmtLines","title":"S3 for getting information from UI model — rxUiGet.cmtLines","text":"S3 getting information UI model","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxUiGet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"S3 for getting information from UI model — rxUiGet.cmtLines","text":"","code":"# S3 method for cmtLines rxUiGet(x, ...)  # S3 method for dvidLine rxUiGet(x, ...)  # S3 method for paramsLine rxUiGet(x, ...)  # S3 method for simulationSigma rxUiGet(x, ...)  # S3 method for simulationModel rxUiGet(x, ...)  rxUiGet(x, ...)  # S3 method for theta rxUiGet(x, ...)  # S3 method for omega rxUiGet(x, ...)  # S3 method for funTxt rxUiGet(x, ...)  # S3 method for allCovs rxUiGet(x, ...)  # S3 method for muRefTable rxUiGet(x, ...)  # S3 method for multipleEndpoint rxUiGet(x, ...)  # S3 method for funPrint rxUiGet(x, ...)  # S3 method for fun rxUiGet(x, ...)  # S3 method for md5 rxUiGet(x, ...)  # S3 method for ini rxUiGet(x, ...)  # S3 method for iniFun rxUiGet(x, ...)  # S3 method for modelFun rxUiGet(x, ...)  # S3 method for modelDesc rxUiGet(x, ...)  # S3 method for thetaLower rxUiGet(x, ...)  # S3 method for thetaUpper rxUiGet(x, ...)  # S3 method for default rxUiGet(x, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxUiGet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"S3 for getting information from UI model — rxUiGet.cmtLines","text":"x list (UIenvironment, exact).  UI environment parsed function rxode2.  exact boolean says exact match required. ... arguments","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxUiGet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"S3 for getting information from UI model — rxUiGet.cmtLines","text":"value requested UI object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxUiGet.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"S3 for getting information from UI model — rxUiGet.cmtLines","text":"Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxUnloadAll.html","id":null,"dir":"Reference","previous_headings":"","what":"Unloads all rxode2 compiled DLLs — rxUnloadAll","title":"Unloads all rxode2 compiled DLLs — rxUnloadAll","text":"Unloads rxode2 compiled DLLs","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxUnloadAll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unloads all rxode2 compiled DLLs — rxUnloadAll","text":"","code":"rxUnloadAll()"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxUnloadAll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unloads all rxode2 compiled DLLs — rxUnloadAll","text":"List rxode2 dlls still loaded boolean rxode2 dlls unloaded","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxUnloadAll.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unloads all rxode2 compiled DLLs — rxUnloadAll","text":"","code":"print(rxUnloadAll()) #> NULL"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxUse.html","id":null,"dir":"Reference","previous_headings":"","what":"Use model object in your package — rxUse","title":"Use model object in your package — rxUse","text":"Use model object package","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxUse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use model object in your package — rxUse","text":"","code":"rxUse(obj, overwrite = TRUE, compress = \"bzip2\", internal = FALSE)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxUse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use model object in your package — rxUse","text":"obj model save. overwrite default, use_data() overwrite existing files. really want , set TRUE. compress Choose type compression used save(). one \"gzip\", \"bzip2\", \"xz\". internal run internally.  default FALSE","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxUse.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use model object in your package — rxUse","text":"Nothing; used side effects called user","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxValidate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate rxode2\nThis allows easy validation/qualification of nlmixr by running the\ntesting suite on your system. — rxValidate","title":"Validate rxode2\nThis allows easy validation/qualification of nlmixr by running the\ntesting suite on your system. — rxValidate","text":"Validate rxode2 allows easy validation/qualification nlmixr running testing suite system.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxValidate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate rxode2\nThis allows easy validation/qualification of nlmixr by running the\ntesting suite on your system. — rxValidate","text":"","code":"rxValidate(type = NULL)  rxTest(type = NULL)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxValidate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate rxode2\nThis allows easy validation/qualification of nlmixr by running the\ntesting suite on your system. — rxValidate","text":"type Type test filter test type","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxValidate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate rxode2\nThis allows easy validation/qualification of nlmixr by running the\ntesting suite on your system. — rxValidate","text":"nothing","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxValidate.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Validate rxode2\nThis allows easy validation/qualification of nlmixr by running the\ntesting suite on your system. — rxValidate","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxVersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Version and repository for this dparser package. — rxVersion","title":"Version and repository for this dparser package. — rxVersion","text":"Version repository dparser package.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxVersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Version and repository for this dparser package. — rxVersion","text":"","code":"rxVersion(   extra = \"\",   echo = FALSE,   version = sessionInfo()$otherPkgs$rxode2$Version )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxVersion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Version and repository for this dparser package. — rxVersion","text":"extra extra text display logo echo Boolean echo text logo, default FALSE version Version display/return","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxVersion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Version and repository for this dparser package. — rxVersion","text":"character vector version repository.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxVersion.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Version and repository for this dparser package. — rxVersion","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxWinSetup.html","id":null,"dir":"Reference","previous_headings":"","what":"Setup Windows components for rxode2 — rxWinSetup","title":"Setup Windows components for rxode2 — rxWinSetup","text":"Setup Windows components rxode2","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxWinSetup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Setup Windows components for rxode2 — rxWinSetup","text":"","code":"rxWinSetup(rm.rtools = TRUE)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxWinSetup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Setup Windows components for rxode2 — rxWinSetup","text":"rm.rtools Remove Rtools current path specs.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxWinSetup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Setup Windows components for rxode2 — rxWinSetup","text":"nothing, used side effects","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxWinSetup.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Setup Windows components for rxode2 — rxWinSetup","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxWithSeed.html","id":null,"dir":"Reference","previous_headings":"","what":"Preserved seed and possibly set the seed — rxWithSeed","title":"Preserved seed and possibly set the seed — rxWithSeed","text":"Preserved seed possibly set seed","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxWithSeed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preserved seed and possibly set the seed — rxWithSeed","text":"","code":"rxWithSeed(   seed,   code,   rxseed = rxGetSeed(),   kind = \"default\",   normal.kind = \"default\",   sample.kind = \"default\" )  rxWithPreserveSeed(code)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxWithSeed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preserved seed and possibly set the seed — rxWithSeed","text":"seed R seed use session code code evaluate rxseed rxode2 seed preserved kind character NULL.  kind character     string, set R's RNG kind desired.  Use \"default\"     return R default.  See ‘Details’     interpretation NULL. normal.kind character string NULL.  character     string, set method Normal generation.  Use \"default\"     return R default.  NULL makes change. sample.kind character string NULL.  character     string, set method discrete uniform generation (used      sample, instance).  Use \"default\" return      R default.  NULL makes change.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxWithSeed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preserved seed and possibly set the seed — rxWithSeed","text":"returns whatever code returning","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/rxWithSeed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preserved seed and possibly set the seed — rxWithSeed","text":"","code":"rxGetSeed() #> [1] -1 rxWithSeed(1, {    print(rxGetSeed())    rxnorm()    print(rxGetSeed())    rxnorm() }, rxseed=3) #> [1] 3 #> [1] 5 #> [1] 0.3606008"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxbeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate beta variable from threefry generator — rxbeta","title":"Simulate beta variable from threefry generator — rxbeta","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxbeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate beta variable from threefry generator — rxbeta","text":"","code":"rxbeta(shape1, shape2, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxbeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate beta variable from threefry generator — rxbeta","text":"shape1 non-negative parameters Beta distribution. shape2 non-negative parameters Beta distribution. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator; rxnormV uses vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxbeta.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate beta variable from threefry generator — rxbeta","text":"beta random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxbeta.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate beta variable from threefry generator — rxbeta","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Also care made computer running can run number cores running can reproduce results.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxbeta.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate beta variable from threefry generator — rxbeta","text":"","code":"# \\donttest{  ## Use threefry engine  rxbeta(0.5, 0.5, n = 10) # with rxbeta you have to explicitly state n #>  [1] 0.0002412951 0.4343637136 0.7497465276 0.0198724639 0.2528311641 #>  [6] 0.0477965129 0.1910074617 0.9414777054 0.6474622830 0.5338957993 rxbeta(5, 1, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] 0.9152454 0.4620739 0.9219925 0.9827090 0.8957744 0.8471686 0.8823660 #>  [8] 0.7365389 0.5057850 0.8811503  rxbeta(1, 3) #> [1] 0.2876191   ## This example uses `rxbeta` directly in the model  rx <- rxode2({   a <- rxbeta(2, 2) }) #>    et <- et(1, id = 1:2)  s <- rxSolve(rx, et) # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxbinom.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Binomial variable from threefry generator — rxbinom","title":"Simulate Binomial variable from threefry generator — rxbinom","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxbinom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Binomial variable from threefry generator — rxbinom","text":"","code":"rxbinom(size, prob, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxbinom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Binomial variable from threefry generator — rxbinom","text":"size number trials (zero ). prob probability success trial. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator; rxnormV uses vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxbinom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Binomial variable from threefry generator — rxbinom","text":"binomial random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxbinom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Binomial variable from threefry generator — rxbinom","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Also care made computer running can run number cores running can reproduce results.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxbinom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Binomial variable from threefry generator — rxbinom","text":"","code":"# \\donttest{ ## Use threefry engine  rxbinom(10, 0.9, n = 10) # with rxbinom you have to explicitly state n #>  [1] 10  9  9  9 10  8  9 10  9  9 rxbinom(3, 0.5, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] 2 2 3 1 1 0 3 2 2 2  rxbinom(4, 0.7) #> [1] 4   ## This example uses `rxbinom` directly in the model  rx <- rxode2({   a <- rxbinom(1, 0.5) }) #>    et <- et(1, id = 1:2)  s <- rxSolve(rx, et) # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxcauchy.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Cauchy variable from threefry generator — rxcauchy","title":"Simulate Cauchy variable from threefry generator — rxcauchy","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxcauchy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Cauchy variable from threefry generator — rxcauchy","text":"","code":"rxcauchy(location = 0, scale = 1, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxcauchy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Cauchy variable from threefry generator — rxcauchy","text":"location location scale parameters. scale location scale parameters. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator; rxnormV uses vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxcauchy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Cauchy variable from threefry generator — rxcauchy","text":"Cauchy random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxcauchy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Cauchy variable from threefry generator — rxcauchy","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Also care made computer running can run number cores running can reproduce results.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxcauchy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Cauchy variable from threefry generator — rxcauchy","text":"","code":"# \\donttest{  ## Use threefry engine  rxcauchy(0, 1, n = 10) # with rxcauchy you have to explicitly state n #>  [1]  0.02717734  1.09650132 -1.40459004 -5.25699125  0.02847908 -2.49068739 #>  [7] -2.01428665 -0.28462793  2.70402940  0.67652215 rxcauchy(0.5, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1]  0.98044201 -5.19121780 -3.02522005 -2.93250355  0.04367105  1.24154450 #>  [7] -0.44270390  1.17718303  0.69547172 -7.98497297  rxcauchy(3) #> [1] 1.909299   ## This example uses `rxcauchy` directly in the model  rx <- rxode2({   a <- rxcauchy(2) }) #>    et <- et(1, id = 1:2)  s <- rxSolve(rx, et) # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxchisq.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate chi-squared variable from threefry generator — rxchisq","title":"Simulate chi-squared variable from threefry generator — rxchisq","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxchisq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate chi-squared variable from threefry generator — rxchisq","text":"","code":"rxchisq(df, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxchisq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate chi-squared variable from threefry generator — rxchisq","text":"df degrees freedom (non-negative, can non-integer). n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator; rxnormV uses vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxchisq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate chi-squared variable from threefry generator — rxchisq","text":"chi squared random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxchisq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate chi-squared variable from threefry generator — rxchisq","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Also care made computer running can run number cores running can reproduce results.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxchisq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate chi-squared variable from threefry generator — rxchisq","text":"","code":"# \\donttest{  ## Use threefry engine  rxchisq(0.5, n = 10) # with rxchisq you have to explicitly state n #>  [1] 2.821481e-02 4.586011e-07 2.016275e-03 7.283890e-01 1.810475e-03 #>  [6] 2.362373e-02 1.582569e-01 3.080611e-02 2.778131e-01 1.302852e+00 rxchisq(5, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1]  8.994637  8.692684 13.442092  2.177561  2.254866 11.445540  3.542701 #>  [8]  3.119457  1.730618  4.210280  rxchisq(1) #> [1] 0.1870507   ## This example uses `rxchisq` directly in the model  rx <- rxode2({   a <- rxchisq(2) }) #>    et <- et(1, id = 1:2)  s <- rxSolve(rx, et) # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxexp.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate exponential variable from threefry generator — rxexp","title":"Simulate exponential variable from threefry generator — rxexp","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxexp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate exponential variable from threefry generator — rxexp","text":"","code":"rxexp(rate, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxexp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate exponential variable from threefry generator — rxexp","text":"rate vector rates. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator; rxnormV uses vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxexp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate exponential variable from threefry generator — rxexp","text":"exponential random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxexp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate exponential variable from threefry generator — rxexp","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Also care made computer running can run number cores running can reproduce results.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxexp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate exponential variable from threefry generator — rxexp","text":"","code":"# \\donttest{  ## Use threefry engine  rxexp(0.5, n = 10) # with rxexp you have to explicitly state n #>  [1] 0.34801043 0.40133348 1.11399970 3.50964556 0.01798278 5.09915503 #>  [7] 2.49693630 1.48452579 0.98279880 1.19527829 rxexp(5, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] 0.321457066 0.313806778 0.161114917 0.015095523 0.244765685 0.056141160 #>  [7] 0.081923197 0.091645364 0.060644703 0.006676748  rxexp(1) #> [1] 3.11989   ## This example uses `rxexp` directly in the model  rx <- rxode2({   a <- rxexp(2) }) #>    et <- et(1, id = 1:2)  s <- rxSolve(rx, et) # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxf.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate F variable from threefry generator — rxf","title":"Simulate F variable from threefry generator — rxf","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate F variable from threefry generator — rxf","text":"","code":"rxf(df1, df2, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate F variable from threefry generator — rxf","text":"df1 degrees freedom.  Inf allowed. df2 degrees freedom.  Inf allowed. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator; rxnormV uses vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate F variable from threefry generator — rxf","text":"f random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate F variable from threefry generator — rxf","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Also care made computer running can run number cores running can reproduce results.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate F variable from threefry generator — rxf","text":"","code":"# \\donttest{  ## Use threefry engine  rxf(0.5, 0.5, n = 10) # with rxf you have to explicitly state n #>  [1] 1.148467e-05 1.799506e-02 2.486033e-01 1.622054e+03 2.593179e-03 #>  [6] 3.943110e+00 6.081680e-02 1.876889e-02 3.114804e-02 5.201100e+01 rxf(5, 1, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] 1.239311e+03 1.503832e+01 1.079271e+00 1.865065e+01 3.601994e-01 #>  [6] 5.787294e-02 1.128034e+00 2.418354e+00 1.322772e+00 1.282101e+00  rxf(1, 3) #> [1] 2.008087   ## This example uses `rxf` directly in the model  rx <- rxode2({   a <- rxf(2, 2) }) #>    et <- et(1, id = 1:2)  s <- rxSolve(rx, et) # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxgamma.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate gamma variable from threefry generator — rxgamma","title":"Simulate gamma variable from threefry generator — rxgamma","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxgamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate gamma variable from threefry generator — rxgamma","text":"","code":"rxgamma(shape, rate = 1/scale, scale = 1, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxgamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate gamma variable from threefry generator — rxgamma","text":"shape shape scale parameters.  Must positive,     scale strictly. rate alternative way specify scale. scale shape scale parameters.  Must positive,     scale strictly. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator; rxnormV uses vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxgamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate gamma variable from threefry generator — rxgamma","text":"gamma random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxgamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate gamma variable from threefry generator — rxgamma","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Also care made computer running can run number cores running can reproduce results.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxgamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate gamma variable from threefry generator — rxgamma","text":"","code":"# \\donttest{  ## Use threefry engine  rxgamma(0.5, n = 10) # with rxgamma you have to explicitly state n #>  [1] 0.02337373 0.28381772 1.06157456 0.11260668 2.92015219 1.24071165 #>  [7] 0.41154624 0.10091271 0.16499084 0.01961013 rxgamma(5, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1]  3.464266  4.449752  5.208462  5.011427  4.800199  8.066279  3.676844 #>  [8]  4.897339  4.642245 12.948280  rxgamma(1) #> [1] 0.1547762   ## This example uses `rxbeta` directly in the model  rx <- rxode2({   a <- rxgamma(2) }) #>    et <- et(1, id = 1:2)  s <- rxSolve(rx, et) # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxgeom.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate geometric variable from threefry generator — rxgeom","title":"Simulate geometric variable from threefry generator — rxgeom","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxgeom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate geometric variable from threefry generator — rxgeom","text":"","code":"rxgeom(prob, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxgeom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate geometric variable from threefry generator — rxgeom","text":"prob probability success trial. 0 < prob <= 1. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator; rxnormV uses vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxgeom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate geometric variable from threefry generator — rxgeom","text":"geometric random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxgeom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate geometric variable from threefry generator — rxgeom","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Also care made computer running can run number cores running can reproduce results.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxgeom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate geometric variable from threefry generator — rxgeom","text":"","code":"# \\donttest{  ## Use threefry engine  rxgeom(0.5, n = 10) # with rxgeom you have to explicitly state n #>  [1] 1 2 1 0 2 0 1 1 0 0 rxgeom(0.25, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] 9 0 4 1 7 1 0 4 0 5  rxgeom(0.75) #> [1] 1   ## This example uses `rxgeom` directly in the model  rx <- rxode2({   a <- rxgeom(0.24) }) #>    et <- et(1, id = 1:2)  s <- rxSolve(rx, et) # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxnormV.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate random normal variable from threefry/vandercorput generator — rxnorm","title":"Simulate random normal variable from threefry/vandercorput generator — rxnorm","text":"Simulate random normal variable threefry/vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxnormV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate random normal variable from threefry/vandercorput generator — rxnorm","text":"","code":"rxnorm(mean = 0, sd = 1, n = 1L, ncores = 1L)  rxnormV(mean = 0, sd = 1, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxnormV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate random normal variable from threefry/vandercorput generator — rxnorm","text":"mean vector means. sd vector standard deviations. n number observations ncores Number cores simulation rxnorm simulates using threefry sitmo generator; rxnormV uses vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxnormV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate random normal variable from threefry/vandercorput generator — rxnorm","text":"normal random number deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxnormV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate random normal variable from threefry/vandercorput generator — rxnorm","text":"","code":"# \\donttest{ ## Use threefry engine  rxnorm(n = 10) # with rxnorm you have to explicitly state n #>  [1]  0.2045370 -0.5271233  0.1949391 -0.3036363  2.8053792 -1.8444770 #>  [7] -0.2481063  0.3318225  0.7087900 -1.5385455 rxnorm(n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1]  0.7093897  0.1233672  1.8732016 -0.6417472 -0.2069744  0.6884050 #>  [7] -1.6422303 -0.2009262 -0.6100702  0.2889458  rxnorm(2, 3) ## The first 2 arguments are the mean and standard deviation #> [1] 1.641036   ## This example uses `rxnorm` directly in the model  rx <- rxode2({   a <- rxnorm() }) #>    et <- et(1, id = 1:2)  s <- rxSolve(rx, et)  ## Use vandercorput generator  rxnormV(n = 10) # with rxnorm you have to explicitly state n #>  [1]  0.8383711 -0.8266372  0.3136472 -0.9235044  0.9159284 -0.2995986 #>  [7]  0.1039104 -0.7045819  0.9656959 -0.5707552 rxnormV(n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] -1.7600690  1.8064683  0.9407191 -1.7600690 -0.4506272  0.9407191 #>  [7]  0.5275620 -0.4506272 -0.3230154  0.5275620  rxnormV(2, 3) ## The first 2 arguments are the mean and standard deviation #> [1] 2.479007   ## This example uses `rxnormV` directly in the model  rx <- rxode2({   a <- rxnormV() }) #>    et <- et(1, id = 1:2)  s <- rxSolve(rx, et) # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxode2.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an ODE-based model specification — rxode2","title":"Create an ODE-based model specification — rxode2","text":"Create dynamic ODE-based model object suitably translation fast C code","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxode2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an ODE-based model specification — rxode2","text":"","code":"rxode2(   model,   modName = basename(wd),   wd = getwd(),   filename = NULL,   extraC = NULL,   debug = FALSE,   calcJac = NULL,   calcSens = NULL,   collapseModel = FALSE,   package = NULL,   ...,   linCmtSens = c(\"linCmtA\", \"linCmtB\", \"linCmtC\"),   indLin = FALSE,   verbose = FALSE )  RxODE(   model,   modName = basename(wd),   wd = getwd(),   filename = NULL,   extraC = NULL,   debug = FALSE,   calcJac = NULL,   calcSens = NULL,   collapseModel = FALSE,   package = NULL,   ...,   linCmtSens = c(\"linCmtA\", \"linCmtB\", \"linCmtC\"),   indLin = FALSE,   verbose = FALSE )  rxode(   model,   modName = basename(wd),   wd = getwd(),   filename = NULL,   extraC = NULL,   debug = FALSE,   calcJac = NULL,   calcSens = NULL,   collapseModel = FALSE,   package = NULL,   ...,   linCmtSens = c(\"linCmtA\", \"linCmtB\", \"linCmtC\"),   indLin = FALSE,   verbose = FALSE )"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxode2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an ODE-based model specification — rxode2","text":"model ODE model specification.  can : string containing set ordinary differential equations (ODE) expressions defining changes dynamic system. file name ODE system equation contained ODE expression enclosed \\{\\} (see also filename argument). details, see sections “Details” rxode2 Syntax . modName string used model name. string used naming various aspects computations, including generating C symbol names, dynamic libraries, etc. Therefore, necessary modName consists simple ASCII alphanumeric characters starting letter. wd character string working directory create subdirectory according modName. specified, subdirectory named “modName.d” created populated C file, dynamic loading library, plus various working files. missing, files created (removed) temporary directory, rxode2 DLL model created current directory named rx_????_platform, example rx_129f8f97fb94a87ca49ca8dafe691e1e_i386.dll filename file name connection object ODE-based model specification resides. one model filename may specified. extraC Extra c code include model.  can useful specify functions model.  C functions usually take double precision arguments, return double precision values. debug boolean indicating executable compiled verbose debugging information turned . calcJac boolean indicating rxode2 calculate Jacobain according specified ODEs. calcSens boolean indicating rxode2 calculate sensitivities according specified ODEs. collapseModel boolean indicating rxode2 remove LHS variables calculating sensitivities. package Package name pre-compiled binaries. ... ignored arguments. linCmtSens method calculate linCmt() solutions indLin Calculate inductive linearization matrices compile inductive linearization support. verbose TRUE verbose linear compartmental model","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxode2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create an ODE-based model specification — rxode2","text":"object (environment) class rxode2 (see Chambers Temple Lang (2001)) consisting following list strings functions:","code":"* `model` a character string holding the source model specification. * `get.modelVars`a function that returns a list with 3 character     vectors, `params`, `state`, and `lhs` of variable names used in the model     specification. These will be output when the model is computed (i.e., the ODE solved by integration).    * `solve`{this function solves (integrates) the ODE. This       is done by passing the code to [rxSolve()].       This is as if you called `rxSolve(rxode2object, ...)`,       but returns a matrix instead of a rxSolve object.        `params`: a numeric named vector with values for every parameter       in the ODE system; the names must correspond to the parameter       identifiers used in the ODE specification;        `events`: an `eventTable` object describing the       input (e.g., doses) to the dynamic system and observation       sampling time points (see  [eventTable()]);        `inits`: a vector of initial values of the state variables       (e.g., amounts in each compartment), and the order in this vector       must be the same as the state variables (e.g., PK/PD compartments);         `stiff`: a logical (`TRUE` by default) indicating whether       the ODE system is stiff or not.        For stiff ODE systems (`stiff = TRUE`), `rxode2` uses       the LSODA (Livermore Solver for Ordinary Differential Equations)       Fortran package, which implements an automatic method switching       for stiff and non-stiff problems along the integration interval,       authored by Hindmarsh and Petzold (2003).        For non-stiff systems (`stiff = FALSE`), `rxode2` uses `DOP853`,       an explicit Runge-Kutta method of order 8(5, 3) of Dormand and Prince       as implemented in C by Hairer and Wanner (1993).        `trans_abs`: a logical (`FALSE` by default) indicating       whether to fit a transit absorption term       (TODO: need further documentation and example);        `atol`: a numeric absolute tolerance (1e-08 by default);        `rtol`: a numeric relative tolerance (1e-06 by default).e        The output of \\dQuote{solve} is a matrix with as many rows as there       are sampled time points and as many columns as system variables       (as defined by the ODEs and additional assignments in the rxode2 model           code).}    * `isValid` a function that (naively) checks for model validity,       namely that the C object code reflects the latest model       specification.   * `version` a string with the version of the `rxode2`       object (not the package).   * `dynLoad` a function with one `force = FALSE` argument       that dynamically loads the object code if needed.   * `dynUnload` a function with no argument that unloads       the model object code.   * `delete` removes all created model files, including C and DLL files.       The model object is no longer valid and should be removed, e.g.,       `rm(m1)`.   * `run` deprecated, use `solve`.   * `get.index` deprecated.   * `getObj` internal (not user callable) function."},{"path":"https://nlmixr2.github.io/rxode2/reference/rxode2.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an ODE-based model specification — rxode2","text":"Rx name rxode2 meant suggest abbreviation Rx medical prescription, thus suggest package emphasis pharmacometrics modeling, including pharmacokinetics (PK), pharmacodynamics (PD), disease progression, drug-disease modeling, etc. ODE-based model specification may coded inside character string text file, see Section rxode2 Syntax coding details.  internal rxode2 compilation manager object translates ODE system C, compiles , dynamically loads object code current R session.  call rxode2 produces object class rxode2 consists list-like structure (environment) various member functions (see Section Value ). evaluating rxode2 models, two types inputs may provided: required set time points querying state ODE system optional set doses (input amounts).  inputs combined single event table object created function eventTable() et(). rxode2 model specification consists one statements optionally terminated semi-colons ; optional comments (comments delimited # end--line). block statements set statements delimited curly braces, { ... }. Statements can either assignments, conditional /else /else, loops (can exited break), special statements, printing statements (debugging/testing) Assignment statements can : simple assignments, left hand identifier (.e., variable) special time-derivative assignments, left hand specifies change amount corresponding state variable (compartment) respect time e.g., d/dt(depot): special initial-condition assignments left hand specifies compartment initial condition specified, e.g. depot(0) = 0 special model event changes including bioavailability (f(depot)=1), lag time (alag(depot)=0), modeled rate (rate(depot)=2) modeled duration (dur(depot)=2). example model features event specification modeled infusions rxode2 data specification found rxode2 events vignette. special change point syntax, model times. model times specified mtime(var)=time special Jacobian-derivative assignments, left hand specifies change compartment ode respect variable. example, d/dt(y) = dy, Jacobian compartment can specified df(y)/dy(dy) = 1. may advantage obtaining solution specifying Jacobian stiff ODE systems. However, stiff systems tried LSODA, actually slightly slowed solving. Note assignment can done =, <- ~. assigning ~ operator, simple assignments time-derivative assignments output. Special statements can : Compartment declaration statements, can change default dosing compartment assumed compartment number(s) well add extra compartment names end (useful multiple-endpoint nlmixr models); specified cmt(compartmentName) Parameter declaration statements, can make sure input parameters certain order instead ordering parameters order parsed. useful keeping parameter order using 2 different ODE models. specified param(par1, par2,...) example model shown : Expressions assignment statements can numeric logical, however, character integer expressions currently supported. Numeric expressions can include following numeric operators +, -, *, /, ^ mathematical functions defined C R math libraries (e.g., fabs, exp, log, sin, abs). may also access R’s functions R math libraries, like lgammafn log gamma function. rxode2 syntax case-sensitive, .e., ABC different abc, Abc, ABc, etc.","code":"# simple assignment    C2 = centr/V2;     # time-derivative assignment    d/dt(centr) = F*KA*depot - CL*C2 - Q*C2 + Q*C3;"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxode2.html","id":"identifiers","dir":"Reference","previous_headings":"","what":"Identifiers","title":"Create an ODE-based model specification — rxode2","text":"Like R, Identifiers (variable names) may consist one alphanumeric, underscore _ period . characters, first character digit underscore _. Identifiers model specification can refer : State variables dynamic system (e.g., compartments pharmacokinetics model). Implied input variable, t (time), tlast (last time point), podo (oral dose, undocumented case absorption transit models). Special constants like pi R’s predefined constants. Model parameters (e.g., ka rate absorption, CL clearance, etc.) Others, created assignments part model specification; referred LHS (left-hand side) variable. Currently, rxode2 modeling language recognizes system state variables “parameters”, thus, values need passed R ODE model (e.g., age) either passed params argument integrator function rxSolve() supplied event data-set. certain variable names rxode2 event tables. avoid confusion, following event table-related items assigned, used state can accessed rxode2 code: cmt dvid addl ss rate id However following variables used model specification: evid ii Sometimes rxode2 generates variables fed back rxode2. Similarly, nlmixr generates variables used nlmixr estimation simulation. variables start either rx nlmixr prefixes. avoid problems, suggested use variables starting either rx nlmixr prefixes.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxode2.html","id":"logical-operators","dir":"Reference","previous_headings":"","what":"Logical Operators","title":"Create an ODE-based model specification — rxode2","text":"Logical operators support standard R operators ==, != >= <= > <. Like R can () () statements, ifelse() expressions. Additionally can standard assignment. instance, following valid: Notice can also use character expressions comparisons. convenience comes cost since character comparisons slower numeric expressions. Unlike R, .numeric .integer logical statements needed, cause syntax error try use function.","code":"cov1 = covm*(sexf == \"female\") + covm*(sexf != \"female\")"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxode2.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create an ODE-based model specification — rxode2","text":"Chamber, J. M. Temple Lang, D. (2001) Object Oriented Programming R. R News, Vol. 1, . 3, September 2001. https://cran.r-project.org/doc/Rnews/Rnews_2001-3.pdf. Hindmarsh, . C. ODEPACK, Systematized Collection ODE Solvers. Scientific Computing, R. S. Stepleman et al. (Eds.), North-Holland, Amsterdam, 1983, pp. 55-64. Petzold, L. R. Automatic Selection Methods Solving Stiff Nonstiff Systems Ordinary Differential Equations. Siam J. Sci. Stat. Comput. 4 (1983), pp. 136-148. Hairer, E., Norsett, S. P., Wanner, G. Solving ordinary differential equations , nonstiff problems. 2nd edition, Springer Series Computational Mathematics, Springer-Verlag (1993). Plevyak, J. dparser, http://dparser.sourceforge.net. Web. 12 Oct. 2015.","code":""},{"path":[]},{"path":"https://nlmixr2.github.io/rxode2/reference/rxode2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create an ODE-based model specification — rxode2","text":"Melissa Hallow, Wenping Wang Matthew Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxode2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an ODE-based model specification — rxode2","text":"","code":"# \\donttest{ # Step 1 - Create a model specification ode <- \"    # A 4-compartment model, 3 PK and a PD (effect) compartment    # (notice state variable names 'depot', 'centr', 'peri', 'eff')     C2 = centr/V2;    C3 = peri/V3;    d/dt(depot) =-KA*depot;    d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3;    d/dt(peri)  =                    Q*C2 - Q*C3;    d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff; \"  m1 <- rxode(model = ode) #>   print(m1) #> rxode2 2.0.6 model named rx_925f5babd1fcfff7bd12ab9044d22e7b model (✔ ready).  #> $state: depot, centr, peri, eff #> $params: V2, V3, KA, CL, Q, Kin, Kout, EC50 #> $lhs: C2, C3  # Step 2 - Create the model input as an EventTable, # including dosing and observation (sampling) events  # QD (once daily) dosing for 5 days.  qd <- eventTable(amount.units = \"ug\", time.units = \"hours\") qd$add.dosing(dose = 10000, nbr.doses = 5, dosing.interval = 24)  # Sample the system hourly during the first day, every 8 hours # then after  qd$add.sampling(0:24) qd$add.sampling(seq(from = 24 + 8, to = 5 * 24, by = 8))  # Step 3 - set starting parameter estimates and initial # values of the state  theta <-   c(     KA = .291, CL = 18.6,     V2 = 40.2, Q = 10.5, V3 = 297.0,     Kin = 1.0, Kout = 1.0, EC50 = 200.0   )  # init state variable inits <- c(0, 0, 0, 1) # Step 4 - Fit the model to the data  qd.cp <- m1$solve(theta, events = qd, inits) #> Warning: Assumed order of inputs: depot, centr, peri, eff  head(qd.cp) #>      time       C2        C3     depot    centr      peri      eff #> [1,]    0  0.00000 0.0000000 10000.000    0.000    0.0000 1.000000 #> [2,]    1 43.99334 0.9113641  7475.157 1768.532  270.6751 1.083968 #> [3,]    2 54.50866 2.6510696  5587.797 2191.248  787.3677 1.179529 #> [4,]    3 51.65163 4.4243597  4176.966 2076.396 1314.0348 1.227523 #> [5,]    4 44.37513 5.9432612  3122.347 1783.880 1765.1486 1.233503 #> [6,]    5 36.46382 7.1389804  2334.004 1465.845 2120.2772 1.214084  # This returns a matrix.  Note that you can also # solve using name initial values. For example:  inits <- c(eff = 1) qd.cp <- solve(m1, theta, events = qd, inits) print(qd.cp) #> ── Solved rxode2 object ── #> ── Parameters ($params): ── #>      V2      V3      KA      CL       Q     Kin    Kout    EC50  #>  40.200 297.000   0.291  18.600  10.500   1.000   1.000 200.000  #> ── Initial Conditions ($inits): ── #> depot centr  peri   eff  #>     0     0     0     1  #> ── First part of data (object): ── #> # A tibble: 37 × 7 #>   time    C2    C3  depot centr  peri   eff #>    [h] <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> #> 1    0   0   0     10000     0     0   1    #> 2    1  44.0 0.911  7475. 1769.  271.  1.08 #> 3    2  54.5 2.65   5588. 2191.  787.  1.18 #> 4    3  51.7 4.42   4177. 2076. 1314.  1.23 #> 5    4  44.4 5.94   3122. 1784. 1765.  1.23 #> 6    5  36.5 7.14   2334. 1466. 2120.  1.21 #> # … with 31 more rows  plot(qd.cp)  # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxord.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate ordinal value — rxord","title":"Simulate ordinal value — rxord","text":"Simulate ordinal value","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate ordinal value — rxord","text":"","code":"rxord(...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate ordinal value — rxord","text":"... probabilities simulated.  sum number one.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate ordinal value — rxord","text":"number 1 (number probabilities specified + 1)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxord.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate ordinal value — rxord","text":"values entered 'rxord' simulation simulate probability falling group. falls outside specified probabilities, simulate group (number probabilities specified + 1)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxord.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate ordinal value — rxord","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate ordinal value — rxord","text":"","code":"# This will give values 1, and 2 rxord(0.5) #> [1] 1 rxord(0.5) #> [1] 1 rxord(0.5) #> [1] 2 rxord(0.5) #> [1] 1  # This will give values 1, 2 and 3 rxord(0.3, 0.3) #> [1] 1 rxord(0.3, 0.3) #> [1] 2 rxord(0.3, 0.3) #> [1] 3"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxpois.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate random Poisson variable from threefry generator — rxpois","title":"Simulate random Poisson variable from threefry generator — rxpois","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxpois.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate random Poisson variable from threefry generator — rxpois","text":"","code":"rxpois(lambda, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxpois.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate random Poisson variable from threefry generator — rxpois","text":"lambda vector (non-negative) means. n number random values return. ncores Number cores simulation rxnorm simulates using threefry sitmo generator; rxnormV uses vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxpois.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate random Poisson variable from threefry generator — rxpois","text":"poission random number deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxpois.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate random Poisson variable from threefry generator — rxpois","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Also care made computer running can run number cores running can reproduce results.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxpois.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate random Poisson variable from threefry generator — rxpois","text":"","code":"# \\donttest{ ## Use threefry engine  rxpois(lambda = 3, n = 10) # with rxpois you have to explicitly state n #>  [1] 3 0 4 3 1 0 0 7 3 4 rxpois(lambda = 3, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] 7 3 1 1 2 2 2 4 4 2  rxpois(4) ## The first arguments are the lambda parameter #> [1] 1   ## This example uses `rxpois` directly in the model  rx <- rxode2({   a <- rxpois(3) }) #>    et <- et(1, id = 1:2)  s <- rxSolve(rx, et) # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxt.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate student t variable from threefry generator — rxt","title":"Simulate student t variable from threefry generator — rxt","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate student t variable from threefry generator — rxt","text":"","code":"rxt(df, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate student t variable from threefry generator — rxt","text":"df degrees freedom (\\(> 0\\), maybe non-integer).  df       = Inf allowed. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator; rxnormV uses vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate student t variable from threefry generator — rxt","text":"t-distribution random numbers","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate student t variable from threefry generator — rxt","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Also care made computer running can run number cores running can reproduce results.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate student t variable from threefry generator — rxt","text":"","code":"# \\donttest{  ## Use threefry engine  rxt(df = 3, n = 10) # with rxt you have to explicitly state n #>  [1]  0.2357819 -0.7333730  0.1808862 -0.9858865  0.1660966  0.9003232 #>  [7]  2.8691892  0.2387249  1.0466124 -1.2163040 rxt(df = 3, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1]  1.3815600  0.7090675  2.1144545  2.5337710  0.7674457  1.0025561 #>  [7]  1.2045156  1.3351363  2.4454188 -0.7573579  rxt(4) ## The first argument is the df parameter #> [1] -0.4762733   ## This example uses `rxt` directly in the model  rx <- rxode2({   a <- rxt(3) }) #>    et <- et(1, id = 1:2)  s <- rxSolve(rx, et) # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxunif.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate uniform variable from threefry generator — rxunif","title":"Simulate uniform variable from threefry generator — rxunif","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxunif.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate uniform variable from threefry generator — rxunif","text":"","code":"rxunif(min = 0, max = 1, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxunif.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate uniform variable from threefry generator — rxunif","text":"min lower upper limits distribution.  Must finite. max lower upper limits distribution.  Must finite. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator; rxnormV uses vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxunif.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate uniform variable from threefry generator — rxunif","text":"uniform random numbers","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxunif.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate uniform variable from threefry generator — rxunif","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Also care made computer running can run number cores running can reproduce results.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxunif.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate uniform variable from threefry generator — rxunif","text":"","code":"# \\donttest{  ## Use threefry engine  rxunif(min = 0, max = 4, n = 10) # with rxunif you have to explicitly state n #>  [1] 1.3061140 1.2325494 3.5528744 0.7267568 2.6946057 3.9863650 0.8839350 #>  [8] 0.6969313 3.2520449 2.0732372 rxunif(min = 0, max = 4, n = 10, ncores = 2) # You can parallelize the simulation using openMP #>  [1] 1.7674899 1.5461290 3.7162267 3.2072444 0.5648740 2.2915928 0.4351249 #>  [8] 1.5425203 3.4122299 3.7241843  rxunif() #> [1] 0.2577899   ## This example uses `rxunif` directly in the model  rx <- rxode2({   a <- rxunif(0, 3) }) #>    et <- et(1, id = 1:2)  s <- rxSolve(rx, et) # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxweibull.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate Weibull variable from threefry generator — rxweibull","title":"Simulate Weibull variable from threefry generator — rxweibull","text":"Care taken method encounter birthday problem, described https://www.johndcook.com/blog/2016/01/29/random-number-generator-seed-mistakes/. Since sitmo threefry, currently generates one random deviate uniform distribution seed engine threefry run code.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxweibull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate Weibull variable from threefry generator — rxweibull","text":"","code":"rxweibull(shape, scale = 1, n = 1L, ncores = 1L)"},{"path":"https://nlmixr2.github.io/rxode2/reference/rxweibull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate Weibull variable from threefry generator — rxweibull","text":"shape shape scale parameters, latter defaulting 1. scale shape scale parameters, latter defaulting 1. n number observations. length(n) > 1, length     taken number required. ncores Number cores simulation rxnorm simulates using threefry sitmo generator; rxnormV uses vandercorput generator","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxweibull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate Weibull variable from threefry generator — rxweibull","text":"Weibull random deviates","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxweibull.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate Weibull variable from threefry generator — rxweibull","text":"Therefore, simple call random number generated followed second call random number generated may identical seeds.  number random number generator calls increased probability birthday problem increase. key avoid problem either run simulations rxode2 environment (therefore one seed series seeds whole simulation), pre-generate random variables used simulation, seed rxode2 engine rxSetSeed() Also care made computer running can run number cores running can reproduce results.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/rxweibull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate Weibull variable from threefry generator — rxweibull","text":"","code":"# \\donttest{  ## Use threefry engine  # with rxweibull you have to explicitly state n rxweibull(shape = 1, scale = 4, n = 10) #>  [1] 6.1972219 2.2197355 0.6192215 1.2263721 2.1626554 5.5335920 2.8475638 #>  [8] 1.3354047 8.1288283 1.3431655  # You can parallelize the simulation using openMP rxweibull(shape = 1, scale = 4, n = 10, ncores = 2) #>  [1] 2.00263924 2.40654298 2.00454395 5.19778545 4.09898773 2.13143933 #>  [7] 1.07848122 6.47886964 2.95601595 0.04294222  rxweibull(3) #> [1] 1.163073   ## This example uses `rxweibull` directly in the model  rx <- rxode2({   a <- rxweibull(1, 3) }) #>    et <- et(1, id = 1:2)  s <- rxSolve(rx, et) # }"},{"path":"https://nlmixr2.github.io/rxode2/reference/stat_amt.html","id":null,"dir":"Reference","previous_headings":"","what":"Dosing/Amt geom/stat — stat_amt","title":"Dosing/Amt geom/stat — stat_amt","text":"dosing geom shows vertical lines dose occurs","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/stat_amt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dosing/Amt geom/stat — stat_amt","text":"","code":"stat_amt(   mapping = NULL,   data = NULL,   position = \"identity\",   show.legend = NA,   inherit.aes = TRUE,   ... )  geom_amt(   mapping = NULL,   data = NULL,   position = \"identity\",   show.legend = NA,   inherit.aes = TRUE,   ... )"},{"path":"https://nlmixr2.github.io/rxode2/reference/stat_amt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dosing/Amt geom/stat — stat_amt","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). position Position adjustment, either string, result call position adjustment function. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/stat_amt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dosing/Amt geom/stat — stat_amt","text":"returns stat_amt context ggplot2 plot","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/stat_amt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dosing/Amt geom/stat — stat_amt","text":"Requires following aesthetics: x representing x values, usually time amt representing dosing values;  missing zero dose given","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/stat_amt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dosing/Amt geom/stat — stat_amt","text":"","code":"library(rxode2) library(units)   ## Model from RxODE tutorial mod1 <-rxode2({        KA=2.94E-01        CL=1.86E+01        V2=4.02E+01        Q=1.05E+01        V3=2.97E+02        Kin=1        Kout=1        EC50=200        C2 = centr/V2        C3 = peri/V3        d/dt(depot) =-KA*depot        d/dt(centr) = KA*depot - CL*C2 - Q*C2 + Q*C3        d/dt(peri)  =                    Q*C2 - Q*C3        d/dt(eff)  = Kin - Kout*(1-C2/(EC50+C2))*eff }) #>    ## These are making the more complex regimens of the rxode2 tutorial  ## bid for 5 days bid <- et(timeUnits=\"hr\") %>%       et(amt=10000,ii=12,until=set_units(5, \"days\"))  ## qd for 5 days qd <- et(timeUnits=\"hr\") %>%       et(amt=20000,ii=24,until=set_units(5, \"days\"))  ## bid for 5 days followed by qd for 5 days  et <- seq(bid,qd) %>% et(seq(0,11*24,length.out=100));  bidQd <- rxSolve(mod1, et, addDosing=TRUE)  # by default dotted and under-stated plot(bidQd, C2) + geom_amt(aes(amt=amt))   # of course you can make it a bit more visible  plot(bidQd, C2) + geom_amt(aes(amt=amt), col=\"red\", lty=1, size=1.2)"},{"path":"https://nlmixr2.github.io/rxode2/reference/stat_cens.html","id":null,"dir":"Reference","previous_headings":"","what":"Censoring geom/stat — stat_cens","title":"Censoring geom/stat — stat_cens","text":"censoring geom shows left right censoring specified nlmixr input data-set fit","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/stat_cens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Censoring geom/stat — stat_cens","text":"","code":"stat_cens(   mapping = NULL,   data = NULL,   position = \"identity\",   show.legend = NA,   inherit.aes = TRUE,   width = 0.01,   ... )  geom_cens(   mapping = NULL,   data = NULL,   position = \"identity\",   show.legend = NA,   inherit.aes = TRUE,   width = 0.01,   ... )"},{"path":"https://nlmixr2.github.io/rxode2/reference/stat_cens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Censoring geom/stat — stat_cens","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). position Position adjustment, either string, result call position adjustment function. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). width represents width (\\ censoring box ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"red\" size = 3. may also parameters paired geom/stat.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/stat_cens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Censoring geom/stat — stat_cens","text":"returns ggplot2 stat","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/stat_cens.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Censoring geom/stat — stat_cens","text":"Requires following aesthetics: x Represents independent variable, often time scale y represents dependent variable CENS censoring information; (-1 right censored, 0 censoring 1 left censoring) LIMIT represents corresponding limit () add boxes representing areas fit censored.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/summary.rxDll.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary of rxDll object — summary.rxDll","title":"Summary of rxDll object — summary.rxDll","text":"gives expanded information rxDll object","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/summary.rxDll.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary of rxDll object — summary.rxDll","text":"","code":"# S3 method for rxDll summary(object, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/summary.rxDll.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary of rxDll object — summary.rxDll","text":"object RxDll object ... arguments.  Includes noprint, logical telling object print rxDll object first. default FALSE","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/summary.rxDll.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary of rxDll object — summary.rxDll","text":"object returned","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/summary.rxDll.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary of rxDll object — summary.rxDll","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/summary.rxode2.html","id":null,"dir":"Reference","previous_headings":"","what":"Print expanded information about the rxode2 object. — summary.rxode2","title":"Print expanded information about the rxode2 object. — summary.rxode2","text":"prints expanded information rxode2 object.","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/summary.rxode2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print expanded information about the rxode2 object. — summary.rxode2","text":"","code":"# S3 method for rxode2 summary(object, ...)"},{"path":"https://nlmixr2.github.io/rxode2/reference/summary.rxode2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print expanded information about the rxode2 object. — summary.rxode2","text":"object rxode2 object ... Ignored parameters","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/summary.rxode2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print expanded information about the rxode2 object. — summary.rxode2","text":"object returned","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/summary.rxode2.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print expanded information about the rxode2 object. — summary.rxode2","text":"Matthew L.Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/update.rxUi.html","id":null,"dir":"Reference","previous_headings":"","what":"Update for rxUi — update.rxUi","title":"Update for rxUi — update.rxUi","text":"Update rxUi","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/update.rxUi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update for rxUi — update.rxUi","text":"","code":"# S3 method for rxUi update(object, ..., envir = parent.frame())"},{"path":"https://nlmixr2.github.io/rxode2/reference/update.rxUi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update for rxUi — update.rxUi","text":"object rxode2 UI object ... Lines update envir Environment evaluating ini() style calls","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/uppergamma.html","id":null,"dir":"Reference","previous_headings":"","what":"uppergamma:  upper incomplete gamma function — uppergamma","title":"uppergamma:  upper incomplete gamma function — uppergamma","text":"tgamma boost library","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/uppergamma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"uppergamma:  upper incomplete gamma function — uppergamma","text":"","code":"uppergamma(a, z)"},{"path":"https://nlmixr2.github.io/rxode2/reference/uppergamma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"uppergamma:  upper incomplete gamma function — uppergamma","text":"numeric '' parameter upper incomplete gamma z numeric 'z' parameter upper incomplete gamma","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/uppergamma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"uppergamma:  upper incomplete gamma function — uppergamma","text":"uppergamma results","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/uppergamma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"uppergamma:  upper incomplete gamma function — uppergamma","text":"uppergamma function given : \\(uppergamma(, z) = \\int_{z}^{\\infty}t^{-1}\\cdot e^{-t} dt\\)","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/uppergamma.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"uppergamma:  upper incomplete gamma function — uppergamma","text":"Matthew L. Fidler","code":""},{"path":"https://nlmixr2.github.io/rxode2/reference/uppergamma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"uppergamma:  upper incomplete gamma function — uppergamma","text":"","code":"uppergamma(1, 3) #> [1] 0.04978707  uppergamma(1:3, 3) #> [1] 0.04978707 0.19914827 0.84638016  uppergamma(1, 1:3) #> [1] 0.36787944 0.13533528 0.04978707"}]
